{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"2fee1653bd2540632d79b43158dc970577d7fdda","modified":1458222108237},{"_id":"source/favicon.ico","hash":"421c09dd34bd64ec866f4d34b808c887b23b1afe","modified":1458222108238},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1458222108239},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1458222108240},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1458222108241},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1458222108241},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1458222108242},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1458222108242},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1458222108242},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1458222108243},{"_id":"themes/next/_config.yml","hash":"eb890e709a4fe2112207d60c64d3c04083996717","modified":1458228368648},{"_id":"themes/next/bower.json","hash":"93adc30dab22314f3757c3b6d3c13771de994b08","modified":1458222108245},{"_id":"themes/next/gulpfile.coffee","hash":"0494704f9e1ac8f63b9bd2791c443ffbf6091df3","modified":1458222108245},{"_id":"themes/next/package.json","hash":"afc2cbda2fe4643808c151135d5528267ee634c4","modified":1458222108280},{"_id":"source/_posts/Flexbox-Layout.md","hash":"aee1c8ce6a8c29d744c452d79b025e0b116c55e8","modified":1458231787867},{"_id":"source/_posts/node-01http.md","hash":"56e5120dc9270d5cb3b2ff31b911298f5da503fd","modified":1445698369914},{"_id":"source/_posts/node-02process.md","hash":"1a097e2cab88ccb0956f82208d65f683b21822fa","modified":1445960120322},{"_id":"source/_posts/node-03event.md","hash":"73c3450f25b52ae6d9bf2e2d0919f30b682add2e","modified":1446126256671},{"_id":"source/_posts/node-04module.md","hash":"810012fb4055d2e04b049a2bba4716415e1bc3ad","modified":1446136845649},{"_id":"source/_posts/node-05buffer.md","hash":"919a48a1e5d922dfd3946cfb5484137aaa629d78","modified":1446197770249},{"_id":"source/_posts/node-06file.md","hash":"30dadc26f3181e52021d56452ffb41b90ab46739","modified":1447048261650},{"_id":"source/_posts/node-07npm.md","hash":"9b4bd626f7c9d40d53aa20bf7743230b25640b7f","modified":1447054417414},{"_id":"source/_posts/node-08path.md","hash":"dfa92a2169deb6520df58ff8ada17c5b3bed5890","modified":1447062915531},{"_id":"source/_posts/node-09stream.md","hash":"5f6d7edddbe562d52a920758a8615c90c3d97dfe","modified":1447122332727},{"_id":"source/_posts/node-10http.md","hash":"e7d42b9c649b0b3bd2e189d2273c811db2569bd8","modified":1447152191617},{"_id":"source/_posts/node-11cookie.md","hash":"a0b7f7fef42b13f0782c92d6063f71211924a9ab","modified":1447214211532},{"_id":"source/_posts/node-12express.md","hash":"ba83c409105992e98542bed026d1663c944725db","modified":1447240007269},{"_id":"source/_posts/node-13mongoose.md","hash":"e181596c295c93e072fe9ba35bc50e333f1bc504","modified":1447331867523},{"_id":"source/_posts/node-14async.md","hash":"176469ff4664cd74ba0df25122996fe787a778c7","modified":1447689707111},{"_id":"source/_posts/node-crawl.md","hash":"af05df7b868da707b9517cedf9032ba9ec294e45","modified":1458231642888},{"_id":"source/_posts/zepto学习笔记.md","hash":"4608807abd2b0b4cc8f91ab0622b493278ca9e02","modified":1445949398310},{"_id":"source/images/avatar.jpg","hash":"cec12ec035c5a08107cf379ea621d240b71377a0","modified":1458229041360},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1458222108240},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a09da7ff6504131e928b9c99dcec98a411331812","modified":1458222108240},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1458222108248},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1458222108249},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1458222108249},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1458222108249},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1458222108252},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1458222108252},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1458222108253},{"_id":"themes/next/languages/zh-Hans.yml","hash":"1693a2027de3736a8e4b08109e664d64771410c3","modified":1458222108253},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1458222108254},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1458222108254},{"_id":"themes/next/layout/_layout.swig","hash":"bd7d977379b8efc5873f637f1c4d53879626f4d6","modified":1458222108255},{"_id":"themes/next/layout/about.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1458222108278},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1458222108278},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1458222108278},{"_id":"themes/next/layout/index.swig","hash":"f21ef57fdf27159139ac924ac521eed4f25c8342","modified":1458222108279},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1458222108279},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1458222108280},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1458222108281},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1458222108396},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1458222108396},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1458222108396},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458222108325},{"_id":"themes/next/layout/_macro/post.swig","hash":"a61cf39c2d79f790fbb4a8e07ac2bbb06b95390d","modified":1458222108256},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1458222108255},{"_id":"themes/next/layout/_macro/reward.swig","hash":"89f3d2e978d4062b470e774eda21c2ed3a086ab9","modified":1458222108257},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6de4ea6db39fe8e04b058bcefc5b23f954726e77","modified":1458222108257},{"_id":"themes/next/layout/_partials/comments.swig","hash":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1458222108258},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1458222108259},{"_id":"themes/next/layout/_partials/head.swig","hash":"9d6501b54b959d28a6e0b5fde87d25fc38b97660","modified":1458222108260},{"_id":"themes/next/layout/_partials/footer.swig","hash":"cba20577cea89196d714ddfe6b3ea00f7c906ba7","modified":1458222108260},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1458222108261},{"_id":"themes/next/layout/_partials/header.swig","hash":"b3f4f07f03bedd615039934b44d552b91e2a4a1d","modified":1458222108260},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1458222108261},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1458222108267},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1458222108267},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"1a51b8caa5130ff55948ae59dddb87ee0550c1e9","modified":1458222108277},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1458222108282},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1458222108283},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1458222108282},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1458222108325},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1458222108326},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1458222108326},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1458222108327},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1458222108327},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1458222108328},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1458222108329},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1458222108329},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1458222108329},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1458222108330},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1458222108330},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1458222108330},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1458222108330},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458222108268},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458222108268},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458222108312},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458222108313},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458222108312},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458222108323},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458222108324},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1458222108262},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1458222108262},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1458222108263},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1458222108263},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1458222108264},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1458222108264},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1458222108266},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1458222108269},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"6fa4daa91adee5800cbb0954e571b75e9796f99b","modified":1458222108268},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1458222108270},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1458222108273},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"aebc73513c9cbbbbda2935e2eb18e09bb1c24bf8","modified":1458222108275},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1458222108275},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"8eecd19c756df615afb3f5ec6a527cd7bd06d20c","modified":1458222108276},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1458222108276},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1458222108312},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"10ca6744a8594c1a085b50120f4ed0a1ef433f40","modified":1458222108313},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1458222108311},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1458222108323},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"9f87ded9cde425048e8ae063cbb481e78a0e469c","modified":1458222108323},{"_id":"themes/next/source/css/_variables/base.styl","hash":"f171c71d42f8798608235206dd41b37193faed88","modified":1458222108324},{"_id":"themes/next/source/css/_variables/default.styl","hash":"17779fa6fa3c9e1262ba100a86a8dec730c2f312","modified":1458222108324},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1458222108331},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1458222108332},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1458222108332},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1458222108332},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1458222108334},{"_id":"themes/next/source/js/src/utils.js","hash":"efcb2a7de9dc371d03a8598da2d71e2c53132d4c","modified":1458222108334},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1458222108343},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1458222108344},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1458222108344},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1458222108345},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1458222108361},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1458222108346},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1458222108347},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1458222108348},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1458222108348},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1458222108348},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1458222108386},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1458222108387},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1458222108387},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1458222108387},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1458222108388},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1458222108388},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1458222108390},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1458222108390},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1458222108394},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1458222108395},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1458222108395},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1458222108385},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1458222108271},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1458222108271},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1458222108272},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1458222108272},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1458222108272},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1458222108274},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"da8aa3beab56d8c306dd97cf41127a3859e2d00c","modified":1458222108274},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1458222108284},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1458222108285},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1458222108286},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1458222108287},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1458222108294},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1458222108302},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1458222108308},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1458222108309},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"05be2af57229c5125297c945d2e60ca97070bae1","modified":1458222108309},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1458222108310},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"d110befc142dbb881c4fdcb94df65ed2f603f1c1","modified":1458222108311},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1458222108310},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1458222108314},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1458222108314},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1458222108315},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1458222108316},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1458222108315},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1458222108316},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5187512cc4b2ce095230928c7046e0b26c3897bd","modified":1458222108316},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1458222108317},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1458222108317},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1458222108317},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1458222108318},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"f70fa81275eb4e0ea5e5a740b7a35539c6ffa9ba","modified":1458222108318},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"59c0f66602ebc1c05c16f117bc8710d9f3744538","modified":1458222108319},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1458222108319},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"96f95471da25d0e80c6b82f1e834b03c9aba58a9","modified":1458222108319},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1458222108321},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1458222108321},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"802e599b1ac749eac162dae396f66b0acaa5edcc","modified":1458222108322},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1458222108322},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8b37699252a24741716b40fb70972a77453cbfe1","modified":1458222108333},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458222108335},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458222108335},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458222108336},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458222108336},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458222108337},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458222108337},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1458222108341},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1458222108342},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1458222108342},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1458222108346},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1458222108346},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1458222108350},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1458222108350},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1458222108349},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1458222108361},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1458222108389},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1458222108390},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1458222108352},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1458222108353},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1458222108360},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1458222108393},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1458222108289},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1458222108288},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1458222108288},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1458222108289},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"f168f79ba8cc80c775907da4cc00d01771ac1e1e","modified":1458222108290},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1458222108291},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"12724e07713c9e8d577d921c131f04de7a5e65b1","modified":1458222108291},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"9f0606d4d94ffa6bd77f91628507bba19133cf36","modified":1458222108292},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"8539c1122966a6aea64267d48af05603caa5fa29","modified":1458222108292},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"6c34f2cf9ad9b9b787007cfca522deeb6b1ae3b7","modified":1458222108293},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1458222108294},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1458222108293},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"68ed6b0ad40745cb07ecd38f13960bb217aef848","modified":1458222108295},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1458222108295},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"5dba4ca272d7c767b57233cd99fba95dbf82153f","modified":1458222108296},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1458222108296},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"c9e3c5aca361ed9bbfa41a9755f3c516025da67e","modified":1458222108296},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1458222108297},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1458222108296},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"758d64ad65f718537ab5bfe5592a626abc40987e","modified":1458222108297},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1458222108298},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"0e91a5a80fb62ed38c97cb649b166f945c6ce5f1","modified":1458222108298},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1458222108298},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"70407054dbb5180c69e50ea2655d32835494394e","modified":1458222108298},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1458222108299},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1458222108300},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1458222108300},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"97832be1f30b631dbc2202524918b6eb55e74c4b","modified":1458222108301},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1458222108301},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1458222108297},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"546ad04994f74643334fd36cdb548c17f71b11be","modified":1458222108301},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"99c4b7d1459569cda394c733845d368008a180bf","modified":1458222108302},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1458222108303},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1458222108303},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1458222108305},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1458222108305},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1458222108306},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1458222108307},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1458222108307},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"0f368e6e95c0ba46580b491819e46ae31910c94b","modified":1458222108308},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1458222108304},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1458222108317},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458222108338},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1458222108339},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1458222108339},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1458222108340},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1458222108340},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1458222108341},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1458222108359},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1458222108357},{"_id":"public/atom.xml","hash":"468b9a0a0b7d39f59b53fdd3609ff76b40f061d0","modified":1458231802536},{"_id":"public/sitemap.xml","hash":"1c9a413d1497ff979b3d00bc6c630fa63b3024e9","modified":1458231802566},{"_id":"public/2015/11/09/node-07npm/index.html","hash":"fe9b747ae13804d2d79150cb9ca7d5b2a6f88d92","modified":1458231754091},{"_id":"public/2015/10/27/node-02process/index.html","hash":"f7707e6089e44c95562547419e99aaa7a769e731","modified":1458231754092},{"_id":"public/2015/10/27/zepto学习笔记/index.html","hash":"355657a19c41a005d6ebec3e50c31bf40bdef2cc","modified":1458231754092},{"_id":"public/categories/笔记/index.html","hash":"d6111a3988729f54b093e9b22323db901f913067","modified":1458231754092},{"_id":"public/categories/笔记/page/2/index.html","hash":"8300d694ee103f5c7bf6065543abed9dd2bedbed","modified":1458231754092},{"_id":"public/categories/笔记/page/3/index.html","hash":"979aa5aa8babb42063f70c4ba2071dbf64c67096","modified":1458231754092},{"_id":"public/archives/index.html","hash":"c5d0dfa65b01bca22fb23900c041e58ce1f15507","modified":1458231754092},{"_id":"public/archives/page/2/index.html","hash":"4694e9d165443abfe56c12d7a9f75e0b6051783d","modified":1458231754092},{"_id":"public/archives/page/3/index.html","hash":"5926d2336f78e2e0478a4601f27c5387a17870e8","modified":1458231754092},{"_id":"public/archives/page/4/index.html","hash":"43f79599a72d63fd5ee24367022ae513cf4fe660","modified":1458231754092},{"_id":"public/archives/2015/index.html","hash":"ef5c8fec547410fbe3ade262e392f5e9b38e8034","modified":1458231754092},{"_id":"public/archives/2015/page/2/index.html","hash":"d3f530a827eaebe51fd2444e980c4e06774d5beb","modified":1458231754092},{"_id":"public/archives/2015/page/3/index.html","hash":"201381b5ee0db569bfc331ebc16c436101279dc6","modified":1458231754093},{"_id":"public/archives/2015/page/4/index.html","hash":"e6b9bbd7f0e2c9b50635268cea80379ba266a24b","modified":1458231754093},{"_id":"public/archives/2015/10/index.html","hash":"13a702120ae525892f8b2fa1bfcfe9fa188b8806","modified":1458231754093},{"_id":"public/archives/2015/10/page/2/index.html","hash":"2798851a082781c9926913f9a3519b5997da93f7","modified":1458231754093},{"_id":"public/archives/2015/11/index.html","hash":"461d289af9e7f7b3e889bf6b53299c47fafb4e34","modified":1458231754093},{"_id":"public/archives/2015/11/page/2/index.html","hash":"16f906b263650aa1c59d321c746068c33827eeea","modified":1458231754093},{"_id":"public/archives/2015/12/index.html","hash":"ca6523d236a47ba6a7ad9cfde120eafa752a4eca","modified":1458231754093},{"_id":"public/tags/node/index.html","hash":"3f45750ebe61732313057a284a83022796c306f9","modified":1458231754093},{"_id":"public/tags/node/page/2/index.html","hash":"f9aec333bfa3a2eca800b81c9495d69e207dcf0e","modified":1458231754093},{"_id":"public/tags/node/page/3/index.html","hash":"10b163f9b01f82008c09f5c25c6ac90b96da323c","modified":1458231754093},{"_id":"public/tags/http/index.html","hash":"f66aae52cb7dec8303b127ed88dc7e5e5d2d79fa","modified":1458231754093},{"_id":"public/tags/学习笔记/index.html","hash":"fc83131b3561ff28f45994bb652d30e955b11a07","modified":1458231754093},{"_id":"public/tags/学习笔记/page/2/index.html","hash":"9f7ba11aa93a42b5630c1c4991b79450aca4f547","modified":1458231754093},{"_id":"public/tags/学习笔记/page/3/index.html","hash":"3511ebe6316a23599dc2fae16296265aef961bb0","modified":1458231754093},{"_id":"public/tags/process/index.html","hash":"c5045ec6f5e15ee278a5980a5dab900cd39990a0","modified":1458231754093},{"_id":"public/tags/module/index.html","hash":"c3e29ff59d713b549018017404da039f0b334858","modified":1458231754093},{"_id":"public/tags/buffer/index.html","hash":"f307464f965c88d68f3435060b63f28a637b30fd","modified":1458231754094},{"_id":"public/tags/stream/index.html","hash":"60a65c32592774c157a4a0a30bf7715c64ece3d2","modified":1458231754094},{"_id":"public/tags/npm/index.html","hash":"ed1591932e9210f87f980f823e407fbfbdbd6f86","modified":1458231754094},{"_id":"public/tags/path/index.html","hash":"bc397f7c1620ee84ff6857a5741ebd6ae0d07c68","modified":1458231754094},{"_id":"public/tags/cookie/index.html","hash":"61f77ba54dd3cc95eaeff0125477962d1b0773bf","modified":1458231754094},{"_id":"public/tags/session/index.html","hash":"499ece933995b072d5de9ea10620af64673cd7f1","modified":1458231754094},{"_id":"public/tags/express/index.html","hash":"3faefb515140bc98c358be842270707107b0ab2f","modified":1458231754094},{"_id":"public/tags/mongoose/index.html","hash":"9cd33efe8d25d76c8d1755b601a5117d11fb858f","modified":1458231754094},{"_id":"public/tags/request/index.html","hash":"b99307fb63b5665952be5352168ab7c1395fd17e","modified":1458231754094},{"_id":"public/tags/cheerio/index.html","hash":"52a6ac880e1236ebb8376bb4da47c9bbe8ec99a8","modified":1458231754094},{"_id":"public/tags/爬虫/index.html","hash":"7bee4a15f230d07658a98ff549728ae3253a3cda","modified":1458231754094},{"_id":"public/tags/event/index.html","hash":"d5bfe9056f7b1161cd6cc380ccad4385cdc2b258","modified":1458231754094},{"_id":"public/tags/zepto/index.html","hash":"a2b180412f13367386197d765bee1316752376a6","modified":1458231754094},{"_id":"public/2015/11/16/node-14async/index.html","hash":"50a9f3d1f6b0619918a30893215f92afd4136f99","modified":1458231802586},{"_id":"public/2015/12/01/node-crawl/index.html","hash":"eb27a21215b68d5965e452c3ae51b5603488616b","modified":1458231754094},{"_id":"public/2015/11/12/node-13mongoose/index.html","hash":"e38c2ddc958b64de225856bbbc6937b2c2775ad1","modified":1458231754094},{"_id":"public/2015/11/11/node-12express/index.html","hash":"e8adea3f10be61896dfb996c8b551eebad8b88ef","modified":1458231754094},{"_id":"public/2015/11/10/node-11cookie/index.html","hash":"b2593ba6384cf7d735fb140f8358306580a60129","modified":1458231754094},{"_id":"public/2015/11/10/node-10http/index.html","hash":"db46c95d70c91cee7447a8ed39fdd627e8b4a9a1","modified":1458231754094},{"_id":"public/2015/11/09/node-09stream/index.html","hash":"79cd464ca272d72d46a08bea614e527182c7b901","modified":1458231754094},{"_id":"public/2015/11/09/node-08path/index.html","hash":"41b65b2821e9ec66c917d51b78991d399e872d3f","modified":1458231754095},{"_id":"public/2015/10/30/node-06file/index.html","hash":"1edd398f274ca94cf680cbeee4824956bb87b232","modified":1458231754095},{"_id":"public/2015/10/30/node-05buffer/index.html","hash":"77a4e40931aa3634f4a64b2d2a5ce03f76e9f317","modified":1458231754095},{"_id":"public/2015/10/29/node-04module/index.html","hash":"a594a3c6b000576e14dd576b8a00258870ca6798","modified":1458231754095},{"_id":"public/2015/10/28/node-03event/index.html","hash":"ed08795df4129cd49c13921fc8ab4b6042313951","modified":1458231754095},{"_id":"public/2015/10/24/node-01http/index.html","hash":"423a7ac02da78a7f9bee45b81c6bf49ad9e06103","modified":1458231754095},{"_id":"public/index.html","hash":"f29e1e7a5e2af07e235aa7da782ad26cff30887a","modified":1458231802586},{"_id":"public/page/2/index.html","hash":"4dbbca4f550315986d62f3beb20b815b834fba69","modified":1458231754095},{"_id":"public/page/3/index.html","hash":"78859f1ccece140eda7a8f04f27a3d64d6979d53","modified":1458231754095},{"_id":"public/page/4/index.html","hash":"807a696e3611103829a862d335a8378161526415","modified":1458231754095},{"_id":"public/2016/03/18/Flexbox-Layout/index.html","hash":"fd6800e977ae496345b36866a4527e35b994afe8","modified":1458231802585},{"_id":"public/categories/笔记/page/4/index.html","hash":"410f683b3d72ddefc6d398a359cd145504a5c9e6","modified":1458231754112},{"_id":"public/categories/教程/index.html","hash":"0f217b1a3a8a2988c85c7cd1b212972347454615","modified":1458231754112},{"_id":"public/archives/2016/index.html","hash":"857ea110e6a14833ebc87fe3957324475b709cc7","modified":1458231754112},{"_id":"public/archives/2016/03/index.html","hash":"2c9069bdf82df4c7f684ddfdd36845b38273e95e","modified":1458231754112},{"_id":"public/tags/css3/index.html","hash":"cc188f83a7240241c7be0601da268f1930f47ea8","modified":1458231754112},{"_id":"public/tags/flexbox/index.html","hash":"6d87611332af27561d3a0e83fa0669c5a69825fc","modified":1458231754112},{"_id":"public/CNAME","hash":"2fee1653bd2540632d79b43158dc970577d7fdda","modified":1458231754117},{"_id":"public/favicon.ico","hash":"421c09dd34bd64ec866f4d34b808c887b23b1afe","modified":1458231754118},{"_id":"public/images/avatar.jpg","hash":"cec12ec035c5a08107cf379ea621d240b71377a0","modified":1458231754118},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1458231754118},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1458231754118},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1458231754118},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1458231754118},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1458231754118},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1458231754118},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1458231754118},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1458231754118},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1458231754118},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1458231754118},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1458231754118},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1458231754118},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1458231754118},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1458231754118},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458231754118},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458231754118},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458231754118},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458231754118},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458231754118},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458231754118},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1458231754118},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1458231754119},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458231754119},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1458231754878},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1458231754887},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1458231754888},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1458231754917},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1458231754917},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1458231754917},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1458231754917},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1458231754917},{"_id":"public/js/src/utils.js","hash":"cf24307d8aeb18e9bad093647c7fb50dc3d9fbe8","modified":1458231754918},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1458231754918},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1458231754918},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1458231754918},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1458231754918},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1458231754918},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1458231754918},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1458231754918},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1458231754918},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1458231754918},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1458231754918},{"_id":"public/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1458231754918},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1458231754918},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1458231754918},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1458231754918},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1458231754918},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1458231754918},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1458231754918},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1458231754919},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1458231754919},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1458231754919},{"_id":"public/css/main.css","hash":"4cc37bcb5ace79ad9361fbe29745b0b3c3a65a57","modified":1458231754919},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1458231754919},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1458231754919},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1458231754919},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1458231754919},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1458231754919},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1458231754919},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1458231754919},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1458231754919},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1458231754919},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1458231754920},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1458231755045}],"Category":[{"name":"笔记","_id":"cilwhj86h0003e4gj60wzwauk"},{"name":"教程","_id":"cilwhj86j0005e4gjcbkv2c0b"}],"Data":[],"Page":[],"Post":[{"title":"node_01http","date":"2015-10-24T12:53:18.000Z","_content":"\n这是**node第一天笔记**，关于客户端和服务器通信也就是http协议。\n\n\n## 开门见山，先看如何实现node的请求\n```\nvar http = require('http');\nhttp.createServer(function(req,res){//req->请求 res->响应\n    req.end('hello world');//向向应里写内容用end或是write方法\n}).listen(8080);//监听8080端口\n```\n\n## 再看一个node如何获取页面里面的内容\n### /index.html页面\n```\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n  <meta charset=\"UTF-8\">\n  <title></title>\n</head>\n<body>\n<%=type%>\n</body>\n</html>\n```\n### /server.js\n```\nvar http = require('http');\nvar fs = require('fs');\nhttp.createServer(function(req,res){\n    var url = req.url;\n    var urls = url.split('?');\n    var pathname = urls[0];\n    var query = urls[1];\n    if(pathname == '/index.html'){\n        var content = fs.readFileSync('/index.html');\n        res.end(content);    \n    }else{\n        res.end('404');\n    }\n}).listen(8080);\n```\n\n## 当index.html页面中多了css文件和img文件，看node如何渲染\n### /index.html\n```\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n  <meta charset=\"UTF-8\">\n  <title></title>\n  <link rel=\"stylesheet\" href=\"style.css\"/>\n</head>\n<body>\n<%=type%>\n<img src=\"cy.png\" alt=\"\"/>\n</body>\n</html>\n```\n### /server.js\n```\nvar http = require('http');\nvar fs = require('fs');\nhttp.createServer(function(req,res){\n    var url = req.url;\n    var urls = url.split('?');\n    var pathname = urls[0];\n    var query = urls[1];\n    if(pathname == '/index.html'){\n        var content = fs.readFileSync('./index.html');\n        res.end(content.toString().replace(\"<%=type%>\",query.split(\"=\")[1]));\n    }else if(pathname == '/style.css'){\n        res.setHeader('Content-Type','text/css');\n        var content = fs.readFileSync('./style.css');\n        res.end(content);\n    }else if(pathname == '/cy.png'){\n        res.setHeader('Content-Type','image/png');\n        var content = fs.readFileSync('./cy.png');\n        res.end(content);\n    }else{\n        res.end('404');\n    }\n}).listen(8080);\n```\n### 简化后的/server-update.js\n```\nvar http = require('http');\nvar fs = require('fs');\nvar mime = require('mime');\nhttp.createServer(function(req,res){\n    var url = req.url;\n    var urls = url.split('?');\n    var pathname = urls[0];\n    var query = urls[1];\n    var flag = fs.existsSync('.'+pathname);\n    if(flag){\n        var content = fs.readFileSync('.'+pathname);\n        res.setHeader('Content-Type',mime.lookup(pathname));\n        res.end(content);\n    }else{\n        res.end('404');\n    }\n}).listen(8080);\n```\n\n## end\n","source":"_posts/node-01http.md","raw":"title: node_01http\ndate: 2015-10-24 20:53:18\ntags:\n- node\n- http\n- 学习笔记\ncategories: 笔记\n---\n\n这是**node第一天笔记**，关于客户端和服务器通信也就是http协议。\n\n\n## 开门见山，先看如何实现node的请求\n```\nvar http = require('http');\nhttp.createServer(function(req,res){//req->请求 res->响应\n    req.end('hello world');//向向应里写内容用end或是write方法\n}).listen(8080);//监听8080端口\n```\n\n## 再看一个node如何获取页面里面的内容\n### /index.html页面\n```\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n  <meta charset=\"UTF-8\">\n  <title></title>\n</head>\n<body>\n<%=type%>\n</body>\n</html>\n```\n### /server.js\n```\nvar http = require('http');\nvar fs = require('fs');\nhttp.createServer(function(req,res){\n    var url = req.url;\n    var urls = url.split('?');\n    var pathname = urls[0];\n    var query = urls[1];\n    if(pathname == '/index.html'){\n        var content = fs.readFileSync('/index.html');\n        res.end(content);    \n    }else{\n        res.end('404');\n    }\n}).listen(8080);\n```\n\n## 当index.html页面中多了css文件和img文件，看node如何渲染\n### /index.html\n```\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n  <meta charset=\"UTF-8\">\n  <title></title>\n  <link rel=\"stylesheet\" href=\"style.css\"/>\n</head>\n<body>\n<%=type%>\n<img src=\"cy.png\" alt=\"\"/>\n</body>\n</html>\n```\n### /server.js\n```\nvar http = require('http');\nvar fs = require('fs');\nhttp.createServer(function(req,res){\n    var url = req.url;\n    var urls = url.split('?');\n    var pathname = urls[0];\n    var query = urls[1];\n    if(pathname == '/index.html'){\n        var content = fs.readFileSync('./index.html');\n        res.end(content.toString().replace(\"<%=type%>\",query.split(\"=\")[1]));\n    }else if(pathname == '/style.css'){\n        res.setHeader('Content-Type','text/css');\n        var content = fs.readFileSync('./style.css');\n        res.end(content);\n    }else if(pathname == '/cy.png'){\n        res.setHeader('Content-Type','image/png');\n        var content = fs.readFileSync('./cy.png');\n        res.end(content);\n    }else{\n        res.end('404');\n    }\n}).listen(8080);\n```\n### 简化后的/server-update.js\n```\nvar http = require('http');\nvar fs = require('fs');\nvar mime = require('mime');\nhttp.createServer(function(req,res){\n    var url = req.url;\n    var urls = url.split('?');\n    var pathname = urls[0];\n    var query = urls[1];\n    var flag = fs.existsSync('.'+pathname);\n    if(flag){\n        var content = fs.readFileSync('.'+pathname);\n        res.setHeader('Content-Type',mime.lookup(pathname));\n        res.end(content);\n    }else{\n        res.end('404');\n    }\n}).listen(8080);\n```\n\n## end\n","slug":"node-01http","published":1,"updated":"2015-10-24T14:52:49.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8640000e4gjh4618866","content":"<p>这是<strong>node第一天笔记</strong>，关于客户端和服务器通信也就是http协议。</p>\n<h2 id=\"开门见山，先看如何实现node的请求\"><a href=\"#开门见山，先看如何实现node的请求\" class=\"headerlink\" title=\"开门见山，先看如何实现node的请求\"></a>开门见山，先看如何实现node的请求</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">http.createServer(function(req,res)&#123;//req-&gt;请求 res-&gt;响应</span><br><span class=\"line\">    req.end(&apos;hello world&apos;);//向向应里写内容用end或是write方法</span><br><span class=\"line\">&#125;).listen(8080);//监听8080端口</span><br></pre></td></tr></table></figure>\n<h2 id=\"再看一个node如何获取页面里面的内容\"><a href=\"#再看一个node如何获取页面里面的内容\" class=\"headerlink\" title=\"再看一个node如何获取页面里面的内容\"></a>再看一个node如何获取页面里面的内容</h2><h3 id=\"index-html页面\"><a href=\"#index-html页面\" class=\"headerlink\" title=\"/index.html页面\"></a>/index.html页面</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%=type%&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"server-js\"><a href=\"#server-js\" class=\"headerlink\" title=\"/server.js\"></a>/server.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    var url = req.url;</span><br><span class=\"line\">    var urls = url.split(&apos;?&apos;);</span><br><span class=\"line\">    var pathname = urls[0];</span><br><span class=\"line\">    var query = urls[1];</span><br><span class=\"line\">    if(pathname == &apos;/index.html&apos;)&#123;</span><br><span class=\"line\">        var content = fs.readFileSync(&apos;/index.html&apos;);</span><br><span class=\"line\">        res.end(content);    </span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        res.end(&apos;404&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"当index-html页面中多了css文件和img文件，看node如何渲染\"><a href=\"#当index-html页面中多了css文件和img文件，看node如何渲染\" class=\"headerlink\" title=\"当index.html页面中多了css文件和img文件，看node如何渲染\"></a>当index.html页面中多了css文件和img文件，看node如何渲染</h2><h3 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"/index.html\"></a>/index.html</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;/&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%=type%&gt;</span><br><span class=\"line\">&lt;img src=&quot;cy.png&quot; alt=&quot;&quot;/&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"server-js-1\"><a href=\"#server-js-1\" class=\"headerlink\" title=\"/server.js\"></a>/server.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    var url = req.url;</span><br><span class=\"line\">    var urls = url.split(&apos;?&apos;);</span><br><span class=\"line\">    var pathname = urls[0];</span><br><span class=\"line\">    var query = urls[1];</span><br><span class=\"line\">    if(pathname == &apos;/index.html&apos;)&#123;</span><br><span class=\"line\">        var content = fs.readFileSync(&apos;./index.html&apos;);</span><br><span class=\"line\">        res.end(content.toString().replace(&quot;&lt;%=type%&gt;&quot;,query.split(&quot;=&quot;)[1]));</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/style.css&apos;)&#123;</span><br><span class=\"line\">        res.setHeader(&apos;Content-Type&apos;,&apos;text/css&apos;);</span><br><span class=\"line\">        var content = fs.readFileSync(&apos;./style.css&apos;);</span><br><span class=\"line\">        res.end(content);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/cy.png&apos;)&#123;</span><br><span class=\"line\">        res.setHeader(&apos;Content-Type&apos;,&apos;image/png&apos;);</span><br><span class=\"line\">        var content = fs.readFileSync(&apos;./cy.png&apos;);</span><br><span class=\"line\">        res.end(content);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        res.end(&apos;404&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>\n<h3 id=\"简化后的-server-update-js\"><a href=\"#简化后的-server-update-js\" class=\"headerlink\" title=\"简化后的/server-update.js\"></a>简化后的/server-update.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var mime = require(&apos;mime&apos;);</span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    var url = req.url;</span><br><span class=\"line\">    var urls = url.split(&apos;?&apos;);</span><br><span class=\"line\">    var pathname = urls[0];</span><br><span class=\"line\">    var query = urls[1];</span><br><span class=\"line\">    var flag = fs.existsSync(&apos;.&apos;+pathname);</span><br><span class=\"line\">    if(flag)&#123;</span><br><span class=\"line\">        var content = fs.readFileSync(&apos;.&apos;+pathname);</span><br><span class=\"line\">        res.setHeader(&apos;Content-Type&apos;,mime.lookup(pathname));</span><br><span class=\"line\">        res.end(content);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        res.end(&apos;404&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h2>","excerpt":"","more":"<p>这是<strong>node第一天笔记</strong>，关于客户端和服务器通信也就是http协议。</p>\n<h2 id=\"开门见山，先看如何实现node的请求\"><a href=\"#开门见山，先看如何实现node的请求\" class=\"headerlink\" title=\"开门见山，先看如何实现node的请求\"></a>开门见山，先看如何实现node的请求</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">http.createServer(function(req,res)&#123;//req-&gt;请求 res-&gt;响应</span><br><span class=\"line\">    req.end(&apos;hello world&apos;);//向向应里写内容用end或是write方法</span><br><span class=\"line\">&#125;).listen(8080);//监听8080端口</span><br></pre></td></tr></table></figure>\n<h2 id=\"再看一个node如何获取页面里面的内容\"><a href=\"#再看一个node如何获取页面里面的内容\" class=\"headerlink\" title=\"再看一个node如何获取页面里面的内容\"></a>再看一个node如何获取页面里面的内容</h2><h3 id=\"index-html页面\"><a href=\"#index-html页面\" class=\"headerlink\" title=\"/index.html页面\"></a>/index.html页面</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%=type%&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"server-js\"><a href=\"#server-js\" class=\"headerlink\" title=\"/server.js\"></a>/server.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    var url = req.url;</span><br><span class=\"line\">    var urls = url.split(&apos;?&apos;);</span><br><span class=\"line\">    var pathname = urls[0];</span><br><span class=\"line\">    var query = urls[1];</span><br><span class=\"line\">    if(pathname == &apos;/index.html&apos;)&#123;</span><br><span class=\"line\">        var content = fs.readFileSync(&apos;/index.html&apos;);</span><br><span class=\"line\">        res.end(content);    </span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        res.end(&apos;404&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"当index-html页面中多了css文件和img文件，看node如何渲染\"><a href=\"#当index-html页面中多了css文件和img文件，看node如何渲染\" class=\"headerlink\" title=\"当index.html页面中多了css文件和img文件，看node如何渲染\"></a>当index.html页面中多了css文件和img文件，看node如何渲染</h2><h3 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"/index.html\"></a>/index.html</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;/&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%=type%&gt;</span><br><span class=\"line\">&lt;img src=&quot;cy.png&quot; alt=&quot;&quot;/&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"server-js-1\"><a href=\"#server-js-1\" class=\"headerlink\" title=\"/server.js\"></a>/server.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    var url = req.url;</span><br><span class=\"line\">    var urls = url.split(&apos;?&apos;);</span><br><span class=\"line\">    var pathname = urls[0];</span><br><span class=\"line\">    var query = urls[1];</span><br><span class=\"line\">    if(pathname == &apos;/index.html&apos;)&#123;</span><br><span class=\"line\">        var content = fs.readFileSync(&apos;./index.html&apos;);</span><br><span class=\"line\">        res.end(content.toString().replace(&quot;&lt;%=type%&gt;&quot;,query.split(&quot;=&quot;)[1]));</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/style.css&apos;)&#123;</span><br><span class=\"line\">        res.setHeader(&apos;Content-Type&apos;,&apos;text/css&apos;);</span><br><span class=\"line\">        var content = fs.readFileSync(&apos;./style.css&apos;);</span><br><span class=\"line\">        res.end(content);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/cy.png&apos;)&#123;</span><br><span class=\"line\">        res.setHeader(&apos;Content-Type&apos;,&apos;image/png&apos;);</span><br><span class=\"line\">        var content = fs.readFileSync(&apos;./cy.png&apos;);</span><br><span class=\"line\">        res.end(content);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        res.end(&apos;404&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>\n<h3 id=\"简化后的-server-update-js\"><a href=\"#简化后的-server-update-js\" class=\"headerlink\" title=\"简化后的/server-update.js\"></a>简化后的/server-update.js</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var mime = require(&apos;mime&apos;);</span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    var url = req.url;</span><br><span class=\"line\">    var urls = url.split(&apos;?&apos;);</span><br><span class=\"line\">    var pathname = urls[0];</span><br><span class=\"line\">    var query = urls[1];</span><br><span class=\"line\">    var flag = fs.existsSync(&apos;.&apos;+pathname);</span><br><span class=\"line\">    if(flag)&#123;</span><br><span class=\"line\">        var content = fs.readFileSync(&apos;.&apos;+pathname);</span><br><span class=\"line\">        res.setHeader(&apos;Content-Type&apos;,mime.lookup(pathname));</span><br><span class=\"line\">        res.end(content);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        res.end(&apos;404&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h2>"},{"title":"Flexbox-Layout","date":"2016-03-17T16:17:04.000Z","_content":"\n### 是什么(what)？\n\n### 为什么(why)？\n\n### 怎么用(how)？","source":"_posts/Flexbox-Layout.md","raw":"---\ntitle: Flexbox-Layout\ndate: 2016-03-18 00:17:04\ntags:\n- css3\n- flexbox\ncategories: 教程\n---\n\n### 是什么(what)？\n\n### 为什么(why)？\n\n### 怎么用(how)？","slug":"Flexbox-Layout","published":1,"updated":"2016-03-17T16:23:07.867Z","_id":"cilwhj86a0001e4gj9mpve986","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"是什么-what-？\"><a href=\"#是什么-what-？\" class=\"headerlink\" title=\"是什么(what)？\"></a>是什么(what)？</h3><h3 id=\"为什么-why-？\"><a href=\"#为什么-why-？\" class=\"headerlink\" title=\"为什么(why)？\"></a>为什么(why)？</h3><h3 id=\"怎么用-how-？\"><a href=\"#怎么用-how-？\" class=\"headerlink\" title=\"怎么用(how)？\"></a>怎么用(how)？</h3>","excerpt":"","more":"<h3 id=\"是什么-what-？\"><a href=\"#是什么-what-？\" class=\"headerlink\" title=\"是什么(what)？\"></a>是什么(what)？</h3><h3 id=\"为什么-why-？\"><a href=\"#为什么-why-？\" class=\"headerlink\" title=\"为什么(why)？\"></a>为什么(why)？</h3><h3 id=\"怎么用-how-？\"><a href=\"#怎么用-how-？\" class=\"headerlink\" title=\"怎么用(how)？\"></a>怎么用(how)？</h3>"},{"title":"node-02process","date":"2015-10-27T14:42:54.000Z","_content":"\n```\nconsole.log('hello')==>process.stdout.write('hello')\n\n//当控制台接收到回调函数之后会调用回调函数进行处理\nprocess.stdin.on('data',function(data){\n    process.stdout.write(data);\n})\n\n```\n\n```\nprocess.argv.forEach(function(item){\n    console.log(item);\n})\n\n//当程序退出的时候进行清理工作\nprocess.on('exit',function(){\n    console.log('clear');\n})\n\n//未捕获到的异常\nprocess.on('uncaughtExpection',function(err){\n    console.log(err);\n})\n\n//内存的使用量\nconsole.log(process.memoryUsage());\n\n//查看工作目录\nconsole.log(process.cwd());\n\n//下一个事件环的时候执行,异步执行,优先级最高\nprocess.nextTick(...);\n\n```","source":"_posts/node-02process.md","raw":"title: node-02process\ndate: 2015-10-27 22:42:54\ntags:\n- node\n- process\n- 学习笔记\ncategories: 笔记\n---\n\n```\nconsole.log('hello')==>process.stdout.write('hello')\n\n//当控制台接收到回调函数之后会调用回调函数进行处理\nprocess.stdin.on('data',function(data){\n    process.stdout.write(data);\n})\n\n```\n\n```\nprocess.argv.forEach(function(item){\n    console.log(item);\n})\n\n//当程序退出的时候进行清理工作\nprocess.on('exit',function(){\n    console.log('clear');\n})\n\n//未捕获到的异常\nprocess.on('uncaughtExpection',function(err){\n    console.log(err);\n})\n\n//内存的使用量\nconsole.log(process.memoryUsage());\n\n//查看工作目录\nconsole.log(process.cwd());\n\n//下一个事件环的时候执行,异步执行,优先级最高\nprocess.nextTick(...);\n\n```","slug":"node-02process","published":1,"updated":"2015-10-27T15:35:20.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8c7000ge4gjzo2n0376","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;hello&apos;)==&gt;process.stdout.write(&apos;hello&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">//当控制台接收到回调函数之后会调用回调函数进行处理</span><br><span class=\"line\">process.stdin.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">    process.stdout.write(data);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.argv.forEach(function(item)&#123;</span><br><span class=\"line\">    console.log(item);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//当程序退出的时候进行清理工作</span><br><span class=\"line\">process.on(&apos;exit&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;clear&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//未捕获到的异常</span><br><span class=\"line\">process.on(&apos;uncaughtExpection&apos;,function(err)&#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//内存的使用量</span><br><span class=\"line\">console.log(process.memoryUsage());</span><br><span class=\"line\"></span><br><span class=\"line\">//查看工作目录</span><br><span class=\"line\">console.log(process.cwd());</span><br><span class=\"line\"></span><br><span class=\"line\">//下一个事件环的时候执行,异步执行,优先级最高</span><br><span class=\"line\">process.nextTick(...);</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;hello&apos;)==&gt;process.stdout.write(&apos;hello&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">//当控制台接收到回调函数之后会调用回调函数进行处理</span><br><span class=\"line\">process.stdin.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">    process.stdout.write(data);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.argv.forEach(function(item)&#123;</span><br><span class=\"line\">    console.log(item);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//当程序退出的时候进行清理工作</span><br><span class=\"line\">process.on(&apos;exit&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;clear&apos;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//未捕获到的异常</span><br><span class=\"line\">process.on(&apos;uncaughtExpection&apos;,function(err)&#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//内存的使用量</span><br><span class=\"line\">console.log(process.memoryUsage());</span><br><span class=\"line\"></span><br><span class=\"line\">//查看工作目录</span><br><span class=\"line\">console.log(process.cwd());</span><br><span class=\"line\"></span><br><span class=\"line\">//下一个事件环的时候执行,异步执行,优先级最高</span><br><span class=\"line\">process.nextTick(...);</span><br></pre></td></tr></table></figure>"},{"title":"node-04module","date":"2015-10-29T13:46:13.000Z","_content":"\n# 模块\n## JS不足\n- js没有模块系统，不支持封闭的作用域和依赖管理\n- 没有标准库，没有文件系统和IO流API\n- 也没有包管理系统\n## commonjs规范\n### 优点\n封装功能，封闭作用域，可解决依赖问题\n工作效率更高，重构方便\n## commonjs in node\n在node.js里，模块划分所有的功能，每个JS都是一个模块\n实现require方法\nnpm 实现了模块的自动加载和安装依赖\n## 定义模块\n```\n(function(exports,require,module,__filename,__dirname){\n    ...\n    exports = module.exports;\n    return module.exports;\n})\n```\n\n## 模块的加载策略\n### 分类\n- 原生模块 http path fs util events 编译成二进制，加载速度最快\n- 文件模块 在硬盘的某个位置 非常慢\n\n## 如何查找文件模块\n### 文件模块分类\n- js 脚本文件 需要先读入内存再运行\n- json 文件 fs 读入内存 转化为JSON对象\n- node 二进制文件 可以直接使用\n### 查找的过程\n- 如果参数是相对路径的话如何查找\n- 如果不是路径\n### 从全局路径进行加载\nNODE_PATH 用;分隔的路径串\n$HOME/.node_modules\n\n```\nconsole.log(module);\n/**\n* id ID\n* exports 导出对象\n* parent 它依赖的模块\n* filename 模块的文件名\n* loaded 是否加载成功\n* children 被哪些模块所依赖\n* path \n* cache 缓存\n```\n\n# 路径\n\n```\nvar path = require('path');\nvar fs = require('fs');\n/**\n * normalize 将非标准化的路径转化成标准化的路径\n * 1.解析. 和 ..\n * 2.多个斜杠会转成一个斜杠\n * 3.window下的斜杠会转成正斜杠\n * 4.如果以斜杠结尾会保留\n */\n```\n\n```\nconsole.log(path.join(__dirname,'a','b'));\n\n/**\n * resolve\n * 以应用程序为根目录，做为起点，根据参数解析出一个绝对路径\n * 1.以应用程序为根起点\n * 2. ..\n * 3.普通字符串代表子目录\n * 4. /代表绝对路径根目录\n */\nconsole.log(path.resolve());//空代表当前的目录路径\n \n/**\n * relative\n * 可以获取两个路径之间的相对关系\n * \n */\nconsole.log(path.relative(__dirname,'../a'));\n\n//返回指定路径的所在目录\nconsole.log(path.dirname(__dirname));\n\n//basename 获取路径中的文件名\nconsole.log(path.basename(__filename));\n```","source":"_posts/node-04module.md","raw":"title: node-04module\ndate: 2015-10-29 21:46:13\ntags:\n- node\n- module\n- 学习笔记\ncategories: 笔记\n---\n\n# 模块\n## JS不足\n- js没有模块系统，不支持封闭的作用域和依赖管理\n- 没有标准库，没有文件系统和IO流API\n- 也没有包管理系统\n## commonjs规范\n### 优点\n封装功能，封闭作用域，可解决依赖问题\n工作效率更高，重构方便\n## commonjs in node\n在node.js里，模块划分所有的功能，每个JS都是一个模块\n实现require方法\nnpm 实现了模块的自动加载和安装依赖\n## 定义模块\n```\n(function(exports,require,module,__filename,__dirname){\n    ...\n    exports = module.exports;\n    return module.exports;\n})\n```\n\n## 模块的加载策略\n### 分类\n- 原生模块 http path fs util events 编译成二进制，加载速度最快\n- 文件模块 在硬盘的某个位置 非常慢\n\n## 如何查找文件模块\n### 文件模块分类\n- js 脚本文件 需要先读入内存再运行\n- json 文件 fs 读入内存 转化为JSON对象\n- node 二进制文件 可以直接使用\n### 查找的过程\n- 如果参数是相对路径的话如何查找\n- 如果不是路径\n### 从全局路径进行加载\nNODE_PATH 用;分隔的路径串\n$HOME/.node_modules\n\n```\nconsole.log(module);\n/**\n* id ID\n* exports 导出对象\n* parent 它依赖的模块\n* filename 模块的文件名\n* loaded 是否加载成功\n* children 被哪些模块所依赖\n* path \n* cache 缓存\n```\n\n# 路径\n\n```\nvar path = require('path');\nvar fs = require('fs');\n/**\n * normalize 将非标准化的路径转化成标准化的路径\n * 1.解析. 和 ..\n * 2.多个斜杠会转成一个斜杠\n * 3.window下的斜杠会转成正斜杠\n * 4.如果以斜杠结尾会保留\n */\n```\n\n```\nconsole.log(path.join(__dirname,'a','b'));\n\n/**\n * resolve\n * 以应用程序为根目录，做为起点，根据参数解析出一个绝对路径\n * 1.以应用程序为根起点\n * 2. ..\n * 3.普通字符串代表子目录\n * 4. /代表绝对路径根目录\n */\nconsole.log(path.resolve());//空代表当前的目录路径\n \n/**\n * relative\n * 可以获取两个路径之间的相对关系\n * \n */\nconsole.log(path.relative(__dirname,'../a'));\n\n//返回指定路径的所在目录\nconsole.log(path.dirname(__dirname));\n\n//basename 获取路径中的文件名\nconsole.log(path.basename(__filename));\n```","slug":"node-04module","published":1,"updated":"2015-10-29T16:40:45.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8c9000he4gjkdv5jy93","content":"<h1 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h1><h2 id=\"JS不足\"><a href=\"#JS不足\" class=\"headerlink\" title=\"JS不足\"></a>JS不足</h2><ul>\n<li>js没有模块系统，不支持封闭的作用域和依赖管理</li>\n<li>没有标准库，没有文件系统和IO流API</li>\n<li>也没有包管理系统<h2 id=\"commonjs规范\"><a href=\"#commonjs规范\" class=\"headerlink\" title=\"commonjs规范\"></a>commonjs规范</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3>封装功能，封闭作用域，可解决依赖问题<br>工作效率更高，重构方便<h2 id=\"commonjs-in-node\"><a href=\"#commonjs-in-node\" class=\"headerlink\" title=\"commonjs in node\"></a>commonjs in node</h2>在node.js里，模块划分所有的功能，每个JS都是一个模块<br>实现require方法<br>npm 实现了模块的自动加载和安装依赖<h2 id=\"定义模块\"><a href=\"#定义模块\" class=\"headerlink\" title=\"定义模块\"></a>定义模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(exports,require,module,__filename,__dirname)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    exports = module.exports;</span><br><span class=\"line\">    return module.exports;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"模块的加载策略\"><a href=\"#模块的加载策略\" class=\"headerlink\" title=\"模块的加载策略\"></a>模块的加载策略</h2><h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>原生模块 http path fs util events 编译成二进制，加载速度最快</li>\n<li>文件模块 在硬盘的某个位置 非常慢</li>\n</ul>\n<h2 id=\"如何查找文件模块\"><a href=\"#如何查找文件模块\" class=\"headerlink\" title=\"如何查找文件模块\"></a>如何查找文件模块</h2><h3 id=\"文件模块分类\"><a href=\"#文件模块分类\" class=\"headerlink\" title=\"文件模块分类\"></a>文件模块分类</h3><ul>\n<li>js 脚本文件 需要先读入内存再运行</li>\n<li>json 文件 fs 读入内存 转化为JSON对象</li>\n<li>node 二进制文件 可以直接使用<h3 id=\"查找的过程\"><a href=\"#查找的过程\" class=\"headerlink\" title=\"查找的过程\"></a>查找的过程</h3></li>\n<li>如果参数是相对路径的话如何查找</li>\n<li>如果不是路径<h3 id=\"从全局路径进行加载\"><a href=\"#从全局路径进行加载\" class=\"headerlink\" title=\"从全局路径进行加载\"></a>从全局路径进行加载</h3>NODE_PATH 用;分隔的路径串<br>$HOME/.node_modules</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(module);</span><br><span class=\"line\">/**</span><br><span class=\"line\">* id ID</span><br><span class=\"line\">* exports 导出对象</span><br><span class=\"line\">* parent 它依赖的模块</span><br><span class=\"line\">* filename 模块的文件名</span><br><span class=\"line\">* loaded 是否加载成功</span><br><span class=\"line\">* children 被哪些模块所依赖</span><br><span class=\"line\">* path </span><br><span class=\"line\">* cache 缓存</span><br></pre></td></tr></table></figure>\n<h1 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * normalize 将非标准化的路径转化成标准化的路径</span><br><span class=\"line\"> * 1.解析. 和 ..</span><br><span class=\"line\"> * 2.多个斜杠会转成一个斜杠</span><br><span class=\"line\"> * 3.window下的斜杠会转成正斜杠</span><br><span class=\"line\"> * 4.如果以斜杠结尾会保留</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(path.join(__dirname,&apos;a&apos;,&apos;b&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * resolve</span><br><span class=\"line\"> * 以应用程序为根目录，做为起点，根据参数解析出一个绝对路径</span><br><span class=\"line\"> * 1.以应用程序为根起点</span><br><span class=\"line\"> * 2. ..</span><br><span class=\"line\"> * 3.普通字符串代表子目录</span><br><span class=\"line\"> * 4. /代表绝对路径根目录</span><br><span class=\"line\"> */</span><br><span class=\"line\">console.log(path.resolve());//空代表当前的目录路径</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\"> * relative</span><br><span class=\"line\"> * 可以获取两个路径之间的相对关系</span><br><span class=\"line\"> * </span><br><span class=\"line\"> */</span><br><span class=\"line\">console.log(path.relative(__dirname,&apos;../a&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">//返回指定路径的所在目录</span><br><span class=\"line\">console.log(path.dirname(__dirname));</span><br><span class=\"line\"></span><br><span class=\"line\">//basename 获取路径中的文件名</span><br><span class=\"line\">console.log(path.basename(__filename));</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h1><h2 id=\"JS不足\"><a href=\"#JS不足\" class=\"headerlink\" title=\"JS不足\"></a>JS不足</h2><ul>\n<li>js没有模块系统，不支持封闭的作用域和依赖管理</li>\n<li>没有标准库，没有文件系统和IO流API</li>\n<li>也没有包管理系统<h2 id=\"commonjs规范\"><a href=\"#commonjs规范\" class=\"headerlink\" title=\"commonjs规范\"></a>commonjs规范</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3>封装功能，封闭作用域，可解决依赖问题<br>工作效率更高，重构方便<h2 id=\"commonjs-in-node\"><a href=\"#commonjs-in-node\" class=\"headerlink\" title=\"commonjs in node\"></a>commonjs in node</h2>在node.js里，模块划分所有的功能，每个JS都是一个模块<br>实现require方法<br>npm 实现了模块的自动加载和安装依赖<h2 id=\"定义模块\"><a href=\"#定义模块\" class=\"headerlink\" title=\"定义模块\"></a>定义模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(exports,require,module,__filename,__dirname)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    exports = module.exports;</span><br><span class=\"line\">    return module.exports;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"模块的加载策略\"><a href=\"#模块的加载策略\" class=\"headerlink\" title=\"模块的加载策略\"></a>模块的加载策略</h2><h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>原生模块 http path fs util events 编译成二进制，加载速度最快</li>\n<li>文件模块 在硬盘的某个位置 非常慢</li>\n</ul>\n<h2 id=\"如何查找文件模块\"><a href=\"#如何查找文件模块\" class=\"headerlink\" title=\"如何查找文件模块\"></a>如何查找文件模块</h2><h3 id=\"文件模块分类\"><a href=\"#文件模块分类\" class=\"headerlink\" title=\"文件模块分类\"></a>文件模块分类</h3><ul>\n<li>js 脚本文件 需要先读入内存再运行</li>\n<li>json 文件 fs 读入内存 转化为JSON对象</li>\n<li>node 二进制文件 可以直接使用<h3 id=\"查找的过程\"><a href=\"#查找的过程\" class=\"headerlink\" title=\"查找的过程\"></a>查找的过程</h3></li>\n<li>如果参数是相对路径的话如何查找</li>\n<li>如果不是路径<h3 id=\"从全局路径进行加载\"><a href=\"#从全局路径进行加载\" class=\"headerlink\" title=\"从全局路径进行加载\"></a>从全局路径进行加载</h3>NODE_PATH 用;分隔的路径串<br>$HOME/.node_modules</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(module);</span><br><span class=\"line\">/**</span><br><span class=\"line\">* id ID</span><br><span class=\"line\">* exports 导出对象</span><br><span class=\"line\">* parent 它依赖的模块</span><br><span class=\"line\">* filename 模块的文件名</span><br><span class=\"line\">* loaded 是否加载成功</span><br><span class=\"line\">* children 被哪些模块所依赖</span><br><span class=\"line\">* path </span><br><span class=\"line\">* cache 缓存</span><br></pre></td></tr></table></figure>\n<h1 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * normalize 将非标准化的路径转化成标准化的路径</span><br><span class=\"line\"> * 1.解析. 和 ..</span><br><span class=\"line\"> * 2.多个斜杠会转成一个斜杠</span><br><span class=\"line\"> * 3.window下的斜杠会转成正斜杠</span><br><span class=\"line\"> * 4.如果以斜杠结尾会保留</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(path.join(__dirname,&apos;a&apos;,&apos;b&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * resolve</span><br><span class=\"line\"> * 以应用程序为根目录，做为起点，根据参数解析出一个绝对路径</span><br><span class=\"line\"> * 1.以应用程序为根起点</span><br><span class=\"line\"> * 2. ..</span><br><span class=\"line\"> * 3.普通字符串代表子目录</span><br><span class=\"line\"> * 4. /代表绝对路径根目录</span><br><span class=\"line\"> */</span><br><span class=\"line\">console.log(path.resolve());//空代表当前的目录路径</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\"> * relative</span><br><span class=\"line\"> * 可以获取两个路径之间的相对关系</span><br><span class=\"line\"> * </span><br><span class=\"line\"> */</span><br><span class=\"line\">console.log(path.relative(__dirname,&apos;../a&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">//返回指定路径的所在目录</span><br><span class=\"line\">console.log(path.dirname(__dirname));</span><br><span class=\"line\"></span><br><span class=\"line\">//basename 获取路径中的文件名</span><br><span class=\"line\">console.log(path.basename(__filename));</span><br></pre></td></tr></table></figure>"},{"title":"node-05bufer","date":"2015-10-30T03:02:22.000Z","_content":"\n> Buffer暂时存放输入输出数据的一段内存，是全局对象\n\n## 创建buffer对象的三种方法\n### new Buffer(size);\n```\nvar buf1 = new Buffer(12);\nbuf1.fill(0);\n```\n\n### 数组的方式\n```\nvar buf2 = new Buffer([1,2,3]);\n```\n\n### 字符串来创建\n```\nvar buf3 = new Buffer('天天向上');\n```\n### 修改\n> 字符串是只读的,不能被修改;buffer类似于数组,可以被修改\n\n### slice\n```\nvar substr = str.slice(1,2);\nvar subbuf = buf.slice(1,2);\n```\n\n### buffer <=> 字符串\n```\nvar buf = new Buffer('天天向上');\nconsole.log(buf.toString('utf8',4,10));\n```\n\n### buffer.write\n```\n/**\n * string\n * offset 写入buffer的偏移量\n * length 写入字节的长度\n * encoding\n */\nbuf.write('天天',0,6,'utf8');\nconsole.log(buf.toString())\n```\n\n### 乱码处理\n```\n//StringDecoder\nvar StringDecoder = require('string_decoder').StringDecoder;\nvar decoder = new StringDecoder();\nconsole.log(decoder.write(buf1));\nconsole.log(decoder.write(buf2));\n```\n\n### Number 双精度的Double\n```\n//value offset\nvar buf = new Buffer(4);\nbuf.writeInt8(0,0);\nbuf.writeInt8(16,1);\nbuf.writeInt8(32,2);\nbuf.writeInt8(64,3);\nconsole.log(buf);\nconsole.log(buf.readInt8(0));\nconsole.log(buf.readInt8(1));\nconsole.log(buf.readInt8(2));\nconsole.log(buf.readInt8(3));\n```\n\n```\n/**\n * 高位字节 低位字节\n * big 高位字节\n * little 低位字节\n */\nbuf.writeInt16BE(1,0);\nbuf.writeInt16BE(9,2);\nconsole.log(buf.readInt16BE(0));//1\nconsole.log(buf.readInt16BE(2));//9\n```\n\n### 复制缓存\n```\nvar srcBuf = new Buffer([4,5,6]);\nvar tarBuf = new Buffer(6);\ntarBuf[0] = 1;\ntarBuf[1] = 2;\ntarBuf[2] = 3;\n/**\n * targetBuffer 目标buffer\n * targetStart  目标的起始位置\n * sourceStart  源的起始位置\n * sourceEnd    源的结束位置\n */\nsrcBuf.copy(tarBuf,3,0,3);\nconsole.log(tarBuf);\n```\n\n### buffer的其他属性\n```\nconsole.log(Buffer.isBuffer(srcBuf)); //判断是否是buffer\nconsole.log(Buffer.byteLength(\"天天向上\")); //返回字符串的字节长度\nconsole.log(Buffer.isEncoding(\"utf8\"));\n```","source":"_posts/node-05buffer.md","raw":"title: node-05bufer\ndate: 2015-10-30 11:02:22\ntags:\n- node\n- buffer\n- 学习笔记\ncategories: 笔记\n---\n\n> Buffer暂时存放输入输出数据的一段内存，是全局对象\n\n## 创建buffer对象的三种方法\n### new Buffer(size);\n```\nvar buf1 = new Buffer(12);\nbuf1.fill(0);\n```\n\n### 数组的方式\n```\nvar buf2 = new Buffer([1,2,3]);\n```\n\n### 字符串来创建\n```\nvar buf3 = new Buffer('天天向上');\n```\n### 修改\n> 字符串是只读的,不能被修改;buffer类似于数组,可以被修改\n\n### slice\n```\nvar substr = str.slice(1,2);\nvar subbuf = buf.slice(1,2);\n```\n\n### buffer <=> 字符串\n```\nvar buf = new Buffer('天天向上');\nconsole.log(buf.toString('utf8',4,10));\n```\n\n### buffer.write\n```\n/**\n * string\n * offset 写入buffer的偏移量\n * length 写入字节的长度\n * encoding\n */\nbuf.write('天天',0,6,'utf8');\nconsole.log(buf.toString())\n```\n\n### 乱码处理\n```\n//StringDecoder\nvar StringDecoder = require('string_decoder').StringDecoder;\nvar decoder = new StringDecoder();\nconsole.log(decoder.write(buf1));\nconsole.log(decoder.write(buf2));\n```\n\n### Number 双精度的Double\n```\n//value offset\nvar buf = new Buffer(4);\nbuf.writeInt8(0,0);\nbuf.writeInt8(16,1);\nbuf.writeInt8(32,2);\nbuf.writeInt8(64,3);\nconsole.log(buf);\nconsole.log(buf.readInt8(0));\nconsole.log(buf.readInt8(1));\nconsole.log(buf.readInt8(2));\nconsole.log(buf.readInt8(3));\n```\n\n```\n/**\n * 高位字节 低位字节\n * big 高位字节\n * little 低位字节\n */\nbuf.writeInt16BE(1,0);\nbuf.writeInt16BE(9,2);\nconsole.log(buf.readInt16BE(0));//1\nconsole.log(buf.readInt16BE(2));//9\n```\n\n### 复制缓存\n```\nvar srcBuf = new Buffer([4,5,6]);\nvar tarBuf = new Buffer(6);\ntarBuf[0] = 1;\ntarBuf[1] = 2;\ntarBuf[2] = 3;\n/**\n * targetBuffer 目标buffer\n * targetStart  目标的起始位置\n * sourceStart  源的起始位置\n * sourceEnd    源的结束位置\n */\nsrcBuf.copy(tarBuf,3,0,3);\nconsole.log(tarBuf);\n```\n\n### buffer的其他属性\n```\nconsole.log(Buffer.isBuffer(srcBuf)); //判断是否是buffer\nconsole.log(Buffer.byteLength(\"天天向上\")); //返回字符串的字节长度\nconsole.log(Buffer.isEncoding(\"utf8\"));\n```","slug":"node-05buffer","published":1,"updated":"2015-10-30T09:36:10.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8cd000je4gj9zxzk1mg","content":"<blockquote>\n<p>Buffer暂时存放输入输出数据的一段内存，是全局对象</p>\n</blockquote>\n<h2 id=\"创建buffer对象的三种方法\"><a href=\"#创建buffer对象的三种方法\" class=\"headerlink\" title=\"创建buffer对象的三种方法\"></a>创建buffer对象的三种方法</h2><h3 id=\"new-Buffer-size\"><a href=\"#new-Buffer-size\" class=\"headerlink\" title=\"new Buffer(size);\"></a>new Buffer(size);</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buf1 = new Buffer(12);</span><br><span class=\"line\">buf1.fill(0);</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的方式\"><a href=\"#数组的方式\" class=\"headerlink\" title=\"数组的方式\"></a>数组的方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buf2 = new Buffer([1,2,3]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串来创建\"><a href=\"#字符串来创建\" class=\"headerlink\" title=\"字符串来创建\"></a>字符串来创建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buf3 = new Buffer(&apos;天天向上&apos;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><blockquote>\n<p>字符串是只读的,不能被修改;buffer类似于数组,可以被修改</p>\n</blockquote>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var substr = str.slice(1,2);</span><br><span class=\"line\">var subbuf = buf.slice(1,2);</span><br></pre></td></tr></table></figure>\n<h3 id=\"buffer-lt-gt-字符串\"><a href=\"#buffer-lt-gt-字符串\" class=\"headerlink\" title=\"buffer &lt;=&gt; 字符串\"></a>buffer &lt;=&gt; 字符串</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buf = new Buffer(&apos;天天向上&apos;);</span><br><span class=\"line\">console.log(buf.toString(&apos;utf8&apos;,4,10));</span><br></pre></td></tr></table></figure>\n<h3 id=\"buffer-write\"><a href=\"#buffer-write\" class=\"headerlink\" title=\"buffer.write\"></a>buffer.write</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * string</span><br><span class=\"line\"> * offset 写入buffer的偏移量</span><br><span class=\"line\"> * length 写入字节的长度</span><br><span class=\"line\"> * encoding</span><br><span class=\"line\"> */</span><br><span class=\"line\">buf.write(&apos;天天&apos;,0,6,&apos;utf8&apos;);</span><br><span class=\"line\">console.log(buf.toString())</span><br></pre></td></tr></table></figure>\n<h3 id=\"乱码处理\"><a href=\"#乱码处理\" class=\"headerlink\" title=\"乱码处理\"></a>乱码处理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//StringDecoder</span><br><span class=\"line\">var StringDecoder = require(&apos;string_decoder&apos;).StringDecoder;</span><br><span class=\"line\">var decoder = new StringDecoder();</span><br><span class=\"line\">console.log(decoder.write(buf1));</span><br><span class=\"line\">console.log(decoder.write(buf2));</span><br></pre></td></tr></table></figure>\n<h3 id=\"Number-双精度的Double\"><a href=\"#Number-双精度的Double\" class=\"headerlink\" title=\"Number 双精度的Double\"></a>Number 双精度的Double</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//value offset</span><br><span class=\"line\">var buf = new Buffer(4);</span><br><span class=\"line\">buf.writeInt8(0,0);</span><br><span class=\"line\">buf.writeInt8(16,1);</span><br><span class=\"line\">buf.writeInt8(32,2);</span><br><span class=\"line\">buf.writeInt8(64,3);</span><br><span class=\"line\">console.log(buf);</span><br><span class=\"line\">console.log(buf.readInt8(0));</span><br><span class=\"line\">console.log(buf.readInt8(1));</span><br><span class=\"line\">console.log(buf.readInt8(2));</span><br><span class=\"line\">console.log(buf.readInt8(3));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 高位字节 低位字节</span><br><span class=\"line\"> * big 高位字节</span><br><span class=\"line\"> * little 低位字节</span><br><span class=\"line\"> */</span><br><span class=\"line\">buf.writeInt16BE(1,0);</span><br><span class=\"line\">buf.writeInt16BE(9,2);</span><br><span class=\"line\">console.log(buf.readInt16BE(0));//1</span><br><span class=\"line\">console.log(buf.readInt16BE(2));//9</span><br></pre></td></tr></table></figure>\n<h3 id=\"复制缓存\"><a href=\"#复制缓存\" class=\"headerlink\" title=\"复制缓存\"></a>复制缓存</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var srcBuf = new Buffer([4,5,6]);</span><br><span class=\"line\">var tarBuf = new Buffer(6);</span><br><span class=\"line\">tarBuf[0] = 1;</span><br><span class=\"line\">tarBuf[1] = 2;</span><br><span class=\"line\">tarBuf[2] = 3;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * targetBuffer 目标buffer</span><br><span class=\"line\"> * targetStart  目标的起始位置</span><br><span class=\"line\"> * sourceStart  源的起始位置</span><br><span class=\"line\"> * sourceEnd    源的结束位置</span><br><span class=\"line\"> */</span><br><span class=\"line\">srcBuf.copy(tarBuf,3,0,3);</span><br><span class=\"line\">console.log(tarBuf);</span><br></pre></td></tr></table></figure>\n<h3 id=\"buffer的其他属性\"><a href=\"#buffer的其他属性\" class=\"headerlink\" title=\"buffer的其他属性\"></a>buffer的其他属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Buffer.isBuffer(srcBuf)); //判断是否是buffer</span><br><span class=\"line\">console.log(Buffer.byteLength(&quot;天天向上&quot;)); //返回字符串的字节长度</span><br><span class=\"line\">console.log(Buffer.isEncoding(&quot;utf8&quot;));</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<blockquote>\n<p>Buffer暂时存放输入输出数据的一段内存，是全局对象</p>\n</blockquote>\n<h2 id=\"创建buffer对象的三种方法\"><a href=\"#创建buffer对象的三种方法\" class=\"headerlink\" title=\"创建buffer对象的三种方法\"></a>创建buffer对象的三种方法</h2><h3 id=\"new-Buffer-size\"><a href=\"#new-Buffer-size\" class=\"headerlink\" title=\"new Buffer(size);\"></a>new Buffer(size);</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buf1 = new Buffer(12);</span><br><span class=\"line\">buf1.fill(0);</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的方式\"><a href=\"#数组的方式\" class=\"headerlink\" title=\"数组的方式\"></a>数组的方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buf2 = new Buffer([1,2,3]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串来创建\"><a href=\"#字符串来创建\" class=\"headerlink\" title=\"字符串来创建\"></a>字符串来创建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buf3 = new Buffer(&apos;天天向上&apos;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><blockquote>\n<p>字符串是只读的,不能被修改;buffer类似于数组,可以被修改</p>\n</blockquote>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var substr = str.slice(1,2);</span><br><span class=\"line\">var subbuf = buf.slice(1,2);</span><br></pre></td></tr></table></figure>\n<h3 id=\"buffer-lt-gt-字符串\"><a href=\"#buffer-lt-gt-字符串\" class=\"headerlink\" title=\"buffer &lt;=&gt; 字符串\"></a>buffer &lt;=&gt; 字符串</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buf = new Buffer(&apos;天天向上&apos;);</span><br><span class=\"line\">console.log(buf.toString(&apos;utf8&apos;,4,10));</span><br></pre></td></tr></table></figure>\n<h3 id=\"buffer-write\"><a href=\"#buffer-write\" class=\"headerlink\" title=\"buffer.write\"></a>buffer.write</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * string</span><br><span class=\"line\"> * offset 写入buffer的偏移量</span><br><span class=\"line\"> * length 写入字节的长度</span><br><span class=\"line\"> * encoding</span><br><span class=\"line\"> */</span><br><span class=\"line\">buf.write(&apos;天天&apos;,0,6,&apos;utf8&apos;);</span><br><span class=\"line\">console.log(buf.toString())</span><br></pre></td></tr></table></figure>\n<h3 id=\"乱码处理\"><a href=\"#乱码处理\" class=\"headerlink\" title=\"乱码处理\"></a>乱码处理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//StringDecoder</span><br><span class=\"line\">var StringDecoder = require(&apos;string_decoder&apos;).StringDecoder;</span><br><span class=\"line\">var decoder = new StringDecoder();</span><br><span class=\"line\">console.log(decoder.write(buf1));</span><br><span class=\"line\">console.log(decoder.write(buf2));</span><br></pre></td></tr></table></figure>\n<h3 id=\"Number-双精度的Double\"><a href=\"#Number-双精度的Double\" class=\"headerlink\" title=\"Number 双精度的Double\"></a>Number 双精度的Double</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//value offset</span><br><span class=\"line\">var buf = new Buffer(4);</span><br><span class=\"line\">buf.writeInt8(0,0);</span><br><span class=\"line\">buf.writeInt8(16,1);</span><br><span class=\"line\">buf.writeInt8(32,2);</span><br><span class=\"line\">buf.writeInt8(64,3);</span><br><span class=\"line\">console.log(buf);</span><br><span class=\"line\">console.log(buf.readInt8(0));</span><br><span class=\"line\">console.log(buf.readInt8(1));</span><br><span class=\"line\">console.log(buf.readInt8(2));</span><br><span class=\"line\">console.log(buf.readInt8(3));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 高位字节 低位字节</span><br><span class=\"line\"> * big 高位字节</span><br><span class=\"line\"> * little 低位字节</span><br><span class=\"line\"> */</span><br><span class=\"line\">buf.writeInt16BE(1,0);</span><br><span class=\"line\">buf.writeInt16BE(9,2);</span><br><span class=\"line\">console.log(buf.readInt16BE(0));//1</span><br><span class=\"line\">console.log(buf.readInt16BE(2));//9</span><br></pre></td></tr></table></figure>\n<h3 id=\"复制缓存\"><a href=\"#复制缓存\" class=\"headerlink\" title=\"复制缓存\"></a>复制缓存</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var srcBuf = new Buffer([4,5,6]);</span><br><span class=\"line\">var tarBuf = new Buffer(6);</span><br><span class=\"line\">tarBuf[0] = 1;</span><br><span class=\"line\">tarBuf[1] = 2;</span><br><span class=\"line\">tarBuf[2] = 3;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * targetBuffer 目标buffer</span><br><span class=\"line\"> * targetStart  目标的起始位置</span><br><span class=\"line\"> * sourceStart  源的起始位置</span><br><span class=\"line\"> * sourceEnd    源的结束位置</span><br><span class=\"line\"> */</span><br><span class=\"line\">srcBuf.copy(tarBuf,3,0,3);</span><br><span class=\"line\">console.log(tarBuf);</span><br></pre></td></tr></table></figure>\n<h3 id=\"buffer的其他属性\"><a href=\"#buffer的其他属性\" class=\"headerlink\" title=\"buffer的其他属性\"></a>buffer的其他属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Buffer.isBuffer(srcBuf)); //判断是否是buffer</span><br><span class=\"line\">console.log(Buffer.byteLength(&quot;天天向上&quot;)); //返回字符串的字节长度</span><br><span class=\"line\">console.log(Buffer.isEncoding(&quot;utf8&quot;));</span><br></pre></td></tr></table></figure>"},{"title":"node-06file","date":"2015-10-30T12:52:37.000Z","_content":"\n## 读取文件\n### 有同步和异步的方式,同步方式返回值为数据,异步方式回调函数返回数据\n```\nvar fs = require('fs');\n/**\n * 同步的方式\n */\nvar content = fs.readFileSync('./index.html','utf-8');\n//console.log(content);\n\n/**\n * 异步的方式\n * 尽量使用异步的方式，只有读取文件作为前置条件的时候使用同步\n */\nfs.readFile('./index.html','utf8',function(err,data){\n    console.log(data);\n});\n```\n\n## 写文件\n```\n/**\n * 可以完整的写入一个文件\n * fs.writeFile\n */\nvar fs = require('fs');\n/*fs.writeFile('./write.txt','第er行',{flag:'a',encoding:'utf8'},function(err){\n    if(err){\n        console.error(err);\n    }\n    console.log(\"写入成功\");\n})*/\n//r+ 为写入\n//a  为追加\nfs.appendFile('./write.txt','第三行');\n\n/**\n * base64\n * A-Za-z0-9+/\n * 把3个8位字节转化为4个6位字节，之后在6位前面补两个0，形成8位一个字节的形式\n **/\nfs.readFile('./bg.png','base64',function(err,data){\n    fs.writeFile('./b.png',data,'base64',function(){\n        console.log('copy');\n    })\n})\n```\n\n## 从指定的位置开始读取文件open\n```\n/**\n * 如何从指定的位置开始读取文件\n * 0 stdin 标准输入\n * 1 stdout 标准输出\n * 2 stderr 错误输出\n */\nvar fs = require('fs');\n//fd 是打开文件的索引\nfs.open('./msg.txt','r',function(err,fd){\n    console.log(fd);\n})\n/**\n * 读取文件,可以多次读取，每次读一小部分\n * fd 文件描述符\n * buffer 读到哪个buffer\n * offset buffer偏移量\n * length 写多少个字节\n * position 从文件的哪个位置开始读\n * callback\n **/\n\nfs.open('./msg.txt','r',function(err,fd){\n    var buffer = new Buffer(9);\n    fs.read(fd,buffer,0,6,3,function(err,bytesRead,buf){\n        console.log(bytesRead);\n        console.log(buf.toString());\n        fs.read(fd,buffer,6,3,9,function(err,bytesRead,buf){\n            console.log(bytesRead);\n            console.log(buf.toString());\n        })\n    })\n})\n```\n\n## 写入文件\n```\n/**\n * Created by GaoQ on 2015/10/3.\n */\nvar fs = require('fs');\n/***\n * fd\n * buffer buffer\n * offset 从buffer中读取的偏移量\n * length 写入的长度\n * position 写入文件的位置,position null 当前位置\n * callback\n */\n/*\nfs.open('./msg.txt','w',function(err,fd){\n    fs.write(fd,new Buffer(\"天天向上\"),0,6,0,function(err,byteWritten,buf){\n        console.log('写入成功,写入了'+byteWritten);\n        fs.write(fd,new Buffer(\"天天向上\"),6,6,6,function(err,byteWritten,buf){\n            console.log('写入成功,写入了'+byteWritten);\n        })\n    })\n});\n*/\n/**\n * 写入文件之后要关闭文件\n **/\nfs.open('./msg.txt','w',function(err,fd){\n    console.log(fd);\n    fs.fsync(fd);//把缓存区里的数据立刻同步到目标文件里去\n    fs.close(fd);\n    fs.open('./msg.txt','w',function(err,fd){\n        console.log(fd);\n    })\n})\n```\n\n## copy文件\n```\nvar BUFFER_SIZE = 8*1024;\nvar fs = require('fs');\nfunction copy(src,dest){\n    var buff = new Buffer(BUFFER_SIZE);\n    //读取的文件索引位置,源文件描述符,目标文件描述符\n    var readSoFar,fdSrc,fdDest,read;\n    fdSrc = fs.openSync(src,'r');\n    fdDest = fs.openSync(dest,'w');\n    readSoFar = 0;\n    do{\n        //从源文件中读取内容,并返回实际读取到的字节数\n        read = fs.readSync(fdSrc,buff,0,BUFFER_SIZE,readSoFar);\n        fs.writeSync(fdDest,buff,0,read);\n        readSoFar += read;\n    }while(read == BUFFER_SIZE);\n    fs.closeSync(fdDest);\n    fs.closeSync(fdSrc);\n}\ncopy('text.txt','text2.txt');\n```","source":"_posts/node-06file.md","raw":"title: node-06file\ndate: 2015-10-30 20:52:37\ntags:\n- node\n- buffer\n- 学习笔记\ncategories: 笔记\n---\n\n## 读取文件\n### 有同步和异步的方式,同步方式返回值为数据,异步方式回调函数返回数据\n```\nvar fs = require('fs');\n/**\n * 同步的方式\n */\nvar content = fs.readFileSync('./index.html','utf-8');\n//console.log(content);\n\n/**\n * 异步的方式\n * 尽量使用异步的方式，只有读取文件作为前置条件的时候使用同步\n */\nfs.readFile('./index.html','utf8',function(err,data){\n    console.log(data);\n});\n```\n\n## 写文件\n```\n/**\n * 可以完整的写入一个文件\n * fs.writeFile\n */\nvar fs = require('fs');\n/*fs.writeFile('./write.txt','第er行',{flag:'a',encoding:'utf8'},function(err){\n    if(err){\n        console.error(err);\n    }\n    console.log(\"写入成功\");\n})*/\n//r+ 为写入\n//a  为追加\nfs.appendFile('./write.txt','第三行');\n\n/**\n * base64\n * A-Za-z0-9+/\n * 把3个8位字节转化为4个6位字节，之后在6位前面补两个0，形成8位一个字节的形式\n **/\nfs.readFile('./bg.png','base64',function(err,data){\n    fs.writeFile('./b.png',data,'base64',function(){\n        console.log('copy');\n    })\n})\n```\n\n## 从指定的位置开始读取文件open\n```\n/**\n * 如何从指定的位置开始读取文件\n * 0 stdin 标准输入\n * 1 stdout 标准输出\n * 2 stderr 错误输出\n */\nvar fs = require('fs');\n//fd 是打开文件的索引\nfs.open('./msg.txt','r',function(err,fd){\n    console.log(fd);\n})\n/**\n * 读取文件,可以多次读取，每次读一小部分\n * fd 文件描述符\n * buffer 读到哪个buffer\n * offset buffer偏移量\n * length 写多少个字节\n * position 从文件的哪个位置开始读\n * callback\n **/\n\nfs.open('./msg.txt','r',function(err,fd){\n    var buffer = new Buffer(9);\n    fs.read(fd,buffer,0,6,3,function(err,bytesRead,buf){\n        console.log(bytesRead);\n        console.log(buf.toString());\n        fs.read(fd,buffer,6,3,9,function(err,bytesRead,buf){\n            console.log(bytesRead);\n            console.log(buf.toString());\n        })\n    })\n})\n```\n\n## 写入文件\n```\n/**\n * Created by GaoQ on 2015/10/3.\n */\nvar fs = require('fs');\n/***\n * fd\n * buffer buffer\n * offset 从buffer中读取的偏移量\n * length 写入的长度\n * position 写入文件的位置,position null 当前位置\n * callback\n */\n/*\nfs.open('./msg.txt','w',function(err,fd){\n    fs.write(fd,new Buffer(\"天天向上\"),0,6,0,function(err,byteWritten,buf){\n        console.log('写入成功,写入了'+byteWritten);\n        fs.write(fd,new Buffer(\"天天向上\"),6,6,6,function(err,byteWritten,buf){\n            console.log('写入成功,写入了'+byteWritten);\n        })\n    })\n});\n*/\n/**\n * 写入文件之后要关闭文件\n **/\nfs.open('./msg.txt','w',function(err,fd){\n    console.log(fd);\n    fs.fsync(fd);//把缓存区里的数据立刻同步到目标文件里去\n    fs.close(fd);\n    fs.open('./msg.txt','w',function(err,fd){\n        console.log(fd);\n    })\n})\n```\n\n## copy文件\n```\nvar BUFFER_SIZE = 8*1024;\nvar fs = require('fs');\nfunction copy(src,dest){\n    var buff = new Buffer(BUFFER_SIZE);\n    //读取的文件索引位置,源文件描述符,目标文件描述符\n    var readSoFar,fdSrc,fdDest,read;\n    fdSrc = fs.openSync(src,'r');\n    fdDest = fs.openSync(dest,'w');\n    readSoFar = 0;\n    do{\n        //从源文件中读取内容,并返回实际读取到的字节数\n        read = fs.readSync(fdSrc,buff,0,BUFFER_SIZE,readSoFar);\n        fs.writeSync(fdDest,buff,0,read);\n        readSoFar += read;\n    }while(read == BUFFER_SIZE);\n    fs.closeSync(fdDest);\n    fs.closeSync(fdSrc);\n}\ncopy('text.txt','text2.txt');\n```","slug":"node-06file","published":1,"updated":"2015-11-09T05:51:01.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8ck000le4gjfyj3vm47","content":"<h2 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h2><h3 id=\"有同步和异步的方式-同步方式返回值为数据-异步方式回调函数返回数据\"><a href=\"#有同步和异步的方式-同步方式返回值为数据-异步方式回调函数返回数据\" class=\"headerlink\" title=\"有同步和异步的方式,同步方式返回值为数据,异步方式回调函数返回数据\"></a>有同步和异步的方式,同步方式返回值为数据,异步方式回调函数返回数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 同步的方式</span><br><span class=\"line\"> */</span><br><span class=\"line\">var content = fs.readFileSync(&apos;./index.html&apos;,&apos;utf-8&apos;);</span><br><span class=\"line\">//console.log(content);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 异步的方式</span><br><span class=\"line\"> * 尽量使用异步的方式，只有读取文件作为前置条件的时候使用同步</span><br><span class=\"line\"> */</span><br><span class=\"line\">fs.readFile(&apos;./index.html&apos;,&apos;utf8&apos;,function(err,data)&#123;</span><br><span class=\"line\">    console.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 可以完整的写入一个文件</span><br><span class=\"line\"> * fs.writeFile</span><br><span class=\"line\"> */</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/*fs.writeFile(&apos;./write.txt&apos;,&apos;第er行&apos;,&#123;flag:&apos;a&apos;,encoding:&apos;utf8&apos;&#125;,function(err)&#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.error(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&quot;写入成功&quot;);</span><br><span class=\"line\">&#125;)*/</span><br><span class=\"line\">//r+ 为写入</span><br><span class=\"line\">//a  为追加</span><br><span class=\"line\">fs.appendFile(&apos;./write.txt&apos;,&apos;第三行&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * base64</span><br><span class=\"line\"> * A-Za-z0-9+/</span><br><span class=\"line\"> * 把3个8位字节转化为4个6位字节，之后在6位前面补两个0，形成8位一个字节的形式</span><br><span class=\"line\"> **/</span><br><span class=\"line\">fs.readFile(&apos;./bg.png&apos;,&apos;base64&apos;,function(err,data)&#123;</span><br><span class=\"line\">    fs.writeFile(&apos;./b.png&apos;,data,&apos;base64&apos;,function()&#123;</span><br><span class=\"line\">        console.log(&apos;copy&apos;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"从指定的位置开始读取文件open\"><a href=\"#从指定的位置开始读取文件open\" class=\"headerlink\" title=\"从指定的位置开始读取文件open\"></a>从指定的位置开始读取文件open</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 如何从指定的位置开始读取文件</span><br><span class=\"line\"> * 0 stdin 标准输入</span><br><span class=\"line\"> * 1 stdout 标准输出</span><br><span class=\"line\"> * 2 stderr 错误输出</span><br><span class=\"line\"> */</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">//fd 是打开文件的索引</span><br><span class=\"line\">fs.open(&apos;./msg.txt&apos;,&apos;r&apos;,function(err,fd)&#123;</span><br><span class=\"line\">    console.log(fd);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 读取文件,可以多次读取，每次读一小部分</span><br><span class=\"line\"> * fd 文件描述符</span><br><span class=\"line\"> * buffer 读到哪个buffer</span><br><span class=\"line\"> * offset buffer偏移量</span><br><span class=\"line\"> * length 写多少个字节</span><br><span class=\"line\"> * position 从文件的哪个位置开始读</span><br><span class=\"line\"> * callback</span><br><span class=\"line\"> **/</span><br><span class=\"line\"></span><br><span class=\"line\">fs.open(&apos;./msg.txt&apos;,&apos;r&apos;,function(err,fd)&#123;</span><br><span class=\"line\">    var buffer = new Buffer(9);</span><br><span class=\"line\">    fs.read(fd,buffer,0,6,3,function(err,bytesRead,buf)&#123;</span><br><span class=\"line\">        console.log(bytesRead);</span><br><span class=\"line\">        console.log(buf.toString());</span><br><span class=\"line\">        fs.read(fd,buffer,6,3,9,function(err,bytesRead,buf)&#123;</span><br><span class=\"line\">            console.log(bytesRead);</span><br><span class=\"line\">            console.log(buf.toString());</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by GaoQ on 2015/10/3.</span><br><span class=\"line\"> */</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/***</span><br><span class=\"line\"> * fd</span><br><span class=\"line\"> * buffer buffer</span><br><span class=\"line\"> * offset 从buffer中读取的偏移量</span><br><span class=\"line\"> * length 写入的长度</span><br><span class=\"line\"> * position 写入文件的位置,position null 当前位置</span><br><span class=\"line\"> * callback</span><br><span class=\"line\"> */</span><br><span class=\"line\">/*</span><br><span class=\"line\">fs.open(&apos;./msg.txt&apos;,&apos;w&apos;,function(err,fd)&#123;</span><br><span class=\"line\">    fs.write(fd,new Buffer(&quot;天天向上&quot;),0,6,0,function(err,byteWritten,buf)&#123;</span><br><span class=\"line\">        console.log(&apos;写入成功,写入了&apos;+byteWritten);</span><br><span class=\"line\">        fs.write(fd,new Buffer(&quot;天天向上&quot;),6,6,6,function(err,byteWritten,buf)&#123;</span><br><span class=\"line\">            console.log(&apos;写入成功,写入了&apos;+byteWritten);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">*/</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 写入文件之后要关闭文件</span><br><span class=\"line\"> **/</span><br><span class=\"line\">fs.open(&apos;./msg.txt&apos;,&apos;w&apos;,function(err,fd)&#123;</span><br><span class=\"line\">    console.log(fd);</span><br><span class=\"line\">    fs.fsync(fd);//把缓存区里的数据立刻同步到目标文件里去</span><br><span class=\"line\">    fs.close(fd);</span><br><span class=\"line\">    fs.open(&apos;./msg.txt&apos;,&apos;w&apos;,function(err,fd)&#123;</span><br><span class=\"line\">        console.log(fd);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"copy文件\"><a href=\"#copy文件\" class=\"headerlink\" title=\"copy文件\"></a>copy文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var BUFFER_SIZE = 8*1024;</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">function copy(src,dest)&#123;</span><br><span class=\"line\">    var buff = new Buffer(BUFFER_SIZE);</span><br><span class=\"line\">    //读取的文件索引位置,源文件描述符,目标文件描述符</span><br><span class=\"line\">    var readSoFar,fdSrc,fdDest,read;</span><br><span class=\"line\">    fdSrc = fs.openSync(src,&apos;r&apos;);</span><br><span class=\"line\">    fdDest = fs.openSync(dest,&apos;w&apos;);</span><br><span class=\"line\">    readSoFar = 0;</span><br><span class=\"line\">    do&#123;</span><br><span class=\"line\">        //从源文件中读取内容,并返回实际读取到的字节数</span><br><span class=\"line\">        read = fs.readSync(fdSrc,buff,0,BUFFER_SIZE,readSoFar);</span><br><span class=\"line\">        fs.writeSync(fdDest,buff,0,read);</span><br><span class=\"line\">        readSoFar += read;</span><br><span class=\"line\">    &#125;while(read == BUFFER_SIZE);</span><br><span class=\"line\">    fs.closeSync(fdDest);</span><br><span class=\"line\">    fs.closeSync(fdSrc);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">copy(&apos;text.txt&apos;,&apos;text2.txt&apos;);</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h2><h3 id=\"有同步和异步的方式-同步方式返回值为数据-异步方式回调函数返回数据\"><a href=\"#有同步和异步的方式-同步方式返回值为数据-异步方式回调函数返回数据\" class=\"headerlink\" title=\"有同步和异步的方式,同步方式返回值为数据,异步方式回调函数返回数据\"></a>有同步和异步的方式,同步方式返回值为数据,异步方式回调函数返回数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 同步的方式</span><br><span class=\"line\"> */</span><br><span class=\"line\">var content = fs.readFileSync(&apos;./index.html&apos;,&apos;utf-8&apos;);</span><br><span class=\"line\">//console.log(content);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 异步的方式</span><br><span class=\"line\"> * 尽量使用异步的方式，只有读取文件作为前置条件的时候使用同步</span><br><span class=\"line\"> */</span><br><span class=\"line\">fs.readFile(&apos;./index.html&apos;,&apos;utf8&apos;,function(err,data)&#123;</span><br><span class=\"line\">    console.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 可以完整的写入一个文件</span><br><span class=\"line\"> * fs.writeFile</span><br><span class=\"line\"> */</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/*fs.writeFile(&apos;./write.txt&apos;,&apos;第er行&apos;,&#123;flag:&apos;a&apos;,encoding:&apos;utf8&apos;&#125;,function(err)&#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.error(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&quot;写入成功&quot;);</span><br><span class=\"line\">&#125;)*/</span><br><span class=\"line\">//r+ 为写入</span><br><span class=\"line\">//a  为追加</span><br><span class=\"line\">fs.appendFile(&apos;./write.txt&apos;,&apos;第三行&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * base64</span><br><span class=\"line\"> * A-Za-z0-9+/</span><br><span class=\"line\"> * 把3个8位字节转化为4个6位字节，之后在6位前面补两个0，形成8位一个字节的形式</span><br><span class=\"line\"> **/</span><br><span class=\"line\">fs.readFile(&apos;./bg.png&apos;,&apos;base64&apos;,function(err,data)&#123;</span><br><span class=\"line\">    fs.writeFile(&apos;./b.png&apos;,data,&apos;base64&apos;,function()&#123;</span><br><span class=\"line\">        console.log(&apos;copy&apos;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"从指定的位置开始读取文件open\"><a href=\"#从指定的位置开始读取文件open\" class=\"headerlink\" title=\"从指定的位置开始读取文件open\"></a>从指定的位置开始读取文件open</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 如何从指定的位置开始读取文件</span><br><span class=\"line\"> * 0 stdin 标准输入</span><br><span class=\"line\"> * 1 stdout 标准输出</span><br><span class=\"line\"> * 2 stderr 错误输出</span><br><span class=\"line\"> */</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">//fd 是打开文件的索引</span><br><span class=\"line\">fs.open(&apos;./msg.txt&apos;,&apos;r&apos;,function(err,fd)&#123;</span><br><span class=\"line\">    console.log(fd);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 读取文件,可以多次读取，每次读一小部分</span><br><span class=\"line\"> * fd 文件描述符</span><br><span class=\"line\"> * buffer 读到哪个buffer</span><br><span class=\"line\"> * offset buffer偏移量</span><br><span class=\"line\"> * length 写多少个字节</span><br><span class=\"line\"> * position 从文件的哪个位置开始读</span><br><span class=\"line\"> * callback</span><br><span class=\"line\"> **/</span><br><span class=\"line\"></span><br><span class=\"line\">fs.open(&apos;./msg.txt&apos;,&apos;r&apos;,function(err,fd)&#123;</span><br><span class=\"line\">    var buffer = new Buffer(9);</span><br><span class=\"line\">    fs.read(fd,buffer,0,6,3,function(err,bytesRead,buf)&#123;</span><br><span class=\"line\">        console.log(bytesRead);</span><br><span class=\"line\">        console.log(buf.toString());</span><br><span class=\"line\">        fs.read(fd,buffer,6,3,9,function(err,bytesRead,buf)&#123;</span><br><span class=\"line\">            console.log(bytesRead);</span><br><span class=\"line\">            console.log(buf.toString());</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by GaoQ on 2015/10/3.</span><br><span class=\"line\"> */</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/***</span><br><span class=\"line\"> * fd</span><br><span class=\"line\"> * buffer buffer</span><br><span class=\"line\"> * offset 从buffer中读取的偏移量</span><br><span class=\"line\"> * length 写入的长度</span><br><span class=\"line\"> * position 写入文件的位置,position null 当前位置</span><br><span class=\"line\"> * callback</span><br><span class=\"line\"> */</span><br><span class=\"line\">/*</span><br><span class=\"line\">fs.open(&apos;./msg.txt&apos;,&apos;w&apos;,function(err,fd)&#123;</span><br><span class=\"line\">    fs.write(fd,new Buffer(&quot;天天向上&quot;),0,6,0,function(err,byteWritten,buf)&#123;</span><br><span class=\"line\">        console.log(&apos;写入成功,写入了&apos;+byteWritten);</span><br><span class=\"line\">        fs.write(fd,new Buffer(&quot;天天向上&quot;),6,6,6,function(err,byteWritten,buf)&#123;</span><br><span class=\"line\">            console.log(&apos;写入成功,写入了&apos;+byteWritten);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">*/</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 写入文件之后要关闭文件</span><br><span class=\"line\"> **/</span><br><span class=\"line\">fs.open(&apos;./msg.txt&apos;,&apos;w&apos;,function(err,fd)&#123;</span><br><span class=\"line\">    console.log(fd);</span><br><span class=\"line\">    fs.fsync(fd);//把缓存区里的数据立刻同步到目标文件里去</span><br><span class=\"line\">    fs.close(fd);</span><br><span class=\"line\">    fs.open(&apos;./msg.txt&apos;,&apos;w&apos;,function(err,fd)&#123;</span><br><span class=\"line\">        console.log(fd);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"copy文件\"><a href=\"#copy文件\" class=\"headerlink\" title=\"copy文件\"></a>copy文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var BUFFER_SIZE = 8*1024;</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">function copy(src,dest)&#123;</span><br><span class=\"line\">    var buff = new Buffer(BUFFER_SIZE);</span><br><span class=\"line\">    //读取的文件索引位置,源文件描述符,目标文件描述符</span><br><span class=\"line\">    var readSoFar,fdSrc,fdDest,read;</span><br><span class=\"line\">    fdSrc = fs.openSync(src,&apos;r&apos;);</span><br><span class=\"line\">    fdDest = fs.openSync(dest,&apos;w&apos;);</span><br><span class=\"line\">    readSoFar = 0;</span><br><span class=\"line\">    do&#123;</span><br><span class=\"line\">        //从源文件中读取内容,并返回实际读取到的字节数</span><br><span class=\"line\">        read = fs.readSync(fdSrc,buff,0,BUFFER_SIZE,readSoFar);</span><br><span class=\"line\">        fs.writeSync(fdDest,buff,0,read);</span><br><span class=\"line\">        readSoFar += read;</span><br><span class=\"line\">    &#125;while(read == BUFFER_SIZE);</span><br><span class=\"line\">    fs.closeSync(fdDest);</span><br><span class=\"line\">    fs.closeSync(fdSrc);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">copy(&apos;text.txt&apos;,&apos;text2.txt&apos;);</span><br></pre></td></tr></table></figure>"},{"title":"node-09stream","date":"2015-11-09T09:57:14.000Z","_content":"\n> - 流是一组有序的,有起点和终点的数据传输手段\n  在网络中传输数据的时候,总是先将对象转化为流数据,也就是字节数组.\n  再通过流的传输,到达目的地后再转成(内容类型和编码)原始的数据\n  - 流是一个接口,不同的业务有不同的实现.\n  fs ReadStream\n  http.IncomingMessage 客户端请求或客户端响应request response\n\n## 直接读取\n```\nvar fs = require('fs');\nvar rs = fs.createReadStream('index.txt',{start:2,end:3});\n/**\n * 1.ReadStream 继承EventEmitter\n * 2.open 打开这个文件\n * 3.read 读到64k数据到buffer,发射data事件\n */\nrs.setEncoding('utf8');\nrs.on('data',function(data){\n    console.log(data);\n})\n```\n\n## 非流动模式读取\n```\n/**\n * 非流动模式 暂停模式\n */\nvar fs= require('fs');\nvar rs = fs.createReadStream('65.txt');\nvar arr = [];\nrs.on('readable',function(){\n    console.log('readable');\n    var data;\n    while(null != (data = rs.read())){ //从缓存区里读取1个字节\n        arr.push(data);\n        console.log(data.length);\n    }\n});\nrs.on('end',function(){\n    var b = Buffer.concat(arr);\n    console.log(b.length);\n})\n```\n\n## 写入文件\n```\nvar fs = require('fs');\nvar out = fs.createWriteStream('write.txt');\nfor(var i=0;i<100;i++){\n    var flag = out.write(i.toString());\n    console.log(flag);\n}\n//操作系统缓存区抽干的时候触发\nout.on('drain',function(){\n    console.log('drain');\n})\n```\n\n## copy文件\n```\nvar fs = require('fs');\nvar rs = fs.createReadStream('index.txt');\nvar ws = fs.createWriteStream('write.txt');\nrs.on('data',function(chunk){\n    if(ws.write(chunk)==false){\n        rs.pause();\n    }\n});\nws.on('drain',function(){\n    rs.resume();\n});\nrs.on('end',function(){\n    ws.end();\n});\n//pipe方法copy文件\nvar fs = require('fs');\nvar rs = fs.createReadStream('read.txt');\nvar ws = fs.createWriteStream('write.txt');\nrs.pipe(ws);\n```","source":"_posts/node-09stream.md","raw":"title: node-09stream\ndate: 2015-11-09 17:57:14\ntags:\n- node\n- stream\n- 学习笔记\ncategories: 笔记\n---\n\n> - 流是一组有序的,有起点和终点的数据传输手段\n  在网络中传输数据的时候,总是先将对象转化为流数据,也就是字节数组.\n  再通过流的传输,到达目的地后再转成(内容类型和编码)原始的数据\n  - 流是一个接口,不同的业务有不同的实现.\n  fs ReadStream\n  http.IncomingMessage 客户端请求或客户端响应request response\n\n## 直接读取\n```\nvar fs = require('fs');\nvar rs = fs.createReadStream('index.txt',{start:2,end:3});\n/**\n * 1.ReadStream 继承EventEmitter\n * 2.open 打开这个文件\n * 3.read 读到64k数据到buffer,发射data事件\n */\nrs.setEncoding('utf8');\nrs.on('data',function(data){\n    console.log(data);\n})\n```\n\n## 非流动模式读取\n```\n/**\n * 非流动模式 暂停模式\n */\nvar fs= require('fs');\nvar rs = fs.createReadStream('65.txt');\nvar arr = [];\nrs.on('readable',function(){\n    console.log('readable');\n    var data;\n    while(null != (data = rs.read())){ //从缓存区里读取1个字节\n        arr.push(data);\n        console.log(data.length);\n    }\n});\nrs.on('end',function(){\n    var b = Buffer.concat(arr);\n    console.log(b.length);\n})\n```\n\n## 写入文件\n```\nvar fs = require('fs');\nvar out = fs.createWriteStream('write.txt');\nfor(var i=0;i<100;i++){\n    var flag = out.write(i.toString());\n    console.log(flag);\n}\n//操作系统缓存区抽干的时候触发\nout.on('drain',function(){\n    console.log('drain');\n})\n```\n\n## copy文件\n```\nvar fs = require('fs');\nvar rs = fs.createReadStream('index.txt');\nvar ws = fs.createWriteStream('write.txt');\nrs.on('data',function(chunk){\n    if(ws.write(chunk)==false){\n        rs.pause();\n    }\n});\nws.on('drain',function(){\n    rs.resume();\n});\nrs.on('end',function(){\n    ws.end();\n});\n//pipe方法copy文件\nvar fs = require('fs');\nvar rs = fs.createReadStream('read.txt');\nvar ws = fs.createWriteStream('write.txt');\nrs.pipe(ws);\n```","slug":"node-09stream","published":1,"updated":"2015-11-10T02:25:32.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8cq000oe4gjunmwxxm7","content":"<blockquote>\n<ul>\n<li>流是一组有序的,有起点和终点的数据传输手段<br>在网络中传输数据的时候,总是先将对象转化为流数据,也就是字节数组.<br>再通过流的传输,到达目的地后再转成(内容类型和编码)原始的数据<ul>\n<li>流是一个接口,不同的业务有不同的实现.<br>fs ReadStream<br>http.IncomingMessage 客户端请求或客户端响应request response</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"直接读取\"><a href=\"#直接读取\" class=\"headerlink\" title=\"直接读取\"></a>直接读取</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var rs = fs.createReadStream(&apos;index.txt&apos;,&#123;start:2,end:3&#125;);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 1.ReadStream 继承EventEmitter</span><br><span class=\"line\"> * 2.open 打开这个文件</span><br><span class=\"line\"> * 3.read 读到64k数据到buffer,发射data事件</span><br><span class=\"line\"> */</span><br><span class=\"line\">rs.setEncoding(&apos;utf8&apos;);</span><br><span class=\"line\">rs.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">    console.log(data);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"非流动模式读取\"><a href=\"#非流动模式读取\" class=\"headerlink\" title=\"非流动模式读取\"></a>非流动模式读取</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 非流动模式 暂停模式</span><br><span class=\"line\"> */</span><br><span class=\"line\">var fs= require(&apos;fs&apos;);</span><br><span class=\"line\">var rs = fs.createReadStream(&apos;65.txt&apos;);</span><br><span class=\"line\">var arr = [];</span><br><span class=\"line\">rs.on(&apos;readable&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;readable&apos;);</span><br><span class=\"line\">    var data;</span><br><span class=\"line\">    while(null != (data = rs.read()))&#123; //从缓存区里读取1个字节</span><br><span class=\"line\">        arr.push(data);</span><br><span class=\"line\">        console.log(data.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">rs.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">    var b = Buffer.concat(arr);</span><br><span class=\"line\">    console.log(b.length);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var out = fs.createWriteStream(&apos;write.txt&apos;);</span><br><span class=\"line\">for(var i=0;i&lt;100;i++)&#123;</span><br><span class=\"line\">    var flag = out.write(i.toString());</span><br><span class=\"line\">    console.log(flag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//操作系统缓存区抽干的时候触发</span><br><span class=\"line\">out.on(&apos;drain&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;drain&apos;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"copy文件\"><a href=\"#copy文件\" class=\"headerlink\" title=\"copy文件\"></a>copy文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var rs = fs.createReadStream(&apos;index.txt&apos;);</span><br><span class=\"line\">var ws = fs.createWriteStream(&apos;write.txt&apos;);</span><br><span class=\"line\">rs.on(&apos;data&apos;,function(chunk)&#123;</span><br><span class=\"line\">    if(ws.write(chunk)==false)&#123;</span><br><span class=\"line\">        rs.pause();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ws.on(&apos;drain&apos;,function()&#123;</span><br><span class=\"line\">    rs.resume();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">rs.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">    ws.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//pipe方法copy文件</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var rs = fs.createReadStream(&apos;read.txt&apos;);</span><br><span class=\"line\">var ws = fs.createWriteStream(&apos;write.txt&apos;);</span><br><span class=\"line\">rs.pipe(ws);</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<blockquote>\n<ul>\n<li>流是一组有序的,有起点和终点的数据传输手段<br>在网络中传输数据的时候,总是先将对象转化为流数据,也就是字节数组.<br>再通过流的传输,到达目的地后再转成(内容类型和编码)原始的数据<ul>\n<li>流是一个接口,不同的业务有不同的实现.<br>fs ReadStream<br>http.IncomingMessage 客户端请求或客户端响应request response</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"直接读取\"><a href=\"#直接读取\" class=\"headerlink\" title=\"直接读取\"></a>直接读取</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var rs = fs.createReadStream(&apos;index.txt&apos;,&#123;start:2,end:3&#125;);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 1.ReadStream 继承EventEmitter</span><br><span class=\"line\"> * 2.open 打开这个文件</span><br><span class=\"line\"> * 3.read 读到64k数据到buffer,发射data事件</span><br><span class=\"line\"> */</span><br><span class=\"line\">rs.setEncoding(&apos;utf8&apos;);</span><br><span class=\"line\">rs.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">    console.log(data);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"非流动模式读取\"><a href=\"#非流动模式读取\" class=\"headerlink\" title=\"非流动模式读取\"></a>非流动模式读取</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 非流动模式 暂停模式</span><br><span class=\"line\"> */</span><br><span class=\"line\">var fs= require(&apos;fs&apos;);</span><br><span class=\"line\">var rs = fs.createReadStream(&apos;65.txt&apos;);</span><br><span class=\"line\">var arr = [];</span><br><span class=\"line\">rs.on(&apos;readable&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;readable&apos;);</span><br><span class=\"line\">    var data;</span><br><span class=\"line\">    while(null != (data = rs.read()))&#123; //从缓存区里读取1个字节</span><br><span class=\"line\">        arr.push(data);</span><br><span class=\"line\">        console.log(data.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">rs.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">    var b = Buffer.concat(arr);</span><br><span class=\"line\">    console.log(b.length);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var out = fs.createWriteStream(&apos;write.txt&apos;);</span><br><span class=\"line\">for(var i=0;i&lt;100;i++)&#123;</span><br><span class=\"line\">    var flag = out.write(i.toString());</span><br><span class=\"line\">    console.log(flag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//操作系统缓存区抽干的时候触发</span><br><span class=\"line\">out.on(&apos;drain&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;drain&apos;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"copy文件\"><a href=\"#copy文件\" class=\"headerlink\" title=\"copy文件\"></a>copy文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var rs = fs.createReadStream(&apos;index.txt&apos;);</span><br><span class=\"line\">var ws = fs.createWriteStream(&apos;write.txt&apos;);</span><br><span class=\"line\">rs.on(&apos;data&apos;,function(chunk)&#123;</span><br><span class=\"line\">    if(ws.write(chunk)==false)&#123;</span><br><span class=\"line\">        rs.pause();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ws.on(&apos;drain&apos;,function()&#123;</span><br><span class=\"line\">    rs.resume();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">rs.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">    ws.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//pipe方法copy文件</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var rs = fs.createReadStream(&apos;read.txt&apos;);</span><br><span class=\"line\">var ws = fs.createWriteStream(&apos;write.txt&apos;);</span><br><span class=\"line\">rs.pipe(ws);</span><br></pre></td></tr></table></figure>"},{"title":"node-07npm","date":"2015-11-09T07:07:44.000Z","_content":"\n# 模块管理\n## 模块的安装\n- 本地安装\nnpm install mime\n- 全局安装\nnpm install mime -g\n\n## 创建自己的模块并发布\n```\nmkdir gaoquan\ncd gaoquan\nnpm init\n创建index.js文件\nnpm publish 发布npm\n```\n\n## 搜索项目\nnpm search xxx\n\n## 查看项目的信息\nnpm view xxx\n\n## 查看全局安装目录\nnpm root -g\n\n## 配置文件\n### 用户的配置\nC:\\Users\\Administrator\\npmrc\n### 全局配置\nC:\\Program File\\nodejs\\node_modules\\npm\\npmrc\nprefix=${APPDATA}\\npm\nnpm config set prefix \"d:\\\"\n\n### 查看本地安装的所有模块\nnpm list\nnpm list -g\n\n### 取消本地安装的模块\nnpm uninstall xxx\n\n### 更新本地安装的所有模块\nnpm update\n\n### 下载指定版本的模块\nnpm install xxx@version\n\n### 保存所有记录\ndoskey /history\n","source":"_posts/node-07npm.md","raw":"title: node-07npm\ndate: 2015-11-09 15:07:44\ntags:\n- node\n- npm\n- 学习笔记\ncategories: 笔记\n---\n\n# 模块管理\n## 模块的安装\n- 本地安装\nnpm install mime\n- 全局安装\nnpm install mime -g\n\n## 创建自己的模块并发布\n```\nmkdir gaoquan\ncd gaoquan\nnpm init\n创建index.js文件\nnpm publish 发布npm\n```\n\n## 搜索项目\nnpm search xxx\n\n## 查看项目的信息\nnpm view xxx\n\n## 查看全局安装目录\nnpm root -g\n\n## 配置文件\n### 用户的配置\nC:\\Users\\Administrator\\npmrc\n### 全局配置\nC:\\Program File\\nodejs\\node_modules\\npm\\npmrc\nprefix=${APPDATA}\\npm\nnpm config set prefix \"d:\\\"\n\n### 查看本地安装的所有模块\nnpm list\nnpm list -g\n\n### 取消本地安装的模块\nnpm uninstall xxx\n\n### 更新本地安装的所有模块\nnpm update\n\n### 下载指定版本的模块\nnpm install xxx@version\n\n### 保存所有记录\ndoskey /history\n","slug":"node-07npm","published":1,"updated":"2015-11-09T07:33:37.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8cw000re4gjr54sxi4e","content":"<h1 id=\"模块管理\"><a href=\"#模块管理\" class=\"headerlink\" title=\"模块管理\"></a>模块管理</h1><h2 id=\"模块的安装\"><a href=\"#模块的安装\" class=\"headerlink\" title=\"模块的安装\"></a>模块的安装</h2><ul>\n<li>本地安装<br>npm install mime</li>\n<li>全局安装<br>npm install mime -g</li>\n</ul>\n<h2 id=\"创建自己的模块并发布\"><a href=\"#创建自己的模块并发布\" class=\"headerlink\" title=\"创建自己的模块并发布\"></a>创建自己的模块并发布</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir gaoquan</span><br><span class=\"line\">cd gaoquan</span><br><span class=\"line\">npm init</span><br><span class=\"line\">创建index.js文件</span><br><span class=\"line\">npm publish 发布npm</span><br></pre></td></tr></table></figure>\n<h2 id=\"搜索项目\"><a href=\"#搜索项目\" class=\"headerlink\" title=\"搜索项目\"></a>搜索项目</h2><p>npm search xxx</p>\n<h2 id=\"查看项目的信息\"><a href=\"#查看项目的信息\" class=\"headerlink\" title=\"查看项目的信息\"></a>查看项目的信息</h2><p>npm view xxx</p>\n<h2 id=\"查看全局安装目录\"><a href=\"#查看全局安装目录\" class=\"headerlink\" title=\"查看全局安装目录\"></a>查看全局安装目录</h2><p>npm root -g</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><h3 id=\"用户的配置\"><a href=\"#用户的配置\" class=\"headerlink\" title=\"用户的配置\"></a>用户的配置</h3><p>C:\\Users\\Administrator\\npmrc</p>\n<h3 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h3><p>C:\\Program File\\nodejs\\node_modules\\npm\\npmrc<br>prefix=${APPDATA}\\npm<br>npm config set prefix “d:\\”</p>\n<h3 id=\"查看本地安装的所有模块\"><a href=\"#查看本地安装的所有模块\" class=\"headerlink\" title=\"查看本地安装的所有模块\"></a>查看本地安装的所有模块</h3><p>npm list<br>npm list -g</p>\n<h3 id=\"取消本地安装的模块\"><a href=\"#取消本地安装的模块\" class=\"headerlink\" title=\"取消本地安装的模块\"></a>取消本地安装的模块</h3><p>npm uninstall xxx</p>\n<h3 id=\"更新本地安装的所有模块\"><a href=\"#更新本地安装的所有模块\" class=\"headerlink\" title=\"更新本地安装的所有模块\"></a>更新本地安装的所有模块</h3><p>npm update</p>\n<h3 id=\"下载指定版本的模块\"><a href=\"#下载指定版本的模块\" class=\"headerlink\" title=\"下载指定版本的模块\"></a>下载指定版本的模块</h3><p>npm install xxx@version</p>\n<h3 id=\"保存所有记录\"><a href=\"#保存所有记录\" class=\"headerlink\" title=\"保存所有记录\"></a>保存所有记录</h3><p>doskey /history</p>\n","excerpt":"","more":"<h1 id=\"模块管理\"><a href=\"#模块管理\" class=\"headerlink\" title=\"模块管理\"></a>模块管理</h1><h2 id=\"模块的安装\"><a href=\"#模块的安装\" class=\"headerlink\" title=\"模块的安装\"></a>模块的安装</h2><ul>\n<li>本地安装<br>npm install mime</li>\n<li>全局安装<br>npm install mime -g</li>\n</ul>\n<h2 id=\"创建自己的模块并发布\"><a href=\"#创建自己的模块并发布\" class=\"headerlink\" title=\"创建自己的模块并发布\"></a>创建自己的模块并发布</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir gaoquan</span><br><span class=\"line\">cd gaoquan</span><br><span class=\"line\">npm init</span><br><span class=\"line\">创建index.js文件</span><br><span class=\"line\">npm publish 发布npm</span><br></pre></td></tr></table></figure>\n<h2 id=\"搜索项目\"><a href=\"#搜索项目\" class=\"headerlink\" title=\"搜索项目\"></a>搜索项目</h2><p>npm search xxx</p>\n<h2 id=\"查看项目的信息\"><a href=\"#查看项目的信息\" class=\"headerlink\" title=\"查看项目的信息\"></a>查看项目的信息</h2><p>npm view xxx</p>\n<h2 id=\"查看全局安装目录\"><a href=\"#查看全局安装目录\" class=\"headerlink\" title=\"查看全局安装目录\"></a>查看全局安装目录</h2><p>npm root -g</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><h3 id=\"用户的配置\"><a href=\"#用户的配置\" class=\"headerlink\" title=\"用户的配置\"></a>用户的配置</h3><p>C:\\Users\\Administrator\\npmrc</p>\n<h3 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h3><p>C:\\Program File\\nodejs\\node_modules\\npm\\npmrc<br>prefix=${APPDATA}\\npm<br>npm config set prefix “d:\\”</p>\n<h3 id=\"查看本地安装的所有模块\"><a href=\"#查看本地安装的所有模块\" class=\"headerlink\" title=\"查看本地安装的所有模块\"></a>查看本地安装的所有模块</h3><p>npm list<br>npm list -g</p>\n<h3 id=\"取消本地安装的模块\"><a href=\"#取消本地安装的模块\" class=\"headerlink\" title=\"取消本地安装的模块\"></a>取消本地安装的模块</h3><p>npm uninstall xxx</p>\n<h3 id=\"更新本地安装的所有模块\"><a href=\"#更新本地安装的所有模块\" class=\"headerlink\" title=\"更新本地安装的所有模块\"></a>更新本地安装的所有模块</h3><p>npm update</p>\n<h3 id=\"下载指定版本的模块\"><a href=\"#下载指定版本的模块\" class=\"headerlink\" title=\"下载指定版本的模块\"></a>下载指定版本的模块</h3><p>npm install xxx@version</p>\n<h3 id=\"保存所有记录\"><a href=\"#保存所有记录\" class=\"headerlink\" title=\"保存所有记录\"></a>保存所有记录</h3><p>doskey /history</p>\n"},{"title":"node-10http","date":"2015-11-10T05:45:47.000Z","_content":"\n## http-server\n```\nvar http = require('http');\nvar url = require('url');// ctrl+ alt +下箭头\nvar util = require('util');\nvar querystring = require('querystring');\nvar server = http.createServer(function(req,res){\n    console.log(req.method);//获取请求的方法\n    console.log(req.headers);//获取请求头\n    console.log(req.url);//获取请求的url\n    //http://zfpx:12345@localhost:8080/index/index.html?name=zfpx#top\n    var urlObj = url.parse(\"http://zfpx:12345@localhost:8080\"+req.url,true);//url转成对象\n    var result = '';\n    req.on('data',function(data){\n        // console.log(data);\n        result+=data;\n    });\n    req.on('end',function(){\n        var contentType = req.headers['content-type'];//全部小写\n        if(contentType == 'json'){\n            var resObj = JSON.parse(result);\n        }else{\n            var resObj = querystring.parse(result);\n        }\n        res.statusCode = 200;//响应的状态码\n        res.setHeader('name','zfpx');\n        res.writeHead(200,{'name':'zfpx'});\n        res.end(JSON.stringify(resObj));\n    });\n\n    //res.end(util.inspect(urlObj.query));\n    //res.end('end');\n});\nserver.listen(8088);\nserver.on('connection',function(){\n    console.log('connection');\n});\nserver.on('error',function(err){\n    console.log('error');\n});\nserver.on('close',function(){\n    console.log('close');\n});\nserver.on('error',function(){\n    console.log('close');\n});\nserver.setTimeout(3000,function(){\n    console.log('timeout');\n});\n```\n\n## http-client\n```\nvar http = require('http');\n//http://zfpx:12345@localhost:8080/index/index.html?name=zfpx#top\nvar options = {\n    method:'post',\n    protocol: 'http:',\n    slashes: true,\n    auth: 'zfpx:12345',\n    host: 'localhost:8088',\n    port: '8088',\n    hostname: 'localhost',\n    hash: null,\n    search: '?name=zfpx',\n    query: { name: 'zfpx' },\n    pathname: '/index/index.html',\n    path: '/index/index.html?name=zfpx',\n    headers:{'connection':'close','Content-Type':'application/x-www-form-urlencoded'},//当提交表单的时候会把表单序列化成这种类型 url query查询字符是一样的\n    headers:{'Content-Type':'application/json'},\n    headers:{'Content-Type':'application/xml'},\n    href: 'http://zfpx:12345@localhost:8080/index/index.html?name=zfpx' }\n//res 是一个流对象 可读可写的流\n/**\n * 可读流\n *  data end事件\n * 可写流\n *  write end方法\n */\nvar request = http.request(options,function(res){\n    console.log(res.statusCode);\n    console.log(res.headers);\n    //读取可读流里的数据 readstream readable\n    res.setEncoding('utf8');\n    var result = '';\n    res.on('data',function(data){\n        // console.log(data);\n        result+=data;\n    });\n    res.on('end',function(){\n        console.log(result);\n    });\n})\n/*request.on('error',function(err){\n console.log(err);\n });*/\nrequest.write('age=7&name=zf');//向请求体里写数据\n//request.write(JSON.stringify({\"name\":\"zfpx\"}));//向请求体里写数据\nrequest.end();//真正发起向服务器的请求\n```\n\n## 注册登录并支持上传图片\n```\nvar http = require('http');\nvar url = require('url');\nvar querystring = require('querystring');\nvar fs = require('fs');\nvar formidable = require('formidable');\nvar mime = require('mime');\nvar useList = [];\n\nhttp.createServer(function(req,res){\n    var pathname = req.url;\n    if(pathname == '/favicon.ico'){\n        res.end('404');\n    }else if(pathname == '/'){\n        fs.createReadStream('./reg.html').pipe(res);\n    }else if(pathname == '/reg'){\n        var parser = new formidable.IncomingForm();\n        parser.parse(req,function(err,fields,files){\n            var userObj = {uname:fields.uname,upasswd:fields.upasswd};\n            useList.push(userObj);\n            fs.createReadStream(files.avatar.path).pipe(fs.createWriteStream('./upload/'+files.avatar.name));\n            //console.log(fields);\n            //console.log(files);\n            res.writeHead(200,{'Content-Type':'text/html;charset=utf-8'});\n            res.write(userObj.uname);\n            res.write(userObj.upasswd);\n            res.end('<img src=\"/upload/'+files.avatar.name+'\" />')\n        })\n    }else if(pathname == '/login'){\n        var result = '';\n        req.on('data',function(data){\n            result+=data;\n        });\n        req.on('end',function(){\n            var userObj = querystring.parse(result);\n            for(var i=0;i<useList.length;i++){\n                if(useList[i].uname == userObj.uname&&useList[i].upasswd == userObj.upasswd){\n                    res.setHeader('Content-Type','text/html;charset=utf-8');\n                    res.end('登录成功');\n                    return;\n                }\n            }\n            fs.createReadStream('./reg.html').pipe(res);\n        })\n    }else if(pathname.indexOf('/upload/')!=-1){\n        res.writeHead(200,{'Content-Type':mime.lookup(pathname)})\n        fs.createReadStream('.'+pathname).pipe(res);\n    }\n}).listen(8080);\n```","source":"_posts/node-10http.md","raw":"title: node-10http\ndate: 2015-11-10 13:45:47\ntags:\n- node\n- http\n- 学习笔记\ncategories: 笔记\n---\n\n## http-server\n```\nvar http = require('http');\nvar url = require('url');// ctrl+ alt +下箭头\nvar util = require('util');\nvar querystring = require('querystring');\nvar server = http.createServer(function(req,res){\n    console.log(req.method);//获取请求的方法\n    console.log(req.headers);//获取请求头\n    console.log(req.url);//获取请求的url\n    //http://zfpx:12345@localhost:8080/index/index.html?name=zfpx#top\n    var urlObj = url.parse(\"http://zfpx:12345@localhost:8080\"+req.url,true);//url转成对象\n    var result = '';\n    req.on('data',function(data){\n        // console.log(data);\n        result+=data;\n    });\n    req.on('end',function(){\n        var contentType = req.headers['content-type'];//全部小写\n        if(contentType == 'json'){\n            var resObj = JSON.parse(result);\n        }else{\n            var resObj = querystring.parse(result);\n        }\n        res.statusCode = 200;//响应的状态码\n        res.setHeader('name','zfpx');\n        res.writeHead(200,{'name':'zfpx'});\n        res.end(JSON.stringify(resObj));\n    });\n\n    //res.end(util.inspect(urlObj.query));\n    //res.end('end');\n});\nserver.listen(8088);\nserver.on('connection',function(){\n    console.log('connection');\n});\nserver.on('error',function(err){\n    console.log('error');\n});\nserver.on('close',function(){\n    console.log('close');\n});\nserver.on('error',function(){\n    console.log('close');\n});\nserver.setTimeout(3000,function(){\n    console.log('timeout');\n});\n```\n\n## http-client\n```\nvar http = require('http');\n//http://zfpx:12345@localhost:8080/index/index.html?name=zfpx#top\nvar options = {\n    method:'post',\n    protocol: 'http:',\n    slashes: true,\n    auth: 'zfpx:12345',\n    host: 'localhost:8088',\n    port: '8088',\n    hostname: 'localhost',\n    hash: null,\n    search: '?name=zfpx',\n    query: { name: 'zfpx' },\n    pathname: '/index/index.html',\n    path: '/index/index.html?name=zfpx',\n    headers:{'connection':'close','Content-Type':'application/x-www-form-urlencoded'},//当提交表单的时候会把表单序列化成这种类型 url query查询字符是一样的\n    headers:{'Content-Type':'application/json'},\n    headers:{'Content-Type':'application/xml'},\n    href: 'http://zfpx:12345@localhost:8080/index/index.html?name=zfpx' }\n//res 是一个流对象 可读可写的流\n/**\n * 可读流\n *  data end事件\n * 可写流\n *  write end方法\n */\nvar request = http.request(options,function(res){\n    console.log(res.statusCode);\n    console.log(res.headers);\n    //读取可读流里的数据 readstream readable\n    res.setEncoding('utf8');\n    var result = '';\n    res.on('data',function(data){\n        // console.log(data);\n        result+=data;\n    });\n    res.on('end',function(){\n        console.log(result);\n    });\n})\n/*request.on('error',function(err){\n console.log(err);\n });*/\nrequest.write('age=7&name=zf');//向请求体里写数据\n//request.write(JSON.stringify({\"name\":\"zfpx\"}));//向请求体里写数据\nrequest.end();//真正发起向服务器的请求\n```\n\n## 注册登录并支持上传图片\n```\nvar http = require('http');\nvar url = require('url');\nvar querystring = require('querystring');\nvar fs = require('fs');\nvar formidable = require('formidable');\nvar mime = require('mime');\nvar useList = [];\n\nhttp.createServer(function(req,res){\n    var pathname = req.url;\n    if(pathname == '/favicon.ico'){\n        res.end('404');\n    }else if(pathname == '/'){\n        fs.createReadStream('./reg.html').pipe(res);\n    }else if(pathname == '/reg'){\n        var parser = new formidable.IncomingForm();\n        parser.parse(req,function(err,fields,files){\n            var userObj = {uname:fields.uname,upasswd:fields.upasswd};\n            useList.push(userObj);\n            fs.createReadStream(files.avatar.path).pipe(fs.createWriteStream('./upload/'+files.avatar.name));\n            //console.log(fields);\n            //console.log(files);\n            res.writeHead(200,{'Content-Type':'text/html;charset=utf-8'});\n            res.write(userObj.uname);\n            res.write(userObj.upasswd);\n            res.end('<img src=\"/upload/'+files.avatar.name+'\" />')\n        })\n    }else if(pathname == '/login'){\n        var result = '';\n        req.on('data',function(data){\n            result+=data;\n        });\n        req.on('end',function(){\n            var userObj = querystring.parse(result);\n            for(var i=0;i<useList.length;i++){\n                if(useList[i].uname == userObj.uname&&useList[i].upasswd == userObj.upasswd){\n                    res.setHeader('Content-Type','text/html;charset=utf-8');\n                    res.end('登录成功');\n                    return;\n                }\n            }\n            fs.createReadStream('./reg.html').pipe(res);\n        })\n    }else if(pathname.indexOf('/upload/')!=-1){\n        res.writeHead(200,{'Content-Type':mime.lookup(pathname)})\n        fs.createReadStream('.'+pathname).pipe(res);\n    }\n}).listen(8080);\n```","slug":"node-10http","published":1,"updated":"2015-11-10T10:43:11.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8cz000ue4gj4rvg5qml","content":"<h2 id=\"http-server\"><a href=\"#http-server\" class=\"headerlink\" title=\"http-server\"></a>http-server</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);// ctrl+ alt +下箭头</span><br><span class=\"line\">var util = require(&apos;util&apos;);</span><br><span class=\"line\">var querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\">var server = http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    console.log(req.method);//获取请求的方法</span><br><span class=\"line\">    console.log(req.headers);//获取请求头</span><br><span class=\"line\">    console.log(req.url);//获取请求的url</span><br><span class=\"line\">    //http://zfpx:12345@localhost:8080/index/index.html?name=zfpx#top</span><br><span class=\"line\">    var urlObj = url.parse(&quot;http://zfpx:12345@localhost:8080&quot;+req.url,true);//url转成对象</span><br><span class=\"line\">    var result = &apos;&apos;;</span><br><span class=\"line\">    req.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">        // console.log(data);</span><br><span class=\"line\">        result+=data;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    req.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">        var contentType = req.headers[&apos;content-type&apos;];//全部小写</span><br><span class=\"line\">        if(contentType == &apos;json&apos;)&#123;</span><br><span class=\"line\">            var resObj = JSON.parse(result);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            var resObj = querystring.parse(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.statusCode = 200;//响应的状态码</span><br><span class=\"line\">        res.setHeader(&apos;name&apos;,&apos;zfpx&apos;);</span><br><span class=\"line\">        res.writeHead(200,&#123;&apos;name&apos;:&apos;zfpx&apos;&#125;);</span><br><span class=\"line\">        res.end(JSON.stringify(resObj));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //res.end(util.inspect(urlObj.query));</span><br><span class=\"line\">    //res.end(&apos;end&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8088);</span><br><span class=\"line\">server.on(&apos;connection&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;connection&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.on(&apos;error&apos;,function(err)&#123;</span><br><span class=\"line\">    console.log(&apos;error&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.on(&apos;close&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;close&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.on(&apos;error&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;close&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.setTimeout(3000,function()&#123;</span><br><span class=\"line\">    console.log(&apos;timeout&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"http-client\"><a href=\"#http-client\" class=\"headerlink\" title=\"http-client\"></a>http-client</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">//http://zfpx:12345@localhost:8080/index/index.html?name=zfpx#top</span><br><span class=\"line\">var options = &#123;</span><br><span class=\"line\">    method:&apos;post&apos;,</span><br><span class=\"line\">    protocol: &apos;http:&apos;,</span><br><span class=\"line\">    slashes: true,</span><br><span class=\"line\">    auth: &apos;zfpx:12345&apos;,</span><br><span class=\"line\">    host: &apos;localhost:8088&apos;,</span><br><span class=\"line\">    port: &apos;8088&apos;,</span><br><span class=\"line\">    hostname: &apos;localhost&apos;,</span><br><span class=\"line\">    hash: null,</span><br><span class=\"line\">    search: &apos;?name=zfpx&apos;,</span><br><span class=\"line\">    query: &#123; name: &apos;zfpx&apos; &#125;,</span><br><span class=\"line\">    pathname: &apos;/index/index.html&apos;,</span><br><span class=\"line\">    path: &apos;/index/index.html?name=zfpx&apos;,</span><br><span class=\"line\">    headers:&#123;&apos;connection&apos;:&apos;close&apos;,&apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded&apos;&#125;,//当提交表单的时候会把表单序列化成这种类型 url query查询字符是一样的</span><br><span class=\"line\">    headers:&#123;&apos;Content-Type&apos;:&apos;application/json&apos;&#125;,</span><br><span class=\"line\">    headers:&#123;&apos;Content-Type&apos;:&apos;application/xml&apos;&#125;,</span><br><span class=\"line\">    href: &apos;http://zfpx:12345@localhost:8080/index/index.html?name=zfpx&apos; &#125;</span><br><span class=\"line\">//res 是一个流对象 可读可写的流</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 可读流</span><br><span class=\"line\"> *  data end事件</span><br><span class=\"line\"> * 可写流</span><br><span class=\"line\"> *  write end方法</span><br><span class=\"line\"> */</span><br><span class=\"line\">var request = http.request(options,function(res)&#123;</span><br><span class=\"line\">    console.log(res.statusCode);</span><br><span class=\"line\">    console.log(res.headers);</span><br><span class=\"line\">    //读取可读流里的数据 readstream readable</span><br><span class=\"line\">    res.setEncoding(&apos;utf8&apos;);</span><br><span class=\"line\">    var result = &apos;&apos;;</span><br><span class=\"line\">    res.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">        // console.log(data);</span><br><span class=\"line\">        result+=data;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    res.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">        console.log(result);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">/*request.on(&apos;error&apos;,function(err)&#123;</span><br><span class=\"line\"> console.log(err);</span><br><span class=\"line\"> &#125;);*/</span><br><span class=\"line\">request.write(&apos;age=7&amp;name=zf&apos;);//向请求体里写数据</span><br><span class=\"line\">//request.write(JSON.stringify(&#123;&quot;name&quot;:&quot;zfpx&quot;&#125;));//向请求体里写数据</span><br><span class=\"line\">request.end();//真正发起向服务器的请求</span><br></pre></td></tr></table></figure>\n<h2 id=\"注册登录并支持上传图片\"><a href=\"#注册登录并支持上传图片\" class=\"headerlink\" title=\"注册登录并支持上传图片\"></a>注册登录并支持上传图片</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">var querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var formidable = require(&apos;formidable&apos;);</span><br><span class=\"line\">var mime = require(&apos;mime&apos;);</span><br><span class=\"line\">var useList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    var pathname = req.url;</span><br><span class=\"line\">    if(pathname == &apos;/favicon.ico&apos;)&#123;</span><br><span class=\"line\">        res.end(&apos;404&apos;);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/&apos;)&#123;</span><br><span class=\"line\">        fs.createReadStream(&apos;./reg.html&apos;).pipe(res);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/reg&apos;)&#123;</span><br><span class=\"line\">        var parser = new formidable.IncomingForm();</span><br><span class=\"line\">        parser.parse(req,function(err,fields,files)&#123;</span><br><span class=\"line\">            var userObj = &#123;uname:fields.uname,upasswd:fields.upasswd&#125;;</span><br><span class=\"line\">            useList.push(userObj);</span><br><span class=\"line\">            fs.createReadStream(files.avatar.path).pipe(fs.createWriteStream(&apos;./upload/&apos;+files.avatar.name));</span><br><span class=\"line\">            //console.log(fields);</span><br><span class=\"line\">            //console.log(files);</span><br><span class=\"line\">            res.writeHead(200,&#123;&apos;Content-Type&apos;:&apos;text/html;charset=utf-8&apos;&#125;);</span><br><span class=\"line\">            res.write(userObj.uname);</span><br><span class=\"line\">            res.write(userObj.upasswd);</span><br><span class=\"line\">            res.end(&apos;&lt;img src=&quot;/upload/&apos;+files.avatar.name+&apos;&quot; /&gt;&apos;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/login&apos;)&#123;</span><br><span class=\"line\">        var result = &apos;&apos;;</span><br><span class=\"line\">        req.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">            result+=data;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        req.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">            var userObj = querystring.parse(result);</span><br><span class=\"line\">            for(var i=0;i&lt;useList.length;i++)&#123;</span><br><span class=\"line\">                if(useList[i].uname == userObj.uname&amp;&amp;useList[i].upasswd == userObj.upasswd)&#123;</span><br><span class=\"line\">                    res.setHeader(&apos;Content-Type&apos;,&apos;text/html;charset=utf-8&apos;);</span><br><span class=\"line\">                    res.end(&apos;登录成功&apos;);</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fs.createReadStream(&apos;./reg.html&apos;).pipe(res);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;else if(pathname.indexOf(&apos;/upload/&apos;)!=-1)&#123;</span><br><span class=\"line\">        res.writeHead(200,&#123;&apos;Content-Type&apos;:mime.lookup(pathname)&#125;)</span><br><span class=\"line\">        fs.createReadStream(&apos;.&apos;+pathname).pipe(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"http-server\"><a href=\"#http-server\" class=\"headerlink\" title=\"http-server\"></a>http-server</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);// ctrl+ alt +下箭头</span><br><span class=\"line\">var util = require(&apos;util&apos;);</span><br><span class=\"line\">var querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\">var server = http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    console.log(req.method);//获取请求的方法</span><br><span class=\"line\">    console.log(req.headers);//获取请求头</span><br><span class=\"line\">    console.log(req.url);//获取请求的url</span><br><span class=\"line\">    //http://zfpx:12345@localhost:8080/index/index.html?name=zfpx#top</span><br><span class=\"line\">    var urlObj = url.parse(&quot;http://zfpx:12345@localhost:8080&quot;+req.url,true);//url转成对象</span><br><span class=\"line\">    var result = &apos;&apos;;</span><br><span class=\"line\">    req.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">        // console.log(data);</span><br><span class=\"line\">        result+=data;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    req.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">        var contentType = req.headers[&apos;content-type&apos;];//全部小写</span><br><span class=\"line\">        if(contentType == &apos;json&apos;)&#123;</span><br><span class=\"line\">            var resObj = JSON.parse(result);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            var resObj = querystring.parse(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.statusCode = 200;//响应的状态码</span><br><span class=\"line\">        res.setHeader(&apos;name&apos;,&apos;zfpx&apos;);</span><br><span class=\"line\">        res.writeHead(200,&#123;&apos;name&apos;:&apos;zfpx&apos;&#125;);</span><br><span class=\"line\">        res.end(JSON.stringify(resObj));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //res.end(util.inspect(urlObj.query));</span><br><span class=\"line\">    //res.end(&apos;end&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8088);</span><br><span class=\"line\">server.on(&apos;connection&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;connection&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.on(&apos;error&apos;,function(err)&#123;</span><br><span class=\"line\">    console.log(&apos;error&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.on(&apos;close&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;close&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.on(&apos;error&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;close&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.setTimeout(3000,function()&#123;</span><br><span class=\"line\">    console.log(&apos;timeout&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"http-client\"><a href=\"#http-client\" class=\"headerlink\" title=\"http-client\"></a>http-client</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">//http://zfpx:12345@localhost:8080/index/index.html?name=zfpx#top</span><br><span class=\"line\">var options = &#123;</span><br><span class=\"line\">    method:&apos;post&apos;,</span><br><span class=\"line\">    protocol: &apos;http:&apos;,</span><br><span class=\"line\">    slashes: true,</span><br><span class=\"line\">    auth: &apos;zfpx:12345&apos;,</span><br><span class=\"line\">    host: &apos;localhost:8088&apos;,</span><br><span class=\"line\">    port: &apos;8088&apos;,</span><br><span class=\"line\">    hostname: &apos;localhost&apos;,</span><br><span class=\"line\">    hash: null,</span><br><span class=\"line\">    search: &apos;?name=zfpx&apos;,</span><br><span class=\"line\">    query: &#123; name: &apos;zfpx&apos; &#125;,</span><br><span class=\"line\">    pathname: &apos;/index/index.html&apos;,</span><br><span class=\"line\">    path: &apos;/index/index.html?name=zfpx&apos;,</span><br><span class=\"line\">    headers:&#123;&apos;connection&apos;:&apos;close&apos;,&apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded&apos;&#125;,//当提交表单的时候会把表单序列化成这种类型 url query查询字符是一样的</span><br><span class=\"line\">    headers:&#123;&apos;Content-Type&apos;:&apos;application/json&apos;&#125;,</span><br><span class=\"line\">    headers:&#123;&apos;Content-Type&apos;:&apos;application/xml&apos;&#125;,</span><br><span class=\"line\">    href: &apos;http://zfpx:12345@localhost:8080/index/index.html?name=zfpx&apos; &#125;</span><br><span class=\"line\">//res 是一个流对象 可读可写的流</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 可读流</span><br><span class=\"line\"> *  data end事件</span><br><span class=\"line\"> * 可写流</span><br><span class=\"line\"> *  write end方法</span><br><span class=\"line\"> */</span><br><span class=\"line\">var request = http.request(options,function(res)&#123;</span><br><span class=\"line\">    console.log(res.statusCode);</span><br><span class=\"line\">    console.log(res.headers);</span><br><span class=\"line\">    //读取可读流里的数据 readstream readable</span><br><span class=\"line\">    res.setEncoding(&apos;utf8&apos;);</span><br><span class=\"line\">    var result = &apos;&apos;;</span><br><span class=\"line\">    res.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">        // console.log(data);</span><br><span class=\"line\">        result+=data;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    res.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">        console.log(result);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">/*request.on(&apos;error&apos;,function(err)&#123;</span><br><span class=\"line\"> console.log(err);</span><br><span class=\"line\"> &#125;);*/</span><br><span class=\"line\">request.write(&apos;age=7&amp;name=zf&apos;);//向请求体里写数据</span><br><span class=\"line\">//request.write(JSON.stringify(&#123;&quot;name&quot;:&quot;zfpx&quot;&#125;));//向请求体里写数据</span><br><span class=\"line\">request.end();//真正发起向服务器的请求</span><br></pre></td></tr></table></figure>\n<h2 id=\"注册登录并支持上传图片\"><a href=\"#注册登录并支持上传图片\" class=\"headerlink\" title=\"注册登录并支持上传图片\"></a>注册登录并支持上传图片</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">var querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var formidable = require(&apos;formidable&apos;);</span><br><span class=\"line\">var mime = require(&apos;mime&apos;);</span><br><span class=\"line\">var useList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    var pathname = req.url;</span><br><span class=\"line\">    if(pathname == &apos;/favicon.ico&apos;)&#123;</span><br><span class=\"line\">        res.end(&apos;404&apos;);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/&apos;)&#123;</span><br><span class=\"line\">        fs.createReadStream(&apos;./reg.html&apos;).pipe(res);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/reg&apos;)&#123;</span><br><span class=\"line\">        var parser = new formidable.IncomingForm();</span><br><span class=\"line\">        parser.parse(req,function(err,fields,files)&#123;</span><br><span class=\"line\">            var userObj = &#123;uname:fields.uname,upasswd:fields.upasswd&#125;;</span><br><span class=\"line\">            useList.push(userObj);</span><br><span class=\"line\">            fs.createReadStream(files.avatar.path).pipe(fs.createWriteStream(&apos;./upload/&apos;+files.avatar.name));</span><br><span class=\"line\">            //console.log(fields);</span><br><span class=\"line\">            //console.log(files);</span><br><span class=\"line\">            res.writeHead(200,&#123;&apos;Content-Type&apos;:&apos;text/html;charset=utf-8&apos;&#125;);</span><br><span class=\"line\">            res.write(userObj.uname);</span><br><span class=\"line\">            res.write(userObj.upasswd);</span><br><span class=\"line\">            res.end(&apos;&lt;img src=&quot;/upload/&apos;+files.avatar.name+&apos;&quot; /&gt;&apos;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/login&apos;)&#123;</span><br><span class=\"line\">        var result = &apos;&apos;;</span><br><span class=\"line\">        req.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">            result+=data;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        req.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">            var userObj = querystring.parse(result);</span><br><span class=\"line\">            for(var i=0;i&lt;useList.length;i++)&#123;</span><br><span class=\"line\">                if(useList[i].uname == userObj.uname&amp;&amp;useList[i].upasswd == userObj.upasswd)&#123;</span><br><span class=\"line\">                    res.setHeader(&apos;Content-Type&apos;,&apos;text/html;charset=utf-8&apos;);</span><br><span class=\"line\">                    res.end(&apos;登录成功&apos;);</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fs.createReadStream(&apos;./reg.html&apos;).pipe(res);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;else if(pathname.indexOf(&apos;/upload/&apos;)!=-1)&#123;</span><br><span class=\"line\">        res.writeHead(200,&#123;&apos;Content-Type&apos;:mime.lookup(pathname)&#125;)</span><br><span class=\"line\">        fs.createReadStream(&apos;.&apos;+pathname).pipe(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>"},{"title":"node-08path","date":"2015-11-09T08:32:21.000Z","_content":"\n# 级联创建和删除目录\n```\nvar fs = require('fs');\nvar path = require('path');\nfs.mkdirP = function(dir){\n    var paths = dir.split('/'); //本操作系统文件目录分隔符\n    for(var i=0;i<paths.length;i++){\n        var currentPath = paths.slice(0,i+1).join('/');\n        if(!fs.existsSync(currentPath)){\n            fs.mkdirSync(currentPath);\n        }\n    }\n}\nfs.rmdirP = function(dir){\n    var paths = dir.split('/');\n    for(var i=paths.length;i>0;i--){\n        var currentPath = paths.slice(0,i).join('/');\n        console.log(currentPath);\n        if(fs.existsSync(currentPath)){\n            fs.rmdir(currentPath);\n        }\n    }\n}\nfs.mkdirP('1/1/1',function(err){\n    if(err){\n        console.log(err);\n    }else{\n        console.log('创建目录成功');\n    }\n});\nfs.rmdirP('1/1/1');\n```\n\n# fs的方法\n- fs.stat\n```\nfs.stat(path,function(err,stat){\n    console.log(stat.size);\n})\n```\n- fs.exists 判断文件是否存在\n- fs.realpath 取得文件的绝对路径\n- fs.rename 对文件进行重命名或者移动\n- fs.truncate 对文件进行截断\n```\nfs.truncate(filename,5,function(err){ ... })\n```\n\n# fs的watchfile\n```\nvar fs = require('fs');\n// curr 当前的状态\n// prev 修改之前的状态\nvar func1 = function(curr,prev){\n    if(Date.parse(prev.ctime) == 0){\n        console.log('文件被创建');\n    }else if(Date.parse(curr.ctime) == 0){\n        conosle.log('文件被删除');\n    }else{\n        console.log('文件被修改了');\n    }\n}\nfs.watchFile('write.txt',{interval:1000},func1);\n```\n\n# path的一些方法\n## path.dirname(...) //取得参数的父目录\n## path.basename(...) //取得文件名\n## path.basename('write.txt','.txt') //只取得文件名,去除后缀\n## path.extname(...) //取得扩展名\n## path.sep //路径分隔符\n## path.delimiter //环境变量路径分隔符\n","source":"_posts/node-08path.md","raw":"title: node-08path\ndate: 2015-11-09 16:32:21\ntags:\n- node\n- path\n- 学习笔记\ncategories: 笔记\n---\n\n# 级联创建和删除目录\n```\nvar fs = require('fs');\nvar path = require('path');\nfs.mkdirP = function(dir){\n    var paths = dir.split('/'); //本操作系统文件目录分隔符\n    for(var i=0;i<paths.length;i++){\n        var currentPath = paths.slice(0,i+1).join('/');\n        if(!fs.existsSync(currentPath)){\n            fs.mkdirSync(currentPath);\n        }\n    }\n}\nfs.rmdirP = function(dir){\n    var paths = dir.split('/');\n    for(var i=paths.length;i>0;i--){\n        var currentPath = paths.slice(0,i).join('/');\n        console.log(currentPath);\n        if(fs.existsSync(currentPath)){\n            fs.rmdir(currentPath);\n        }\n    }\n}\nfs.mkdirP('1/1/1',function(err){\n    if(err){\n        console.log(err);\n    }else{\n        console.log('创建目录成功');\n    }\n});\nfs.rmdirP('1/1/1');\n```\n\n# fs的方法\n- fs.stat\n```\nfs.stat(path,function(err,stat){\n    console.log(stat.size);\n})\n```\n- fs.exists 判断文件是否存在\n- fs.realpath 取得文件的绝对路径\n- fs.rename 对文件进行重命名或者移动\n- fs.truncate 对文件进行截断\n```\nfs.truncate(filename,5,function(err){ ... })\n```\n\n# fs的watchfile\n```\nvar fs = require('fs');\n// curr 当前的状态\n// prev 修改之前的状态\nvar func1 = function(curr,prev){\n    if(Date.parse(prev.ctime) == 0){\n        console.log('文件被创建');\n    }else if(Date.parse(curr.ctime) == 0){\n        conosle.log('文件被删除');\n    }else{\n        console.log('文件被修改了');\n    }\n}\nfs.watchFile('write.txt',{interval:1000},func1);\n```\n\n# path的一些方法\n## path.dirname(...) //取得参数的父目录\n## path.basename(...) //取得文件名\n## path.basename('write.txt','.txt') //只取得文件名,去除后缀\n## path.extname(...) //取得扩展名\n## path.sep //路径分隔符\n## path.delimiter //环境变量路径分隔符\n","slug":"node-08path","published":1,"updated":"2015-11-09T09:55:15.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8da000ye4gju22jy4tb","content":"<h1 id=\"级联创建和删除目录\"><a href=\"#级联创建和删除目录\" class=\"headerlink\" title=\"级联创建和删除目录\"></a>级联创建和删除目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">fs.mkdirP = function(dir)&#123;</span><br><span class=\"line\">    var paths = dir.split(&apos;/&apos;); //本操作系统文件目录分隔符</span><br><span class=\"line\">    for(var i=0;i&lt;paths.length;i++)&#123;</span><br><span class=\"line\">        var currentPath = paths.slice(0,i+1).join(&apos;/&apos;);</span><br><span class=\"line\">        if(!fs.existsSync(currentPath))&#123;</span><br><span class=\"line\">            fs.mkdirSync(currentPath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fs.rmdirP = function(dir)&#123;</span><br><span class=\"line\">    var paths = dir.split(&apos;/&apos;);</span><br><span class=\"line\">    for(var i=paths.length;i&gt;0;i--)&#123;</span><br><span class=\"line\">        var currentPath = paths.slice(0,i).join(&apos;/&apos;);</span><br><span class=\"line\">        console.log(currentPath);</span><br><span class=\"line\">        if(fs.existsSync(currentPath))&#123;</span><br><span class=\"line\">            fs.rmdir(currentPath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fs.mkdirP(&apos;1/1/1&apos;,function(err)&#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.log(err);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        console.log(&apos;创建目录成功&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">fs.rmdirP(&apos;1/1/1&apos;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"fs的方法\"><a href=\"#fs的方法\" class=\"headerlink\" title=\"fs的方法\"></a>fs的方法</h1><ul>\n<li><p>fs.stat</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.stat(path,function(err,stat)&#123;</span><br><span class=\"line\">    console.log(stat.size);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fs.exists 判断文件是否存在</p>\n</li>\n<li>fs.realpath 取得文件的绝对路径</li>\n<li>fs.rename 对文件进行重命名或者移动</li>\n<li>fs.truncate 对文件进行截断<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.truncate(filename,5,function(err)&#123; ... &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"fs的watchfile\"><a href=\"#fs的watchfile\" class=\"headerlink\" title=\"fs的watchfile\"></a>fs的watchfile</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">// curr 当前的状态</span><br><span class=\"line\">// prev 修改之前的状态</span><br><span class=\"line\">var func1 = function(curr,prev)&#123;</span><br><span class=\"line\">    if(Date.parse(prev.ctime) == 0)&#123;</span><br><span class=\"line\">        console.log(&apos;文件被创建&apos;);</span><br><span class=\"line\">    &#125;else if(Date.parse(curr.ctime) == 0)&#123;</span><br><span class=\"line\">        conosle.log(&apos;文件被删除&apos;);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        console.log(&apos;文件被修改了&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fs.watchFile(&apos;write.txt&apos;,&#123;interval:1000&#125;,func1);</span><br></pre></td></tr></table></figure>\n<h1 id=\"path的一些方法\"><a href=\"#path的一些方法\" class=\"headerlink\" title=\"path的一些方法\"></a>path的一些方法</h1><h2 id=\"path-dirname-…-取得参数的父目录\"><a href=\"#path-dirname-…-取得参数的父目录\" class=\"headerlink\" title=\"path.dirname(…) //取得参数的父目录\"></a>path.dirname(…) //取得参数的父目录</h2><h2 id=\"path-basename-…-取得文件名\"><a href=\"#path-basename-…-取得文件名\" class=\"headerlink\" title=\"path.basename(…) //取得文件名\"></a>path.basename(…) //取得文件名</h2><h2 id=\"path-basename-‘write-txt’-’-txt’-只取得文件名-去除后缀\"><a href=\"#path-basename-‘write-txt’-’-txt’-只取得文件名-去除后缀\" class=\"headerlink\" title=\"path.basename(‘write.txt’,’.txt’) //只取得文件名,去除后缀\"></a>path.basename(‘write.txt’,’.txt’) //只取得文件名,去除后缀</h2><h2 id=\"path-extname-…-取得扩展名\"><a href=\"#path-extname-…-取得扩展名\" class=\"headerlink\" title=\"path.extname(…) //取得扩展名\"></a>path.extname(…) //取得扩展名</h2><h2 id=\"path-sep-路径分隔符\"><a href=\"#path-sep-路径分隔符\" class=\"headerlink\" title=\"path.sep //路径分隔符\"></a>path.sep //路径分隔符</h2><h2 id=\"path-delimiter-环境变量路径分隔符\"><a href=\"#path-delimiter-环境变量路径分隔符\" class=\"headerlink\" title=\"path.delimiter //环境变量路径分隔符\"></a>path.delimiter //环境变量路径分隔符</h2>","excerpt":"","more":"<h1 id=\"级联创建和删除目录\"><a href=\"#级联创建和删除目录\" class=\"headerlink\" title=\"级联创建和删除目录\"></a>级联创建和删除目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">fs.mkdirP = function(dir)&#123;</span><br><span class=\"line\">    var paths = dir.split(&apos;/&apos;); //本操作系统文件目录分隔符</span><br><span class=\"line\">    for(var i=0;i&lt;paths.length;i++)&#123;</span><br><span class=\"line\">        var currentPath = paths.slice(0,i+1).join(&apos;/&apos;);</span><br><span class=\"line\">        if(!fs.existsSync(currentPath))&#123;</span><br><span class=\"line\">            fs.mkdirSync(currentPath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fs.rmdirP = function(dir)&#123;</span><br><span class=\"line\">    var paths = dir.split(&apos;/&apos;);</span><br><span class=\"line\">    for(var i=paths.length;i&gt;0;i--)&#123;</span><br><span class=\"line\">        var currentPath = paths.slice(0,i).join(&apos;/&apos;);</span><br><span class=\"line\">        console.log(currentPath);</span><br><span class=\"line\">        if(fs.existsSync(currentPath))&#123;</span><br><span class=\"line\">            fs.rmdir(currentPath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fs.mkdirP(&apos;1/1/1&apos;,function(err)&#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.log(err);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        console.log(&apos;创建目录成功&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">fs.rmdirP(&apos;1/1/1&apos;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"fs的方法\"><a href=\"#fs的方法\" class=\"headerlink\" title=\"fs的方法\"></a>fs的方法</h1><ul>\n<li><p>fs.stat</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.stat(path,function(err,stat)&#123;</span><br><span class=\"line\">    console.log(stat.size);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fs.exists 判断文件是否存在</p>\n</li>\n<li>fs.realpath 取得文件的绝对路径</li>\n<li>fs.rename 对文件进行重命名或者移动</li>\n<li>fs.truncate 对文件进行截断<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.truncate(filename,5,function(err)&#123; ... &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"fs的watchfile\"><a href=\"#fs的watchfile\" class=\"headerlink\" title=\"fs的watchfile\"></a>fs的watchfile</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">// curr 当前的状态</span><br><span class=\"line\">// prev 修改之前的状态</span><br><span class=\"line\">var func1 = function(curr,prev)&#123;</span><br><span class=\"line\">    if(Date.parse(prev.ctime) == 0)&#123;</span><br><span class=\"line\">        console.log(&apos;文件被创建&apos;);</span><br><span class=\"line\">    &#125;else if(Date.parse(curr.ctime) == 0)&#123;</span><br><span class=\"line\">        conosle.log(&apos;文件被删除&apos;);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        console.log(&apos;文件被修改了&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fs.watchFile(&apos;write.txt&apos;,&#123;interval:1000&#125;,func1);</span><br></pre></td></tr></table></figure>\n<h1 id=\"path的一些方法\"><a href=\"#path的一些方法\" class=\"headerlink\" title=\"path的一些方法\"></a>path的一些方法</h1><h2 id=\"path-dirname-…-取得参数的父目录\"><a href=\"#path-dirname-…-取得参数的父目录\" class=\"headerlink\" title=\"path.dirname(…) //取得参数的父目录\"></a>path.dirname(…) //取得参数的父目录</h2><h2 id=\"path-basename-…-取得文件名\"><a href=\"#path-basename-…-取得文件名\" class=\"headerlink\" title=\"path.basename(…) //取得文件名\"></a>path.basename(…) //取得文件名</h2><h2 id=\"path-basename-‘write-txt’-’-txt’-只取得文件名-去除后缀\"><a href=\"#path-basename-‘write-txt’-’-txt’-只取得文件名-去除后缀\" class=\"headerlink\" title=\"path.basename(‘write.txt’,’.txt’) //只取得文件名,去除后缀\"></a>path.basename(‘write.txt’,’.txt’) //只取得文件名,去除后缀</h2><h2 id=\"path-extname-…-取得扩展名\"><a href=\"#path-extname-…-取得扩展名\" class=\"headerlink\" title=\"path.extname(…) //取得扩展名\"></a>path.extname(…) //取得扩展名</h2><h2 id=\"path-sep-路径分隔符\"><a href=\"#path-sep-路径分隔符\" class=\"headerlink\" title=\"path.sep //路径分隔符\"></a>path.sep //路径分隔符</h2><h2 id=\"path-delimiter-环境变量路径分隔符\"><a href=\"#path-delimiter-环境变量路径分隔符\" class=\"headerlink\" title=\"path.delimiter //环境变量路径分隔符\"></a>path.delimiter //环境变量路径分隔符</h2>"},{"title":"node-11cookie","date":"2015-11-10T10:44:37.000Z","_content":"\n## cookie\n请求路径 查询字符串 请求体\n很多业务是需要状态,比如购物车,登录\n但HTTP是无状态的,无法区分用户的身份\n为了标识和认证一个用户,就需要用到cookie\n\n## 步骤\n1.客户端先请求服务器端,服务器端向客户端发送cookie\n2.客户端保存cookie\n3.以后每次请求服务器的时候会将此cookie发送回服务器端\n\n## 原理\n网站为了辨别用户的身份,进行会话跟踪而要在客户端上存储数据\n\n## cookie问题\ncookie过多会引起请求头过大\n1.浪费带宽\n2.容易被篡改所以使用前要先校验\n3.不要信任cookie里的数据\n4.设置正确的domain和path\n\n## cookie的建议\n1.存储的内容不宜过多\n2.正确设置domain\n3.有些web服务器对请求头的大小有限制,比如apache 8k\n4.敏感数据不能放到cookie中isAdmin 支付宝的账户余额\n\n## 会话 session\n敏感数据应该存在什么地方?\n\n## cookie demo\n```\nvar http = require('http');\nvar url = require('url');\nvar querystring = require('querystring');\n/**\n * Domain 域名\n * Path 路径 控制访问哪些路径的时候发送cookie\n * Expires/Max-Age 设置cookie的过期时间或有效期\n * HTTP 只能通过HTTP查看,不能通过js操作\n * Secure 只限于https服务器使用\n */\nhttp.createServer(function(req,res){\n    var urlObj = url.parse(req.url);\n    var pathname = urlObj.pathname;\n    if(pathname=='/favicon.ico'){\n        res.end('404');\n    }else if(pathname == '/write'){\n        res.setHeader('Set-Cookie','name=coffee; Expires='+new Date(new Date().getTime()+10000).toGMTString());//设置一个header,名称固定为Set-Cookie\n        res.end('write');\n    }else if(pathname == '/read'){\n        var cookie = req.headers.cookie;\n        var cookieObj = querystring.parse(cookie,'; ');\n        if(cookieObj && cookieObj.name){\n            res.end('old');\n        }else{\n            res.end('new');\n        }\n    }\n}).listen(8080);\n```\n\n## session demo\n```\n/**\n 1 用户第一次访问服务器的时候，服务器生成一个卡号给用户。 卡号默认100余额\n 2 以后每次用户再次请求服务器的时候，把卡号发回服务器。然后服务器把此卡号对应的余额减掉10\n **/\nvar http = require('http');\nvar url = require('url');\nvar querystring = require('querystring');\nvar CARD_NUM = 'card_num';\nvar sessions = {};\n/**\n * 1.先访问 / 显示登陆页面。\n * 2.用户填 写用户名进行提交，提交到/login  把用户名和余额写到session里\n * 3.访问 /home页面，显示用户名和余额，每访问一次余额-10.\n *\n */\nhttp.createServer(function(req,res){\n    var urlObj = url.parse(req.url);\n    var pathname = urlObj.pathname;\n    if (pathname == '/favicon.ico') {\n        res.end('404');\n    }else if(pathname == '/'){\n      //返回一个登陆页面 只需要用户名username\n      //  用户输入用户名之后进行登陆。\n    }else if(pathname == '/login'){\n        var cookie = req.headers.cookie;\n        var cookieObj = querystring.parse(cookie,'; ');\n        var no = new Date().getTime()+Math.random();\n        res.setHeader('Set-Cookie',CARD_NUM+'='+no);\n        sessions[no] = 100;\n        res.setHeader('Content-Type','text/html;charset=utf-8');\n        res.end('欢迎新朋友，给你一张卡，卡号是'+no+',余额是100');\n    }else if(pathname == '/home'){\n        if(cookieObj[CARD_NUM]){\n            var no = cookieObj[CARD_NUM];\n            sessions[no] = sessions[no] - 10;\n            res.setHeader('Content-Type','text/html;charset=utf-8');\n            res.end('欢迎老朋友，,余额是'+sessions[no]);\n        }else{\n            res.setHeader('Content-Type','text/html;charset=utf-8');\n            res.end('你没有登陆过');\n        }\n    }\n}).listen(8080);\n```","source":"_posts/node-11cookie.md","raw":"title: node-11cookie\ndate: 2015-11-10 18:44:37\ntags:\n- node\n- cookie\n- session\n- 学习笔记\ncategories: 笔记\n---\n\n## cookie\n请求路径 查询字符串 请求体\n很多业务是需要状态,比如购物车,登录\n但HTTP是无状态的,无法区分用户的身份\n为了标识和认证一个用户,就需要用到cookie\n\n## 步骤\n1.客户端先请求服务器端,服务器端向客户端发送cookie\n2.客户端保存cookie\n3.以后每次请求服务器的时候会将此cookie发送回服务器端\n\n## 原理\n网站为了辨别用户的身份,进行会话跟踪而要在客户端上存储数据\n\n## cookie问题\ncookie过多会引起请求头过大\n1.浪费带宽\n2.容易被篡改所以使用前要先校验\n3.不要信任cookie里的数据\n4.设置正确的domain和path\n\n## cookie的建议\n1.存储的内容不宜过多\n2.正确设置domain\n3.有些web服务器对请求头的大小有限制,比如apache 8k\n4.敏感数据不能放到cookie中isAdmin 支付宝的账户余额\n\n## 会话 session\n敏感数据应该存在什么地方?\n\n## cookie demo\n```\nvar http = require('http');\nvar url = require('url');\nvar querystring = require('querystring');\n/**\n * Domain 域名\n * Path 路径 控制访问哪些路径的时候发送cookie\n * Expires/Max-Age 设置cookie的过期时间或有效期\n * HTTP 只能通过HTTP查看,不能通过js操作\n * Secure 只限于https服务器使用\n */\nhttp.createServer(function(req,res){\n    var urlObj = url.parse(req.url);\n    var pathname = urlObj.pathname;\n    if(pathname=='/favicon.ico'){\n        res.end('404');\n    }else if(pathname == '/write'){\n        res.setHeader('Set-Cookie','name=coffee; Expires='+new Date(new Date().getTime()+10000).toGMTString());//设置一个header,名称固定为Set-Cookie\n        res.end('write');\n    }else if(pathname == '/read'){\n        var cookie = req.headers.cookie;\n        var cookieObj = querystring.parse(cookie,'; ');\n        if(cookieObj && cookieObj.name){\n            res.end('old');\n        }else{\n            res.end('new');\n        }\n    }\n}).listen(8080);\n```\n\n## session demo\n```\n/**\n 1 用户第一次访问服务器的时候，服务器生成一个卡号给用户。 卡号默认100余额\n 2 以后每次用户再次请求服务器的时候，把卡号发回服务器。然后服务器把此卡号对应的余额减掉10\n **/\nvar http = require('http');\nvar url = require('url');\nvar querystring = require('querystring');\nvar CARD_NUM = 'card_num';\nvar sessions = {};\n/**\n * 1.先访问 / 显示登陆页面。\n * 2.用户填 写用户名进行提交，提交到/login  把用户名和余额写到session里\n * 3.访问 /home页面，显示用户名和余额，每访问一次余额-10.\n *\n */\nhttp.createServer(function(req,res){\n    var urlObj = url.parse(req.url);\n    var pathname = urlObj.pathname;\n    if (pathname == '/favicon.ico') {\n        res.end('404');\n    }else if(pathname == '/'){\n      //返回一个登陆页面 只需要用户名username\n      //  用户输入用户名之后进行登陆。\n    }else if(pathname == '/login'){\n        var cookie = req.headers.cookie;\n        var cookieObj = querystring.parse(cookie,'; ');\n        var no = new Date().getTime()+Math.random();\n        res.setHeader('Set-Cookie',CARD_NUM+'='+no);\n        sessions[no] = 100;\n        res.setHeader('Content-Type','text/html;charset=utf-8');\n        res.end('欢迎新朋友，给你一张卡，卡号是'+no+',余额是100');\n    }else if(pathname == '/home'){\n        if(cookieObj[CARD_NUM]){\n            var no = cookieObj[CARD_NUM];\n            sessions[no] = sessions[no] - 10;\n            res.setHeader('Content-Type','text/html;charset=utf-8');\n            res.end('欢迎老朋友，,余额是'+sessions[no]);\n        }else{\n            res.setHeader('Content-Type','text/html;charset=utf-8');\n            res.end('你没有登陆过');\n        }\n    }\n}).listen(8080);\n```","slug":"node-11cookie","published":1,"updated":"2015-11-11T03:56:51.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8de0011e4gj4fzpu3pl","content":"<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><p>请求路径 查询字符串 请求体<br>很多业务是需要状态,比如购物车,登录<br>但HTTP是无状态的,无法区分用户的身份<br>为了标识和认证一个用户,就需要用到cookie</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>1.客户端先请求服务器端,服务器端向客户端发送cookie<br>2.客户端保存cookie<br>3.以后每次请求服务器的时候会将此cookie发送回服务器端</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>网站为了辨别用户的身份,进行会话跟踪而要在客户端上存储数据</p>\n<h2 id=\"cookie问题\"><a href=\"#cookie问题\" class=\"headerlink\" title=\"cookie问题\"></a>cookie问题</h2><p>cookie过多会引起请求头过大<br>1.浪费带宽<br>2.容易被篡改所以使用前要先校验<br>3.不要信任cookie里的数据<br>4.设置正确的domain和path</p>\n<h2 id=\"cookie的建议\"><a href=\"#cookie的建议\" class=\"headerlink\" title=\"cookie的建议\"></a>cookie的建议</h2><p>1.存储的内容不宜过多<br>2.正确设置domain<br>3.有些web服务器对请求头的大小有限制,比如apache 8k<br>4.敏感数据不能放到cookie中isAdmin 支付宝的账户余额</p>\n<h2 id=\"会话-session\"><a href=\"#会话-session\" class=\"headerlink\" title=\"会话 session\"></a>会话 session</h2><p>敏感数据应该存在什么地方?</p>\n<h2 id=\"cookie-demo\"><a href=\"#cookie-demo\" class=\"headerlink\" title=\"cookie demo\"></a>cookie demo</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">var querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Domain 域名</span><br><span class=\"line\"> * Path 路径 控制访问哪些路径的时候发送cookie</span><br><span class=\"line\"> * Expires/Max-Age 设置cookie的过期时间或有效期</span><br><span class=\"line\"> * HTTP 只能通过HTTP查看,不能通过js操作</span><br><span class=\"line\"> * Secure 只限于https服务器使用</span><br><span class=\"line\"> */</span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    var urlObj = url.parse(req.url);</span><br><span class=\"line\">    var pathname = urlObj.pathname;</span><br><span class=\"line\">    if(pathname==&apos;/favicon.ico&apos;)&#123;</span><br><span class=\"line\">        res.end(&apos;404&apos;);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/write&apos;)&#123;</span><br><span class=\"line\">        res.setHeader(&apos;Set-Cookie&apos;,&apos;name=coffee; Expires=&apos;+new Date(new Date().getTime()+10000).toGMTString());//设置一个header,名称固定为Set-Cookie</span><br><span class=\"line\">        res.end(&apos;write&apos;);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/read&apos;)&#123;</span><br><span class=\"line\">        var cookie = req.headers.cookie;</span><br><span class=\"line\">        var cookieObj = querystring.parse(cookie,&apos;; &apos;);</span><br><span class=\"line\">        if(cookieObj &amp;&amp; cookieObj.name)&#123;</span><br><span class=\"line\">            res.end(&apos;old&apos;);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            res.end(&apos;new&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"session-demo\"><a href=\"#session-demo\" class=\"headerlink\" title=\"session demo\"></a>session demo</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> 1 用户第一次访问服务器的时候，服务器生成一个卡号给用户。 卡号默认100余额</span><br><span class=\"line\"> 2 以后每次用户再次请求服务器的时候，把卡号发回服务器。然后服务器把此卡号对应的余额减掉10</span><br><span class=\"line\"> **/</span><br><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">var querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\">var CARD_NUM = &apos;card_num&apos;;</span><br><span class=\"line\">var sessions = &#123;&#125;;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 1.先访问 / 显示登陆页面。</span><br><span class=\"line\"> * 2.用户填 写用户名进行提交，提交到/login  把用户名和余额写到session里</span><br><span class=\"line\"> * 3.访问 /home页面，显示用户名和余额，每访问一次余额-10.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    var urlObj = url.parse(req.url);</span><br><span class=\"line\">    var pathname = urlObj.pathname;</span><br><span class=\"line\">    if (pathname == &apos;/favicon.ico&apos;) &#123;</span><br><span class=\"line\">        res.end(&apos;404&apos;);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/&apos;)&#123;</span><br><span class=\"line\">      //返回一个登陆页面 只需要用户名username</span><br><span class=\"line\">      //  用户输入用户名之后进行登陆。</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/login&apos;)&#123;</span><br><span class=\"line\">        var cookie = req.headers.cookie;</span><br><span class=\"line\">        var cookieObj = querystring.parse(cookie,&apos;; &apos;);</span><br><span class=\"line\">        var no = new Date().getTime()+Math.random();</span><br><span class=\"line\">        res.setHeader(&apos;Set-Cookie&apos;,CARD_NUM+&apos;=&apos;+no);</span><br><span class=\"line\">        sessions[no] = 100;</span><br><span class=\"line\">        res.setHeader(&apos;Content-Type&apos;,&apos;text/html;charset=utf-8&apos;);</span><br><span class=\"line\">        res.end(&apos;欢迎新朋友，给你一张卡，卡号是&apos;+no+&apos;,余额是100&apos;);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/home&apos;)&#123;</span><br><span class=\"line\">        if(cookieObj[CARD_NUM])&#123;</span><br><span class=\"line\">            var no = cookieObj[CARD_NUM];</span><br><span class=\"line\">            sessions[no] = sessions[no] - 10;</span><br><span class=\"line\">            res.setHeader(&apos;Content-Type&apos;,&apos;text/html;charset=utf-8&apos;);</span><br><span class=\"line\">            res.end(&apos;欢迎老朋友，,余额是&apos;+sessions[no]);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            res.setHeader(&apos;Content-Type&apos;,&apos;text/html;charset=utf-8&apos;);</span><br><span class=\"line\">            res.end(&apos;你没有登陆过&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><p>请求路径 查询字符串 请求体<br>很多业务是需要状态,比如购物车,登录<br>但HTTP是无状态的,无法区分用户的身份<br>为了标识和认证一个用户,就需要用到cookie</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>1.客户端先请求服务器端,服务器端向客户端发送cookie<br>2.客户端保存cookie<br>3.以后每次请求服务器的时候会将此cookie发送回服务器端</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>网站为了辨别用户的身份,进行会话跟踪而要在客户端上存储数据</p>\n<h2 id=\"cookie问题\"><a href=\"#cookie问题\" class=\"headerlink\" title=\"cookie问题\"></a>cookie问题</h2><p>cookie过多会引起请求头过大<br>1.浪费带宽<br>2.容易被篡改所以使用前要先校验<br>3.不要信任cookie里的数据<br>4.设置正确的domain和path</p>\n<h2 id=\"cookie的建议\"><a href=\"#cookie的建议\" class=\"headerlink\" title=\"cookie的建议\"></a>cookie的建议</h2><p>1.存储的内容不宜过多<br>2.正确设置domain<br>3.有些web服务器对请求头的大小有限制,比如apache 8k<br>4.敏感数据不能放到cookie中isAdmin 支付宝的账户余额</p>\n<h2 id=\"会话-session\"><a href=\"#会话-session\" class=\"headerlink\" title=\"会话 session\"></a>会话 session</h2><p>敏感数据应该存在什么地方?</p>\n<h2 id=\"cookie-demo\"><a href=\"#cookie-demo\" class=\"headerlink\" title=\"cookie demo\"></a>cookie demo</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">var querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Domain 域名</span><br><span class=\"line\"> * Path 路径 控制访问哪些路径的时候发送cookie</span><br><span class=\"line\"> * Expires/Max-Age 设置cookie的过期时间或有效期</span><br><span class=\"line\"> * HTTP 只能通过HTTP查看,不能通过js操作</span><br><span class=\"line\"> * Secure 只限于https服务器使用</span><br><span class=\"line\"> */</span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    var urlObj = url.parse(req.url);</span><br><span class=\"line\">    var pathname = urlObj.pathname;</span><br><span class=\"line\">    if(pathname==&apos;/favicon.ico&apos;)&#123;</span><br><span class=\"line\">        res.end(&apos;404&apos;);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/write&apos;)&#123;</span><br><span class=\"line\">        res.setHeader(&apos;Set-Cookie&apos;,&apos;name=coffee; Expires=&apos;+new Date(new Date().getTime()+10000).toGMTString());//设置一个header,名称固定为Set-Cookie</span><br><span class=\"line\">        res.end(&apos;write&apos;);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/read&apos;)&#123;</span><br><span class=\"line\">        var cookie = req.headers.cookie;</span><br><span class=\"line\">        var cookieObj = querystring.parse(cookie,&apos;; &apos;);</span><br><span class=\"line\">        if(cookieObj &amp;&amp; cookieObj.name)&#123;</span><br><span class=\"line\">            res.end(&apos;old&apos;);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            res.end(&apos;new&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"session-demo\"><a href=\"#session-demo\" class=\"headerlink\" title=\"session demo\"></a>session demo</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> 1 用户第一次访问服务器的时候，服务器生成一个卡号给用户。 卡号默认100余额</span><br><span class=\"line\"> 2 以后每次用户再次请求服务器的时候，把卡号发回服务器。然后服务器把此卡号对应的余额减掉10</span><br><span class=\"line\"> **/</span><br><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">var querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\">var CARD_NUM = &apos;card_num&apos;;</span><br><span class=\"line\">var sessions = &#123;&#125;;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 1.先访问 / 显示登陆页面。</span><br><span class=\"line\"> * 2.用户填 写用户名进行提交，提交到/login  把用户名和余额写到session里</span><br><span class=\"line\"> * 3.访问 /home页面，显示用户名和余额，每访问一次余额-10.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    var urlObj = url.parse(req.url);</span><br><span class=\"line\">    var pathname = urlObj.pathname;</span><br><span class=\"line\">    if (pathname == &apos;/favicon.ico&apos;) &#123;</span><br><span class=\"line\">        res.end(&apos;404&apos;);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/&apos;)&#123;</span><br><span class=\"line\">      //返回一个登陆页面 只需要用户名username</span><br><span class=\"line\">      //  用户输入用户名之后进行登陆。</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/login&apos;)&#123;</span><br><span class=\"line\">        var cookie = req.headers.cookie;</span><br><span class=\"line\">        var cookieObj = querystring.parse(cookie,&apos;; &apos;);</span><br><span class=\"line\">        var no = new Date().getTime()+Math.random();</span><br><span class=\"line\">        res.setHeader(&apos;Set-Cookie&apos;,CARD_NUM+&apos;=&apos;+no);</span><br><span class=\"line\">        sessions[no] = 100;</span><br><span class=\"line\">        res.setHeader(&apos;Content-Type&apos;,&apos;text/html;charset=utf-8&apos;);</span><br><span class=\"line\">        res.end(&apos;欢迎新朋友，给你一张卡，卡号是&apos;+no+&apos;,余额是100&apos;);</span><br><span class=\"line\">    &#125;else if(pathname == &apos;/home&apos;)&#123;</span><br><span class=\"line\">        if(cookieObj[CARD_NUM])&#123;</span><br><span class=\"line\">            var no = cookieObj[CARD_NUM];</span><br><span class=\"line\">            sessions[no] = sessions[no] - 10;</span><br><span class=\"line\">            res.setHeader(&apos;Content-Type&apos;,&apos;text/html;charset=utf-8&apos;);</span><br><span class=\"line\">            res.end(&apos;欢迎老朋友，,余额是&apos;+sessions[no]);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            res.setHeader(&apos;Content-Type&apos;,&apos;text/html;charset=utf-8&apos;);</span><br><span class=\"line\">            res.end(&apos;你没有登陆过&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>"},{"title":"node-12express","date":"2015-11-11T03:01:12.000Z","_content":"\n## 中间件\n```\n/**\n 中间件\n 是处理HTTP请求，用来完成各种特定的任务\n 比如检查用户是否登陆，增加工具方法等\n 最大特点:\n    一个中间件处理完毕后，才能将数据传递给下一个中间件\n    app.use(路径,中间件函数);\n **/\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\napp.use(function(req,res,next){\n    res.print = function(content){\n        this.end(content);\n    }\n    next();\n});\n/*app.use(function(req,res,next){\n    console.log('next middleware');\n});*/\n//发表文章\napp.get('/article',function(req,res){\n    res.print('article');\n});\n//发表评论\napp.get('/comment',function(req,res){\n    res.print('article');\n});\n//登陆\napp.get('/login',function(req,res){\n    res.print('login');\n});\n//注册\napp.get('/reg',function(req,res){\n    res.print('login');\n});\n//匹配所有的路径和所有的请求方法\napp.all('*',function(req,res){\n    res.print('404');\n});\napp.listen(8080);\n```\n\n## 静态文件\n```\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\n//静态文件目录服务中间件 /index.html\n// __dirname+/index.html\napp.use(express.static(__dirname));\napp.get('/',function(req,res){\n    res.end('404');\n});\napp.listen(8080);\n```\n\n## 获取参数\n```\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\n/**\n * 请求方法method\n * 请求的路径 pathname\n * 查询字符串 query\n * 请求头 headers\n *\n */\nvar url = require('url');\napp.use(function(req,res,next){\n    req.path1 = url.parse(req.url,true).pathname;\n    next();\n});\napp.get('/login',function(req,res){\n    console.log(req.method);//请求的方法\n    console.log(req.path1);//请求的pathname\n    console.log(req.query);//请求的查询字符串对象\n    console.log(req.headers);//请求头对象\n    res.end('404');\n});\n//路径参数 http://localhost:8080/user/delete/1/zfpx\napp.get('/user/delete/:id/:name',function(req,res){\n    console.log(req.params.id);//\n    console.log(req.params.name);//\n    res.end('404');\n});\napp.listen(8080);\n```\n\n## 使用模板\n```\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\nvar path = require('path');\nvar url = require('url');\n//指定模板引擎 ejs handlerbar jade\n// freemarker velocity\napp.set('view engine','html');\napp.set('views',path.join(__dirname,'tmpl'));\n//对于html类型的模板调用__express来进行渲染\napp.engine('html',require('ejs').__express);\napp.get('/login',function(req,res){\n    // __dirname/tmpl/login.ejs\n  res.render('login',{username:'zhangsan',hello:'<h1>hello</h1>'});\n});\napp.listen(8080);\n```\n\n## 参数 req.body\n```\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\n/**\n * 获取请求体参数\n * post 请求中如何获取客户端提交的数据\n */\nvar path = require('path');\nvar url = require('url');\napp.set('view engine','html');\napp.set('views',path.join(__dirname,'tmpl'));\napp.engine('html',require('ejs').__express);\nvar bodyParser = require('body-parser');\n//处理文件上传的中间件 只解析类型是 multipart/form-dat的类型\nvar multer = require('multer');\nvar storage = multer.diskStorage({\n  //指定保存的目的地\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/')\n  },\n  //指定保存文件名\n  filename: function (req, file, cb) {\n    cb(null, Date.now()+'-'+file.originalname)\n  }\n})\nvar upload = multer({ storage: storage })\napp.use(bodyParser.json());//一个是json字符串 req.body\napp.use(bodyParser.urlencoded({extended:true}));//对象 req.body\napp.get('/login',function(req,res){\n  res.render('login');\n});\napp.use(express.static(__dirname));\n// username=zfpx&password=123 querystring.parse() ->req.body\napp.post('/login',upload.single('avatar'),function(req,res){\n  console.log(req.body.username);\n  console.log(req.body.password);\n  console.log(req.file);\n  res.setHeader('Content-Type',\"text/html;charset=utf-8\");\n  //'uploads\\\\1445763597971-get_matrix_img.gif'\n  //  /uploads\\\\1445763597971-get_matrix_img.gif\n  res.end('<img src=\"'+req.file.path+'\">')\n});\napp.listen(8080);\n```\n\n## 访问登录 demo\n```\n/**\n  * 实现一个完整的访问控制\n  * /login 当登陆成功之后会跳转到/home页\n  * /home 访问/home页的时候要判断用户是否已经登陆，如果未登陆，跳回登陆页\n  */\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\n/**\n  * 获取请求体参数\n  * post 请求中如何获取客户端提交的数据\n  */\nvar path = require('path');\nvar url = require('url');\napp.set('view engine','html');\napp.set('views',path.join(__dirname,'tmpl'));\napp.engine('html',require('ejs').__express);\nvar session = require('express-session');\nvar bodyParser = require('body-parser');\n// req.session\napp.use(session({\n    secret:'secret',\n    resave:true,\n    saveUninitialized:true\n}));\napp.use(express.static(__dirname));\napp.use(bodyParser.urlencoded({extended:true}));//对象 req.body\napp.get('/login',function(req,res){\n    res.render('login');\n});\napp.post('/login',function(req,res){\n    var user = req.body;\n    req.session.user = user;\n    res.redirect('/home');//重定各到/home\n});\nfunction checkAuth(req,res,next){\n    if(req.session.user){\n        next();\n    }else{\n        res.redirect('/login');//重定各到/home\n    }\n}\napp.get('/home',checkAuth,function(req,res){\n    res.render('home',req.session.user);\n});\napp.listen(8080);\n```\n\n## error处理机制\n```\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\napp.use(function(req,res,next){\n    console.log('1');\n    next();\n});\napp.use(function(req,res,next){\n    console.log('2');\n    //throw Error('wrong');\n    next('I am wrong');\n});\napp.use(function(req,res,next){\n    console.log('3');\n    next();\n});\napp.use(function(req,res,next){\n    console.log('4');\n    res.end(\"4\");\n});\n//错误处理中间件\napp.use(function(err,req,res,next){\n   res.end(err);\n});\napp.listen(8080);\n```","source":"_posts/node-12express.md","raw":"title: node-12express\ndate: 2015-11-11 11:01:12\ntags:\n- node\n- express\n- 学习笔记\ncategories: 笔记\n---\n\n## 中间件\n```\n/**\n 中间件\n 是处理HTTP请求，用来完成各种特定的任务\n 比如检查用户是否登陆，增加工具方法等\n 最大特点:\n    一个中间件处理完毕后，才能将数据传递给下一个中间件\n    app.use(路径,中间件函数);\n **/\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\napp.use(function(req,res,next){\n    res.print = function(content){\n        this.end(content);\n    }\n    next();\n});\n/*app.use(function(req,res,next){\n    console.log('next middleware');\n});*/\n//发表文章\napp.get('/article',function(req,res){\n    res.print('article');\n});\n//发表评论\napp.get('/comment',function(req,res){\n    res.print('article');\n});\n//登陆\napp.get('/login',function(req,res){\n    res.print('login');\n});\n//注册\napp.get('/reg',function(req,res){\n    res.print('login');\n});\n//匹配所有的路径和所有的请求方法\napp.all('*',function(req,res){\n    res.print('404');\n});\napp.listen(8080);\n```\n\n## 静态文件\n```\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\n//静态文件目录服务中间件 /index.html\n// __dirname+/index.html\napp.use(express.static(__dirname));\napp.get('/',function(req,res){\n    res.end('404');\n});\napp.listen(8080);\n```\n\n## 获取参数\n```\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\n/**\n * 请求方法method\n * 请求的路径 pathname\n * 查询字符串 query\n * 请求头 headers\n *\n */\nvar url = require('url');\napp.use(function(req,res,next){\n    req.path1 = url.parse(req.url,true).pathname;\n    next();\n});\napp.get('/login',function(req,res){\n    console.log(req.method);//请求的方法\n    console.log(req.path1);//请求的pathname\n    console.log(req.query);//请求的查询字符串对象\n    console.log(req.headers);//请求头对象\n    res.end('404');\n});\n//路径参数 http://localhost:8080/user/delete/1/zfpx\napp.get('/user/delete/:id/:name',function(req,res){\n    console.log(req.params.id);//\n    console.log(req.params.name);//\n    res.end('404');\n});\napp.listen(8080);\n```\n\n## 使用模板\n```\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\nvar path = require('path');\nvar url = require('url');\n//指定模板引擎 ejs handlerbar jade\n// freemarker velocity\napp.set('view engine','html');\napp.set('views',path.join(__dirname,'tmpl'));\n//对于html类型的模板调用__express来进行渲染\napp.engine('html',require('ejs').__express);\napp.get('/login',function(req,res){\n    // __dirname/tmpl/login.ejs\n  res.render('login',{username:'zhangsan',hello:'<h1>hello</h1>'});\n});\napp.listen(8080);\n```\n\n## 参数 req.body\n```\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\n/**\n * 获取请求体参数\n * post 请求中如何获取客户端提交的数据\n */\nvar path = require('path');\nvar url = require('url');\napp.set('view engine','html');\napp.set('views',path.join(__dirname,'tmpl'));\napp.engine('html',require('ejs').__express);\nvar bodyParser = require('body-parser');\n//处理文件上传的中间件 只解析类型是 multipart/form-dat的类型\nvar multer = require('multer');\nvar storage = multer.diskStorage({\n  //指定保存的目的地\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/')\n  },\n  //指定保存文件名\n  filename: function (req, file, cb) {\n    cb(null, Date.now()+'-'+file.originalname)\n  }\n})\nvar upload = multer({ storage: storage })\napp.use(bodyParser.json());//一个是json字符串 req.body\napp.use(bodyParser.urlencoded({extended:true}));//对象 req.body\napp.get('/login',function(req,res){\n  res.render('login');\n});\napp.use(express.static(__dirname));\n// username=zfpx&password=123 querystring.parse() ->req.body\napp.post('/login',upload.single('avatar'),function(req,res){\n  console.log(req.body.username);\n  console.log(req.body.password);\n  console.log(req.file);\n  res.setHeader('Content-Type',\"text/html;charset=utf-8\");\n  //'uploads\\\\1445763597971-get_matrix_img.gif'\n  //  /uploads\\\\1445763597971-get_matrix_img.gif\n  res.end('<img src=\"'+req.file.path+'\">')\n});\napp.listen(8080);\n```\n\n## 访问登录 demo\n```\n/**\n  * 实现一个完整的访问控制\n  * /login 当登陆成功之后会跳转到/home页\n  * /home 访问/home页的时候要判断用户是否已经登陆，如果未登陆，跳回登陆页\n  */\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\n/**\n  * 获取请求体参数\n  * post 请求中如何获取客户端提交的数据\n  */\nvar path = require('path');\nvar url = require('url');\napp.set('view engine','html');\napp.set('views',path.join(__dirname,'tmpl'));\napp.engine('html',require('ejs').__express);\nvar session = require('express-session');\nvar bodyParser = require('body-parser');\n// req.session\napp.use(session({\n    secret:'secret',\n    resave:true,\n    saveUninitialized:true\n}));\napp.use(express.static(__dirname));\napp.use(bodyParser.urlencoded({extended:true}));//对象 req.body\napp.get('/login',function(req,res){\n    res.render('login');\n});\napp.post('/login',function(req,res){\n    var user = req.body;\n    req.session.user = user;\n    res.redirect('/home');//重定各到/home\n});\nfunction checkAuth(req,res,next){\n    if(req.session.user){\n        next();\n    }else{\n        res.redirect('/login');//重定各到/home\n    }\n}\napp.get('/home',checkAuth,function(req,res){\n    res.render('home',req.session.user);\n});\napp.listen(8080);\n```\n\n## error处理机制\n```\nvar express = require('express');\nvar app = express();\nvar fs = require('fs');\napp.use(function(req,res,next){\n    console.log('1');\n    next();\n});\napp.use(function(req,res,next){\n    console.log('2');\n    //throw Error('wrong');\n    next('I am wrong');\n});\napp.use(function(req,res,next){\n    console.log('3');\n    next();\n});\napp.use(function(req,res,next){\n    console.log('4');\n    res.end(\"4\");\n});\n//错误处理中间件\napp.use(function(err,req,res,next){\n   res.end(err);\n});\napp.listen(8080);\n```","slug":"node-12express","published":1,"updated":"2015-11-11T11:06:47.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8dh0015e4gjhbmp0p4t","content":"<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> 中间件</span><br><span class=\"line\"> 是处理HTTP请求，用来完成各种特定的任务</span><br><span class=\"line\"> 比如检查用户是否登陆，增加工具方法等</span><br><span class=\"line\"> 最大特点:</span><br><span class=\"line\">    一个中间件处理完毕后，才能将数据传递给下一个中间件</span><br><span class=\"line\">    app.use(路径,中间件函数);</span><br><span class=\"line\"> **/</span><br><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    res.print = function(content)&#123;</span><br><span class=\"line\">        this.end(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">/*app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;next middleware&apos;);</span><br><span class=\"line\">&#125;);*/</span><br><span class=\"line\">//发表文章</span><br><span class=\"line\">app.get(&apos;/article&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.print(&apos;article&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//发表评论</span><br><span class=\"line\">app.get(&apos;/comment&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.print(&apos;article&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//登陆</span><br><span class=\"line\">app.get(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.print(&apos;login&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//注册</span><br><span class=\"line\">app.get(&apos;/reg&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.print(&apos;login&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//匹配所有的路径和所有的请求方法</span><br><span class=\"line\">app.all(&apos;*&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.print(&apos;404&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态文件\"><a href=\"#静态文件\" class=\"headerlink\" title=\"静态文件\"></a>静态文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">//静态文件目录服务中间件 /index.html</span><br><span class=\"line\">// __dirname+/index.html</span><br><span class=\"line\">app.use(express.static(__dirname));</span><br><span class=\"line\">app.get(&apos;/&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.end(&apos;404&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取参数\"><a href=\"#获取参数\" class=\"headerlink\" title=\"获取参数\"></a>获取参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 请求方法method</span><br><span class=\"line\"> * 请求的路径 pathname</span><br><span class=\"line\"> * 查询字符串 query</span><br><span class=\"line\"> * 请求头 headers</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    req.path1 = url.parse(req.url,true).pathname;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">    console.log(req.method);//请求的方法</span><br><span class=\"line\">    console.log(req.path1);//请求的pathname</span><br><span class=\"line\">    console.log(req.query);//请求的查询字符串对象</span><br><span class=\"line\">    console.log(req.headers);//请求头对象</span><br><span class=\"line\">    res.end(&apos;404&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//路径参数 http://localhost:8080/user/delete/1/zfpx</span><br><span class=\"line\">app.get(&apos;/user/delete/:id/:name&apos;,function(req,res)&#123;</span><br><span class=\"line\">    console.log(req.params.id);//</span><br><span class=\"line\">    console.log(req.params.name);//</span><br><span class=\"line\">    res.end(&apos;404&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用模板\"><a href=\"#使用模板\" class=\"headerlink\" title=\"使用模板\"></a>使用模板</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">//指定模板引擎 ejs handlerbar jade</span><br><span class=\"line\">// freemarker velocity</span><br><span class=\"line\">app.set(&apos;view engine&apos;,&apos;html&apos;);</span><br><span class=\"line\">app.set(&apos;views&apos;,path.join(__dirname,&apos;tmpl&apos;));</span><br><span class=\"line\">//对于html类型的模板调用__express来进行渲染</span><br><span class=\"line\">app.engine(&apos;html&apos;,require(&apos;ejs&apos;).__express);</span><br><span class=\"line\">app.get(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">    // __dirname/tmpl/login.ejs</span><br><span class=\"line\">  res.render(&apos;login&apos;,&#123;username:&apos;zhangsan&apos;,hello:&apos;&lt;h1&gt;hello&lt;/h1&gt;&apos;&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数-req-body\"><a href=\"#参数-req-body\" class=\"headerlink\" title=\"参数 req.body\"></a>参数 req.body</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 获取请求体参数</span><br><span class=\"line\"> * post 请求中如何获取客户端提交的数据</span><br><span class=\"line\"> */</span><br><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">app.set(&apos;view engine&apos;,&apos;html&apos;);</span><br><span class=\"line\">app.set(&apos;views&apos;,path.join(__dirname,&apos;tmpl&apos;));</span><br><span class=\"line\">app.engine(&apos;html&apos;,require(&apos;ejs&apos;).__express);</span><br><span class=\"line\">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class=\"line\">//处理文件上传的中间件 只解析类型是 multipart/form-dat的类型</span><br><span class=\"line\">var multer = require(&apos;multer&apos;);</span><br><span class=\"line\">var storage = multer.diskStorage(&#123;</span><br><span class=\"line\">  //指定保存的目的地</span><br><span class=\"line\">  destination: function (req, file, cb) &#123;</span><br><span class=\"line\">    cb(null, &apos;uploads/&apos;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  //指定保存文件名</span><br><span class=\"line\">  filename: function (req, file, cb) &#123;</span><br><span class=\"line\">    cb(null, Date.now()+&apos;-&apos;+file.originalname)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">var upload = multer(&#123; storage: storage &#125;)</span><br><span class=\"line\">app.use(bodyParser.json());//一个是json字符串 req.body</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;extended:true&#125;));//对象 req.body</span><br><span class=\"line\">app.get(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">  res.render(&apos;login&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.use(express.static(__dirname));</span><br><span class=\"line\">// username=zfpx&amp;password=123 querystring.parse() -&gt;req.body</span><br><span class=\"line\">app.post(&apos;/login&apos;,upload.single(&apos;avatar&apos;),function(req,res)&#123;</span><br><span class=\"line\">  console.log(req.body.username);</span><br><span class=\"line\">  console.log(req.body.password);</span><br><span class=\"line\">  console.log(req.file);</span><br><span class=\"line\">  res.setHeader(&apos;Content-Type&apos;,&quot;text/html;charset=utf-8&quot;);</span><br><span class=\"line\">  //&apos;uploads\\\\1445763597971-get_matrix_img.gif&apos;</span><br><span class=\"line\">  //  /uploads\\\\1445763597971-get_matrix_img.gif</span><br><span class=\"line\">  res.end(&apos;&lt;img src=&quot;&apos;+req.file.path+&apos;&quot;&gt;&apos;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"访问登录-demo\"><a href=\"#访问登录-demo\" class=\"headerlink\" title=\"访问登录 demo\"></a>访问登录 demo</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">  * 实现一个完整的访问控制</span><br><span class=\"line\">  * /login 当登陆成功之后会跳转到/home页</span><br><span class=\"line\">  * /home 访问/home页的时候要判断用户是否已经登陆，如果未登陆，跳回登陆页</span><br><span class=\"line\">  */</span><br><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/**</span><br><span class=\"line\">  * 获取请求体参数</span><br><span class=\"line\">  * post 请求中如何获取客户端提交的数据</span><br><span class=\"line\">  */</span><br><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">app.set(&apos;view engine&apos;,&apos;html&apos;);</span><br><span class=\"line\">app.set(&apos;views&apos;,path.join(__dirname,&apos;tmpl&apos;));</span><br><span class=\"line\">app.engine(&apos;html&apos;,require(&apos;ejs&apos;).__express);</span><br><span class=\"line\">var session = require(&apos;express-session&apos;);</span><br><span class=\"line\">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class=\"line\">// req.session</span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">    secret:&apos;secret&apos;,</span><br><span class=\"line\">    resave:true,</span><br><span class=\"line\">    saveUninitialized:true</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">app.use(express.static(__dirname));</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;extended:true&#125;));//对象 req.body</span><br><span class=\"line\">app.get(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.render(&apos;login&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.post(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">    var user = req.body;</span><br><span class=\"line\">    req.session.user = user;</span><br><span class=\"line\">    res.redirect(&apos;/home&apos;);//重定各到/home</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">function checkAuth(req,res,next)&#123;</span><br><span class=\"line\">    if(req.session.user)&#123;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        res.redirect(&apos;/login&apos;);//重定各到/home</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">app.get(&apos;/home&apos;,checkAuth,function(req,res)&#123;</span><br><span class=\"line\">    res.render(&apos;home&apos;,req.session.user);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"error处理机制\"><a href=\"#error处理机制\" class=\"headerlink\" title=\"error处理机制\"></a>error处理机制</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;1&apos;);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;2&apos;);</span><br><span class=\"line\">    //throw Error(&apos;wrong&apos;);</span><br><span class=\"line\">    next(&apos;I am wrong&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;3&apos;);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;4&apos;);</span><br><span class=\"line\">    res.end(&quot;4&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//错误处理中间件</span><br><span class=\"line\">app.use(function(err,req,res,next)&#123;</span><br><span class=\"line\">   res.end(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> 中间件</span><br><span class=\"line\"> 是处理HTTP请求，用来完成各种特定的任务</span><br><span class=\"line\"> 比如检查用户是否登陆，增加工具方法等</span><br><span class=\"line\"> 最大特点:</span><br><span class=\"line\">    一个中间件处理完毕后，才能将数据传递给下一个中间件</span><br><span class=\"line\">    app.use(路径,中间件函数);</span><br><span class=\"line\"> **/</span><br><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    res.print = function(content)&#123;</span><br><span class=\"line\">        this.end(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">/*app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;next middleware&apos;);</span><br><span class=\"line\">&#125;);*/</span><br><span class=\"line\">//发表文章</span><br><span class=\"line\">app.get(&apos;/article&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.print(&apos;article&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//发表评论</span><br><span class=\"line\">app.get(&apos;/comment&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.print(&apos;article&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//登陆</span><br><span class=\"line\">app.get(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.print(&apos;login&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//注册</span><br><span class=\"line\">app.get(&apos;/reg&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.print(&apos;login&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//匹配所有的路径和所有的请求方法</span><br><span class=\"line\">app.all(&apos;*&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.print(&apos;404&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态文件\"><a href=\"#静态文件\" class=\"headerlink\" title=\"静态文件\"></a>静态文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">//静态文件目录服务中间件 /index.html</span><br><span class=\"line\">// __dirname+/index.html</span><br><span class=\"line\">app.use(express.static(__dirname));</span><br><span class=\"line\">app.get(&apos;/&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.end(&apos;404&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取参数\"><a href=\"#获取参数\" class=\"headerlink\" title=\"获取参数\"></a>获取参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 请求方法method</span><br><span class=\"line\"> * 请求的路径 pathname</span><br><span class=\"line\"> * 查询字符串 query</span><br><span class=\"line\"> * 请求头 headers</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    req.path1 = url.parse(req.url,true).pathname;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">    console.log(req.method);//请求的方法</span><br><span class=\"line\">    console.log(req.path1);//请求的pathname</span><br><span class=\"line\">    console.log(req.query);//请求的查询字符串对象</span><br><span class=\"line\">    console.log(req.headers);//请求头对象</span><br><span class=\"line\">    res.end(&apos;404&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//路径参数 http://localhost:8080/user/delete/1/zfpx</span><br><span class=\"line\">app.get(&apos;/user/delete/:id/:name&apos;,function(req,res)&#123;</span><br><span class=\"line\">    console.log(req.params.id);//</span><br><span class=\"line\">    console.log(req.params.name);//</span><br><span class=\"line\">    res.end(&apos;404&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用模板\"><a href=\"#使用模板\" class=\"headerlink\" title=\"使用模板\"></a>使用模板</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">//指定模板引擎 ejs handlerbar jade</span><br><span class=\"line\">// freemarker velocity</span><br><span class=\"line\">app.set(&apos;view engine&apos;,&apos;html&apos;);</span><br><span class=\"line\">app.set(&apos;views&apos;,path.join(__dirname,&apos;tmpl&apos;));</span><br><span class=\"line\">//对于html类型的模板调用__express来进行渲染</span><br><span class=\"line\">app.engine(&apos;html&apos;,require(&apos;ejs&apos;).__express);</span><br><span class=\"line\">app.get(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">    // __dirname/tmpl/login.ejs</span><br><span class=\"line\">  res.render(&apos;login&apos;,&#123;username:&apos;zhangsan&apos;,hello:&apos;&lt;h1&gt;hello&lt;/h1&gt;&apos;&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"参数-req-body\"><a href=\"#参数-req-body\" class=\"headerlink\" title=\"参数 req.body\"></a>参数 req.body</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 获取请求体参数</span><br><span class=\"line\"> * post 请求中如何获取客户端提交的数据</span><br><span class=\"line\"> */</span><br><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">app.set(&apos;view engine&apos;,&apos;html&apos;);</span><br><span class=\"line\">app.set(&apos;views&apos;,path.join(__dirname,&apos;tmpl&apos;));</span><br><span class=\"line\">app.engine(&apos;html&apos;,require(&apos;ejs&apos;).__express);</span><br><span class=\"line\">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class=\"line\">//处理文件上传的中间件 只解析类型是 multipart/form-dat的类型</span><br><span class=\"line\">var multer = require(&apos;multer&apos;);</span><br><span class=\"line\">var storage = multer.diskStorage(&#123;</span><br><span class=\"line\">  //指定保存的目的地</span><br><span class=\"line\">  destination: function (req, file, cb) &#123;</span><br><span class=\"line\">    cb(null, &apos;uploads/&apos;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  //指定保存文件名</span><br><span class=\"line\">  filename: function (req, file, cb) &#123;</span><br><span class=\"line\">    cb(null, Date.now()+&apos;-&apos;+file.originalname)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">var upload = multer(&#123; storage: storage &#125;)</span><br><span class=\"line\">app.use(bodyParser.json());//一个是json字符串 req.body</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;extended:true&#125;));//对象 req.body</span><br><span class=\"line\">app.get(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">  res.render(&apos;login&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.use(express.static(__dirname));</span><br><span class=\"line\">// username=zfpx&amp;password=123 querystring.parse() -&gt;req.body</span><br><span class=\"line\">app.post(&apos;/login&apos;,upload.single(&apos;avatar&apos;),function(req,res)&#123;</span><br><span class=\"line\">  console.log(req.body.username);</span><br><span class=\"line\">  console.log(req.body.password);</span><br><span class=\"line\">  console.log(req.file);</span><br><span class=\"line\">  res.setHeader(&apos;Content-Type&apos;,&quot;text/html;charset=utf-8&quot;);</span><br><span class=\"line\">  //&apos;uploads\\\\1445763597971-get_matrix_img.gif&apos;</span><br><span class=\"line\">  //  /uploads\\\\1445763597971-get_matrix_img.gif</span><br><span class=\"line\">  res.end(&apos;&lt;img src=&quot;&apos;+req.file.path+&apos;&quot;&gt;&apos;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"访问登录-demo\"><a href=\"#访问登录-demo\" class=\"headerlink\" title=\"访问登录 demo\"></a>访问登录 demo</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">  * 实现一个完整的访问控制</span><br><span class=\"line\">  * /login 当登陆成功之后会跳转到/home页</span><br><span class=\"line\">  * /home 访问/home页的时候要判断用户是否已经登陆，如果未登陆，跳回登陆页</span><br><span class=\"line\">  */</span><br><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">/**</span><br><span class=\"line\">  * 获取请求体参数</span><br><span class=\"line\">  * post 请求中如何获取客户端提交的数据</span><br><span class=\"line\">  */</span><br><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">var url = require(&apos;url&apos;);</span><br><span class=\"line\">app.set(&apos;view engine&apos;,&apos;html&apos;);</span><br><span class=\"line\">app.set(&apos;views&apos;,path.join(__dirname,&apos;tmpl&apos;));</span><br><span class=\"line\">app.engine(&apos;html&apos;,require(&apos;ejs&apos;).__express);</span><br><span class=\"line\">var session = require(&apos;express-session&apos;);</span><br><span class=\"line\">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class=\"line\">// req.session</span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">    secret:&apos;secret&apos;,</span><br><span class=\"line\">    resave:true,</span><br><span class=\"line\">    saveUninitialized:true</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">app.use(express.static(__dirname));</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;extended:true&#125;));//对象 req.body</span><br><span class=\"line\">app.get(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">    res.render(&apos;login&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.post(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">    var user = req.body;</span><br><span class=\"line\">    req.session.user = user;</span><br><span class=\"line\">    res.redirect(&apos;/home&apos;);//重定各到/home</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">function checkAuth(req,res,next)&#123;</span><br><span class=\"line\">    if(req.session.user)&#123;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        res.redirect(&apos;/login&apos;);//重定各到/home</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">app.get(&apos;/home&apos;,checkAuth,function(req,res)&#123;</span><br><span class=\"line\">    res.render(&apos;home&apos;,req.session.user);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>\n<h2 id=\"error处理机制\"><a href=\"#error处理机制\" class=\"headerlink\" title=\"error处理机制\"></a>error处理机制</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;1&apos;);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;2&apos;);</span><br><span class=\"line\">    //throw Error(&apos;wrong&apos;);</span><br><span class=\"line\">    next(&apos;I am wrong&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;3&apos;);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.use(function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;4&apos;);</span><br><span class=\"line\">    res.end(&quot;4&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//错误处理中间件</span><br><span class=\"line\">app.use(function(err,req,res,next)&#123;</span><br><span class=\"line\">   res.end(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(8080);</span><br></pre></td></tr></table></figure>"},{"title":"node-13mongoose","date":"2015-11-12T12:36:35.000Z","_content":"\n## mongoose 是对mongodb的原生方法的封装\n```\nvar async = require('async');\nvar mongoose = require('mongoose');\nvar connection = mongoose.createConnection('mongodb://127.0.0.1/blog');\n//模型定义\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;//自动生成的对象ID\nvar AuthorSchema = new Schema({\n    name:String\n});\nvar CommentSchema = new Schema({\n    content:String,\n    createAt:{type:Date,default:Date.now}\n});\n//作者\nvar Author = connection.model('Author',AuthorSchema);\n//文章的模型\nvar ArticleSchema = new Schema({\n    title:{type:String,unique:true},\n    content:String,\n    author:{type:ObjectId,ref:'Author'},\n    stat:{\n        favs:Number,\n        visited:Number\n    },\n    comments:[CommentSchema]\n});\n//定义文章的模型,可以与数据库进行互动\nvar Article = connection.model('Article',ArticleSchema);\n\n//保存用户\n/*new Author({\n    name:'张三'\n}).save(function(err,author){\n        if(err){\n            console.log(err);\n        }else{\n            console.log(author);\n        }\n    });*/\n\n/*\nArticleSchema.pre('save',function(next){\n    this.stat.visited = Math.floor(Math.random()*1000);\n    if(this.title){\n        next();\n    }else{\n        console.log('标题不能为空');\n    }\n});\n\nvar tasks = [];\nfor(var i=1;i<=10;i++){\n    (function(i){\n        tasks.push(function(next){\n            new Article({\n                title:'title'+i,\n                content:'content'+i,\n                author:'5644832ba5d31db01adf4eb2',\n                stat:{\n                    favs:0,\n                    visited:0\n                },\n                comments:[{content:'content'+i}]\n            }).save(function(err,article){\n                    if(err){\n                        console.log(err);\n                    }else{\n                        console.log(article);\n                    }\n                    next();\n                });\n        })\n    })(i);\n}\n//串行执行,一个任务完成后才能执行下一个任务\nasync.series(tasks,function(err,result){\n    console.log('全部插入完成');\n});\n*/\n\n//分页参数 pageNumber pageSize\n//返回值   pages articles\n/*var pageNumber = 1;\nvar pageSize = 5;\nArticle.count({},function(err,count){//返回总记录数\n    var pages = Math.ceil(count/pageSize);//计算总页数\n    var skip = (pageNumber-1)*pageSize;\n    Article.find({}).skip(skip).limit(pageSize).sort({createAt:1}).populate('author').exec(function(err,result){\n        console.log(pages,result);\n    })\n});*/\n\n/*Article.update({},{$set:{'stat.favs':100}},function(err,result){\n    console.log(result);\n});*/\n\n/*Article.update({},{$push:{'comments':{'comments':'i am a student'}}},function(err,result){\n    console.log(result);\n});*/\n/*Article.find({},function(err,result){\n console.log(result);\n });*/\n/*Article.findOne({},function(err,result){\n    console.log(result);\n});*/\n\n/*Article.remove({_id:'5644835a2232594013cd77c8'},function(err,result){\n console.log(result);\n });*/\n```","source":"_posts/node-13mongoose.md","raw":"title: node-13mongoose\ndate: 2015-11-12 20:36:35\ntags:\n- node\n- mongoose\n- 学习笔记\ncategories: 笔记\n---\n\n## mongoose 是对mongodb的原生方法的封装\n```\nvar async = require('async');\nvar mongoose = require('mongoose');\nvar connection = mongoose.createConnection('mongodb://127.0.0.1/blog');\n//模型定义\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;//自动生成的对象ID\nvar AuthorSchema = new Schema({\n    name:String\n});\nvar CommentSchema = new Schema({\n    content:String,\n    createAt:{type:Date,default:Date.now}\n});\n//作者\nvar Author = connection.model('Author',AuthorSchema);\n//文章的模型\nvar ArticleSchema = new Schema({\n    title:{type:String,unique:true},\n    content:String,\n    author:{type:ObjectId,ref:'Author'},\n    stat:{\n        favs:Number,\n        visited:Number\n    },\n    comments:[CommentSchema]\n});\n//定义文章的模型,可以与数据库进行互动\nvar Article = connection.model('Article',ArticleSchema);\n\n//保存用户\n/*new Author({\n    name:'张三'\n}).save(function(err,author){\n        if(err){\n            console.log(err);\n        }else{\n            console.log(author);\n        }\n    });*/\n\n/*\nArticleSchema.pre('save',function(next){\n    this.stat.visited = Math.floor(Math.random()*1000);\n    if(this.title){\n        next();\n    }else{\n        console.log('标题不能为空');\n    }\n});\n\nvar tasks = [];\nfor(var i=1;i<=10;i++){\n    (function(i){\n        tasks.push(function(next){\n            new Article({\n                title:'title'+i,\n                content:'content'+i,\n                author:'5644832ba5d31db01adf4eb2',\n                stat:{\n                    favs:0,\n                    visited:0\n                },\n                comments:[{content:'content'+i}]\n            }).save(function(err,article){\n                    if(err){\n                        console.log(err);\n                    }else{\n                        console.log(article);\n                    }\n                    next();\n                });\n        })\n    })(i);\n}\n//串行执行,一个任务完成后才能执行下一个任务\nasync.series(tasks,function(err,result){\n    console.log('全部插入完成');\n});\n*/\n\n//分页参数 pageNumber pageSize\n//返回值   pages articles\n/*var pageNumber = 1;\nvar pageSize = 5;\nArticle.count({},function(err,count){//返回总记录数\n    var pages = Math.ceil(count/pageSize);//计算总页数\n    var skip = (pageNumber-1)*pageSize;\n    Article.find({}).skip(skip).limit(pageSize).sort({createAt:1}).populate('author').exec(function(err,result){\n        console.log(pages,result);\n    })\n});*/\n\n/*Article.update({},{$set:{'stat.favs':100}},function(err,result){\n    console.log(result);\n});*/\n\n/*Article.update({},{$push:{'comments':{'comments':'i am a student'}}},function(err,result){\n    console.log(result);\n});*/\n/*Article.find({},function(err,result){\n console.log(result);\n });*/\n/*Article.findOne({},function(err,result){\n    console.log(result);\n});*/\n\n/*Article.remove({_id:'5644835a2232594013cd77c8'},function(err,result){\n console.log(result);\n });*/\n```","slug":"node-13mongoose","published":1,"updated":"2015-11-12T12:37:47.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8dk0018e4gj23lfnnot","content":"<h2 id=\"mongoose-是对mongodb的原生方法的封装\"><a href=\"#mongoose-是对mongodb的原生方法的封装\" class=\"headerlink\" title=\"mongoose 是对mongodb的原生方法的封装\"></a>mongoose 是对mongodb的原生方法的封装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var async = require(&apos;async&apos;);</span><br><span class=\"line\">var mongoose = require(&apos;mongoose&apos;);</span><br><span class=\"line\">var connection = mongoose.createConnection(&apos;mongodb://127.0.0.1/blog&apos;);</span><br><span class=\"line\">//模型定义</span><br><span class=\"line\">var Schema = mongoose.Schema;</span><br><span class=\"line\">var ObjectId = Schema.ObjectId;//自动生成的对象ID</span><br><span class=\"line\">var AuthorSchema = new Schema(&#123;</span><br><span class=\"line\">    name:String</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">var CommentSchema = new Schema(&#123;</span><br><span class=\"line\">    content:String,</span><br><span class=\"line\">    createAt:&#123;type:Date,default:Date.now&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//作者</span><br><span class=\"line\">var Author = connection.model(&apos;Author&apos;,AuthorSchema);</span><br><span class=\"line\">//文章的模型</span><br><span class=\"line\">var ArticleSchema = new Schema(&#123;</span><br><span class=\"line\">    title:&#123;type:String,unique:true&#125;,</span><br><span class=\"line\">    content:String,</span><br><span class=\"line\">    author:&#123;type:ObjectId,ref:&apos;Author&apos;&#125;,</span><br><span class=\"line\">    stat:&#123;</span><br><span class=\"line\">        favs:Number,</span><br><span class=\"line\">        visited:Number</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    comments:[CommentSchema]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//定义文章的模型,可以与数据库进行互动</span><br><span class=\"line\">var Article = connection.model(&apos;Article&apos;,ArticleSchema);</span><br><span class=\"line\"></span><br><span class=\"line\">//保存用户</span><br><span class=\"line\">/*new Author(&#123;</span><br><span class=\"line\">    name:&apos;张三&apos;</span><br><span class=\"line\">&#125;).save(function(err,author)&#123;</span><br><span class=\"line\">        if(err)&#123;</span><br><span class=\"line\">            console.log(err);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            console.log(author);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">ArticleSchema.pre(&apos;save&apos;,function(next)&#123;</span><br><span class=\"line\">    this.stat.visited = Math.floor(Math.random()*1000);</span><br><span class=\"line\">    if(this.title)&#123;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        console.log(&apos;标题不能为空&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var tasks = [];</span><br><span class=\"line\">for(var i=1;i&lt;=10;i++)&#123;</span><br><span class=\"line\">    (function(i)&#123;</span><br><span class=\"line\">        tasks.push(function(next)&#123;</span><br><span class=\"line\">            new Article(&#123;</span><br><span class=\"line\">                title:&apos;title&apos;+i,</span><br><span class=\"line\">                content:&apos;content&apos;+i,</span><br><span class=\"line\">                author:&apos;5644832ba5d31db01adf4eb2&apos;,</span><br><span class=\"line\">                stat:&#123;</span><br><span class=\"line\">                    favs:0,</span><br><span class=\"line\">                    visited:0</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                comments:[&#123;content:&apos;content&apos;+i&#125;]</span><br><span class=\"line\">            &#125;).save(function(err,article)&#123;</span><br><span class=\"line\">                    if(err)&#123;</span><br><span class=\"line\">                        console.log(err);</span><br><span class=\"line\">                    &#125;else&#123;</span><br><span class=\"line\">                        console.log(article);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//串行执行,一个任务完成后才能执行下一个任务</span><br><span class=\"line\">async.series(tasks,function(err,result)&#123;</span><br><span class=\"line\">    console.log(&apos;全部插入完成&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">//分页参数 pageNumber pageSize</span><br><span class=\"line\">//返回值   pages articles</span><br><span class=\"line\">/*var pageNumber = 1;</span><br><span class=\"line\">var pageSize = 5;</span><br><span class=\"line\">Article.count(&#123;&#125;,function(err,count)&#123;//返回总记录数</span><br><span class=\"line\">    var pages = Math.ceil(count/pageSize);//计算总页数</span><br><span class=\"line\">    var skip = (pageNumber-1)*pageSize;</span><br><span class=\"line\">    Article.find(&#123;&#125;).skip(skip).limit(pageSize).sort(&#123;createAt:1&#125;).populate(&apos;author&apos;).exec(function(err,result)&#123;</span><br><span class=\"line\">        console.log(pages,result);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*Article.update(&#123;&#125;,&#123;$set:&#123;&apos;stat.favs&apos;:100&#125;&#125;,function(err,result)&#123;</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">&#125;);*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*Article.update(&#123;&#125;,&#123;$push:&#123;&apos;comments&apos;:&#123;&apos;comments&apos;:&apos;i am a student&apos;&#125;&#125;&#125;,function(err,result)&#123;</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">&#125;);*/</span><br><span class=\"line\">/*Article.find(&#123;&#125;,function(err,result)&#123;</span><br><span class=\"line\"> console.log(result);</span><br><span class=\"line\"> &#125;);*/</span><br><span class=\"line\">/*Article.findOne(&#123;&#125;,function(err,result)&#123;</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">&#125;);*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*Article.remove(&#123;_id:&apos;5644835a2232594013cd77c8&apos;&#125;,function(err,result)&#123;</span><br><span class=\"line\"> console.log(result);</span><br><span class=\"line\"> &#125;);*/</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"mongoose-是对mongodb的原生方法的封装\"><a href=\"#mongoose-是对mongodb的原生方法的封装\" class=\"headerlink\" title=\"mongoose 是对mongodb的原生方法的封装\"></a>mongoose 是对mongodb的原生方法的封装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var async = require(&apos;async&apos;);</span><br><span class=\"line\">var mongoose = require(&apos;mongoose&apos;);</span><br><span class=\"line\">var connection = mongoose.createConnection(&apos;mongodb://127.0.0.1/blog&apos;);</span><br><span class=\"line\">//模型定义</span><br><span class=\"line\">var Schema = mongoose.Schema;</span><br><span class=\"line\">var ObjectId = Schema.ObjectId;//自动生成的对象ID</span><br><span class=\"line\">var AuthorSchema = new Schema(&#123;</span><br><span class=\"line\">    name:String</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">var CommentSchema = new Schema(&#123;</span><br><span class=\"line\">    content:String,</span><br><span class=\"line\">    createAt:&#123;type:Date,default:Date.now&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//作者</span><br><span class=\"line\">var Author = connection.model(&apos;Author&apos;,AuthorSchema);</span><br><span class=\"line\">//文章的模型</span><br><span class=\"line\">var ArticleSchema = new Schema(&#123;</span><br><span class=\"line\">    title:&#123;type:String,unique:true&#125;,</span><br><span class=\"line\">    content:String,</span><br><span class=\"line\">    author:&#123;type:ObjectId,ref:&apos;Author&apos;&#125;,</span><br><span class=\"line\">    stat:&#123;</span><br><span class=\"line\">        favs:Number,</span><br><span class=\"line\">        visited:Number</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    comments:[CommentSchema]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//定义文章的模型,可以与数据库进行互动</span><br><span class=\"line\">var Article = connection.model(&apos;Article&apos;,ArticleSchema);</span><br><span class=\"line\"></span><br><span class=\"line\">//保存用户</span><br><span class=\"line\">/*new Author(&#123;</span><br><span class=\"line\">    name:&apos;张三&apos;</span><br><span class=\"line\">&#125;).save(function(err,author)&#123;</span><br><span class=\"line\">        if(err)&#123;</span><br><span class=\"line\">            console.log(err);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            console.log(author);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">ArticleSchema.pre(&apos;save&apos;,function(next)&#123;</span><br><span class=\"line\">    this.stat.visited = Math.floor(Math.random()*1000);</span><br><span class=\"line\">    if(this.title)&#123;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        console.log(&apos;标题不能为空&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var tasks = [];</span><br><span class=\"line\">for(var i=1;i&lt;=10;i++)&#123;</span><br><span class=\"line\">    (function(i)&#123;</span><br><span class=\"line\">        tasks.push(function(next)&#123;</span><br><span class=\"line\">            new Article(&#123;</span><br><span class=\"line\">                title:&apos;title&apos;+i,</span><br><span class=\"line\">                content:&apos;content&apos;+i,</span><br><span class=\"line\">                author:&apos;5644832ba5d31db01adf4eb2&apos;,</span><br><span class=\"line\">                stat:&#123;</span><br><span class=\"line\">                    favs:0,</span><br><span class=\"line\">                    visited:0</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                comments:[&#123;content:&apos;content&apos;+i&#125;]</span><br><span class=\"line\">            &#125;).save(function(err,article)&#123;</span><br><span class=\"line\">                    if(err)&#123;</span><br><span class=\"line\">                        console.log(err);</span><br><span class=\"line\">                    &#125;else&#123;</span><br><span class=\"line\">                        console.log(article);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//串行执行,一个任务完成后才能执行下一个任务</span><br><span class=\"line\">async.series(tasks,function(err,result)&#123;</span><br><span class=\"line\">    console.log(&apos;全部插入完成&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">//分页参数 pageNumber pageSize</span><br><span class=\"line\">//返回值   pages articles</span><br><span class=\"line\">/*var pageNumber = 1;</span><br><span class=\"line\">var pageSize = 5;</span><br><span class=\"line\">Article.count(&#123;&#125;,function(err,count)&#123;//返回总记录数</span><br><span class=\"line\">    var pages = Math.ceil(count/pageSize);//计算总页数</span><br><span class=\"line\">    var skip = (pageNumber-1)*pageSize;</span><br><span class=\"line\">    Article.find(&#123;&#125;).skip(skip).limit(pageSize).sort(&#123;createAt:1&#125;).populate(&apos;author&apos;).exec(function(err,result)&#123;</span><br><span class=\"line\">        console.log(pages,result);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*Article.update(&#123;&#125;,&#123;$set:&#123;&apos;stat.favs&apos;:100&#125;&#125;,function(err,result)&#123;</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">&#125;);*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*Article.update(&#123;&#125;,&#123;$push:&#123;&apos;comments&apos;:&#123;&apos;comments&apos;:&apos;i am a student&apos;&#125;&#125;&#125;,function(err,result)&#123;</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">&#125;);*/</span><br><span class=\"line\">/*Article.find(&#123;&#125;,function(err,result)&#123;</span><br><span class=\"line\"> console.log(result);</span><br><span class=\"line\"> &#125;);*/</span><br><span class=\"line\">/*Article.findOne(&#123;&#125;,function(err,result)&#123;</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">&#125;);*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*Article.remove(&#123;_id:&apos;5644835a2232594013cd77c8&apos;&#125;,function(err,result)&#123;</span><br><span class=\"line\"> console.log(result);</span><br><span class=\"line\"> &#125;);*/</span><br></pre></td></tr></table></figure>"},{"title":"node-14async","date":"2015-11-16T15:59:41.000Z","_content":"\n## 集合: Collections\n```\neach: 如果想对同一个集合中的所有元素都执行同一个异步操作。\nmap: 对集合中的每一个元素，执行某个异步操作，得到结果。所有的结果将汇总到最终的callback里。与each的区别是，each只关心操作不管最后的值，而map关心的最后产生的值。\nfilter: 使用异步操作对集合中的元素进行筛选, 需要注意的是，iterator的callback只有一个参数，只能接收true或false。\nreject: reject跟filter正好相反，当测试为true时则抛弃\nreduce: 可以让我们给定一个初始值，用它与集合中的每一个元素做运算，最后得到一个值。reduce从左向右来遍历元素，如果想从右向左，可使用reduceRight。\ndetect: 用于取得集合中满足条件的第一个元素。\nsortBy: 对集合内的元素进行排序，依据每个元素进行某异步操作后产生的值，从小到大排序。\nsome: 当集合中是否有至少一个元素满足条件时，最终callback得到的值为true，否则为false.\nevery: 如果集合里每一个元素都满足条件，则传给最终回调的result为true，否则为false\nconcat: 将多个异步操作的结果合并为一个数组。\n```\n\n## 流程控制: Control Flow\n```\nseries: 串行执行，一个函数数组中的每个函数，每一个函数执行完成之后才能执行下一个函数。\nparallel: 并行执行多个函数，每个函数都是立即执行，不需要等待其它函数先执行。传给最终callback的数组中的数据按照tasks中声明的顺序，而不是执行完成的顺序。\nwhilst: 相当于while，但其中的异步调用将在完成后才会进行下一次循环。\ndoWhilst: 相当于do…while, doWhilst交换了fn,test的参数位置，先执行一次循环，再做test判断。\nuntil: until与whilst正好相反，当test为false时循环，与true时跳出。其它特性一致。\ndoUntil: doUntil与doWhilst正好相反，当test为false时循环，与true时跳出。其它特性一致。\nforever: 无论条件循环执行，如果不出错，callback永远不被执行。\nwaterfall: 按顺序依次执行一组函数。每个函数产生的值，都将传给下一个。\ncompose: 创建一个包括一组异步函数的函数集合，每个函数会消费上一次函数的返回值。把f(),g(),h()异步函数，组合成f(g(h()))的形式，通过callback得到返回值。\napplyEach: 实现给一数组中每个函数传相同参数，通过callback返回。如果只传第一个参数，将返回一个函数对象，我可以传参调用。\nqueue: 是一个串行的消息队列，通过限制了worker数量，不再一次性全部执行。当worker数量不够用时，新加入的任务将会排队等候，直到有新的worker可用。\ncargo: 一个串行的消息队列，类似于queue，通过限制了worker数量，不再一次性全部执行。不同之处在于，cargo每次会加载满额的任务做为任务单元，只有任务单元中全部执行完成后，才会加载新的任务单元。\nauto: 用来处理有依赖关系的多个任务的执行。\niterator: 将一组函数包装成为一个iterator，初次调用此iterator时，会执行定义中的第一个函数并返回第二个函数以供调用。\napply: 可以让我们给一个函数预绑定多个参数并生成一个可直接调用的新函数，简化代码。\nnextTick: 与nodejs的nextTick一样，再最后调用函数。\ntimes: 异步运行,times可以指定调用几次，并把结果合并到数组中返回\ntimesSeries: 与time类似，唯一不同的是同步执行\n```\n\n## 工具类: Utils\n```\nmemoize: 让某一个函数在内存中缓存它的计算结果。对于相同的参数，只计算一次，下次就直接拿到之前算好的结果。\nunmemoize: 让已经被缓存的函数，返回不缓存的函数引用。\nlog: 执行某异步函数，并记录它的返回值，日志输出。\ndir: 与log类似，不同之处在于，会调用浏览器的console.dir()函数，显示为DOM视图。\nnoConflict: 如果之前已经在全局域中定义了async变量，当导入本async.js时，会先把之前的async变量保存起来，然后覆盖它。仅仅用于浏览器端，在nodejs中没用，这里无法演示。\n```","source":"_posts/node-14async.md","raw":"title: node-14async\ndate: 2015-11-16 23:59:41\ntags:\n- node\n- mongoose\n- 学习笔记\ncategories: 笔记\n---\n\n## 集合: Collections\n```\neach: 如果想对同一个集合中的所有元素都执行同一个异步操作。\nmap: 对集合中的每一个元素，执行某个异步操作，得到结果。所有的结果将汇总到最终的callback里。与each的区别是，each只关心操作不管最后的值，而map关心的最后产生的值。\nfilter: 使用异步操作对集合中的元素进行筛选, 需要注意的是，iterator的callback只有一个参数，只能接收true或false。\nreject: reject跟filter正好相反，当测试为true时则抛弃\nreduce: 可以让我们给定一个初始值，用它与集合中的每一个元素做运算，最后得到一个值。reduce从左向右来遍历元素，如果想从右向左，可使用reduceRight。\ndetect: 用于取得集合中满足条件的第一个元素。\nsortBy: 对集合内的元素进行排序，依据每个元素进行某异步操作后产生的值，从小到大排序。\nsome: 当集合中是否有至少一个元素满足条件时，最终callback得到的值为true，否则为false.\nevery: 如果集合里每一个元素都满足条件，则传给最终回调的result为true，否则为false\nconcat: 将多个异步操作的结果合并为一个数组。\n```\n\n## 流程控制: Control Flow\n```\nseries: 串行执行，一个函数数组中的每个函数，每一个函数执行完成之后才能执行下一个函数。\nparallel: 并行执行多个函数，每个函数都是立即执行，不需要等待其它函数先执行。传给最终callback的数组中的数据按照tasks中声明的顺序，而不是执行完成的顺序。\nwhilst: 相当于while，但其中的异步调用将在完成后才会进行下一次循环。\ndoWhilst: 相当于do…while, doWhilst交换了fn,test的参数位置，先执行一次循环，再做test判断。\nuntil: until与whilst正好相反，当test为false时循环，与true时跳出。其它特性一致。\ndoUntil: doUntil与doWhilst正好相反，当test为false时循环，与true时跳出。其它特性一致。\nforever: 无论条件循环执行，如果不出错，callback永远不被执行。\nwaterfall: 按顺序依次执行一组函数。每个函数产生的值，都将传给下一个。\ncompose: 创建一个包括一组异步函数的函数集合，每个函数会消费上一次函数的返回值。把f(),g(),h()异步函数，组合成f(g(h()))的形式，通过callback得到返回值。\napplyEach: 实现给一数组中每个函数传相同参数，通过callback返回。如果只传第一个参数，将返回一个函数对象，我可以传参调用。\nqueue: 是一个串行的消息队列，通过限制了worker数量，不再一次性全部执行。当worker数量不够用时，新加入的任务将会排队等候，直到有新的worker可用。\ncargo: 一个串行的消息队列，类似于queue，通过限制了worker数量，不再一次性全部执行。不同之处在于，cargo每次会加载满额的任务做为任务单元，只有任务单元中全部执行完成后，才会加载新的任务单元。\nauto: 用来处理有依赖关系的多个任务的执行。\niterator: 将一组函数包装成为一个iterator，初次调用此iterator时，会执行定义中的第一个函数并返回第二个函数以供调用。\napply: 可以让我们给一个函数预绑定多个参数并生成一个可直接调用的新函数，简化代码。\nnextTick: 与nodejs的nextTick一样，再最后调用函数。\ntimes: 异步运行,times可以指定调用几次，并把结果合并到数组中返回\ntimesSeries: 与time类似，唯一不同的是同步执行\n```\n\n## 工具类: Utils\n```\nmemoize: 让某一个函数在内存中缓存它的计算结果。对于相同的参数，只计算一次，下次就直接拿到之前算好的结果。\nunmemoize: 让已经被缓存的函数，返回不缓存的函数引用。\nlog: 执行某异步函数，并记录它的返回值，日志输出。\ndir: 与log类似，不同之处在于，会调用浏览器的console.dir()函数，显示为DOM视图。\nnoConflict: 如果之前已经在全局域中定义了async变量，当导入本async.js时，会先把之前的async变量保存起来，然后覆盖它。仅仅用于浏览器端，在nodejs中没用，这里无法演示。\n```","slug":"node-14async","published":1,"updated":"2015-11-16T16:01:47.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8do001ce4gjbfunrg10","content":"<h2 id=\"集合-Collections\"><a href=\"#集合-Collections\" class=\"headerlink\" title=\"集合: Collections\"></a>集合: Collections</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">each: 如果想对同一个集合中的所有元素都执行同一个异步操作。</span><br><span class=\"line\">map: 对集合中的每一个元素，执行某个异步操作，得到结果。所有的结果将汇总到最终的callback里。与each的区别是，each只关心操作不管最后的值，而map关心的最后产生的值。</span><br><span class=\"line\">filter: 使用异步操作对集合中的元素进行筛选, 需要注意的是，iterator的callback只有一个参数，只能接收true或false。</span><br><span class=\"line\">reject: reject跟filter正好相反，当测试为true时则抛弃</span><br><span class=\"line\">reduce: 可以让我们给定一个初始值，用它与集合中的每一个元素做运算，最后得到一个值。reduce从左向右来遍历元素，如果想从右向左，可使用reduceRight。</span><br><span class=\"line\">detect: 用于取得集合中满足条件的第一个元素。</span><br><span class=\"line\">sortBy: 对集合内的元素进行排序，依据每个元素进行某异步操作后产生的值，从小到大排序。</span><br><span class=\"line\">some: 当集合中是否有至少一个元素满足条件时，最终callback得到的值为true，否则为false.</span><br><span class=\"line\">every: 如果集合里每一个元素都满足条件，则传给最终回调的result为true，否则为false</span><br><span class=\"line\">concat: 将多个异步操作的结果合并为一个数组。</span><br></pre></td></tr></table></figure>\n<h2 id=\"流程控制-Control-Flow\"><a href=\"#流程控制-Control-Flow\" class=\"headerlink\" title=\"流程控制: Control Flow\"></a>流程控制: Control Flow</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series: 串行执行，一个函数数组中的每个函数，每一个函数执行完成之后才能执行下一个函数。</span><br><span class=\"line\">parallel: 并行执行多个函数，每个函数都是立即执行，不需要等待其它函数先执行。传给最终callback的数组中的数据按照tasks中声明的顺序，而不是执行完成的顺序。</span><br><span class=\"line\">whilst: 相当于while，但其中的异步调用将在完成后才会进行下一次循环。</span><br><span class=\"line\">doWhilst: 相当于do…while, doWhilst交换了fn,test的参数位置，先执行一次循环，再做test判断。</span><br><span class=\"line\">until: until与whilst正好相反，当test为false时循环，与true时跳出。其它特性一致。</span><br><span class=\"line\">doUntil: doUntil与doWhilst正好相反，当test为false时循环，与true时跳出。其它特性一致。</span><br><span class=\"line\">forever: 无论条件循环执行，如果不出错，callback永远不被执行。</span><br><span class=\"line\">waterfall: 按顺序依次执行一组函数。每个函数产生的值，都将传给下一个。</span><br><span class=\"line\">compose: 创建一个包括一组异步函数的函数集合，每个函数会消费上一次函数的返回值。把f(),g(),h()异步函数，组合成f(g(h()))的形式，通过callback得到返回值。</span><br><span class=\"line\">applyEach: 实现给一数组中每个函数传相同参数，通过callback返回。如果只传第一个参数，将返回一个函数对象，我可以传参调用。</span><br><span class=\"line\">queue: 是一个串行的消息队列，通过限制了worker数量，不再一次性全部执行。当worker数量不够用时，新加入的任务将会排队等候，直到有新的worker可用。</span><br><span class=\"line\">cargo: 一个串行的消息队列，类似于queue，通过限制了worker数量，不再一次性全部执行。不同之处在于，cargo每次会加载满额的任务做为任务单元，只有任务单元中全部执行完成后，才会加载新的任务单元。</span><br><span class=\"line\">auto: 用来处理有依赖关系的多个任务的执行。</span><br><span class=\"line\">iterator: 将一组函数包装成为一个iterator，初次调用此iterator时，会执行定义中的第一个函数并返回第二个函数以供调用。</span><br><span class=\"line\">apply: 可以让我们给一个函数预绑定多个参数并生成一个可直接调用的新函数，简化代码。</span><br><span class=\"line\">nextTick: 与nodejs的nextTick一样，再最后调用函数。</span><br><span class=\"line\">times: 异步运行,times可以指定调用几次，并把结果合并到数组中返回</span><br><span class=\"line\">timesSeries: 与time类似，唯一不同的是同步执行</span><br></pre></td></tr></table></figure>\n<h2 id=\"工具类-Utils\"><a href=\"#工具类-Utils\" class=\"headerlink\" title=\"工具类: Utils\"></a>工具类: Utils</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memoize: 让某一个函数在内存中缓存它的计算结果。对于相同的参数，只计算一次，下次就直接拿到之前算好的结果。</span><br><span class=\"line\">unmemoize: 让已经被缓存的函数，返回不缓存的函数引用。</span><br><span class=\"line\">log: 执行某异步函数，并记录它的返回值，日志输出。</span><br><span class=\"line\">dir: 与log类似，不同之处在于，会调用浏览器的console.dir()函数，显示为DOM视图。</span><br><span class=\"line\">noConflict: 如果之前已经在全局域中定义了async变量，当导入本async.js时，会先把之前的async变量保存起来，然后覆盖它。仅仅用于浏览器端，在nodejs中没用，这里无法演示。</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"集合-Collections\"><a href=\"#集合-Collections\" class=\"headerlink\" title=\"集合: Collections\"></a>集合: Collections</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">each: 如果想对同一个集合中的所有元素都执行同一个异步操作。</span><br><span class=\"line\">map: 对集合中的每一个元素，执行某个异步操作，得到结果。所有的结果将汇总到最终的callback里。与each的区别是，each只关心操作不管最后的值，而map关心的最后产生的值。</span><br><span class=\"line\">filter: 使用异步操作对集合中的元素进行筛选, 需要注意的是，iterator的callback只有一个参数，只能接收true或false。</span><br><span class=\"line\">reject: reject跟filter正好相反，当测试为true时则抛弃</span><br><span class=\"line\">reduce: 可以让我们给定一个初始值，用它与集合中的每一个元素做运算，最后得到一个值。reduce从左向右来遍历元素，如果想从右向左，可使用reduceRight。</span><br><span class=\"line\">detect: 用于取得集合中满足条件的第一个元素。</span><br><span class=\"line\">sortBy: 对集合内的元素进行排序，依据每个元素进行某异步操作后产生的值，从小到大排序。</span><br><span class=\"line\">some: 当集合中是否有至少一个元素满足条件时，最终callback得到的值为true，否则为false.</span><br><span class=\"line\">every: 如果集合里每一个元素都满足条件，则传给最终回调的result为true，否则为false</span><br><span class=\"line\">concat: 将多个异步操作的结果合并为一个数组。</span><br></pre></td></tr></table></figure>\n<h2 id=\"流程控制-Control-Flow\"><a href=\"#流程控制-Control-Flow\" class=\"headerlink\" title=\"流程控制: Control Flow\"></a>流程控制: Control Flow</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">series: 串行执行，一个函数数组中的每个函数，每一个函数执行完成之后才能执行下一个函数。</span><br><span class=\"line\">parallel: 并行执行多个函数，每个函数都是立即执行，不需要等待其它函数先执行。传给最终callback的数组中的数据按照tasks中声明的顺序，而不是执行完成的顺序。</span><br><span class=\"line\">whilst: 相当于while，但其中的异步调用将在完成后才会进行下一次循环。</span><br><span class=\"line\">doWhilst: 相当于do…while, doWhilst交换了fn,test的参数位置，先执行一次循环，再做test判断。</span><br><span class=\"line\">until: until与whilst正好相反，当test为false时循环，与true时跳出。其它特性一致。</span><br><span class=\"line\">doUntil: doUntil与doWhilst正好相反，当test为false时循环，与true时跳出。其它特性一致。</span><br><span class=\"line\">forever: 无论条件循环执行，如果不出错，callback永远不被执行。</span><br><span class=\"line\">waterfall: 按顺序依次执行一组函数。每个函数产生的值，都将传给下一个。</span><br><span class=\"line\">compose: 创建一个包括一组异步函数的函数集合，每个函数会消费上一次函数的返回值。把f(),g(),h()异步函数，组合成f(g(h()))的形式，通过callback得到返回值。</span><br><span class=\"line\">applyEach: 实现给一数组中每个函数传相同参数，通过callback返回。如果只传第一个参数，将返回一个函数对象，我可以传参调用。</span><br><span class=\"line\">queue: 是一个串行的消息队列，通过限制了worker数量，不再一次性全部执行。当worker数量不够用时，新加入的任务将会排队等候，直到有新的worker可用。</span><br><span class=\"line\">cargo: 一个串行的消息队列，类似于queue，通过限制了worker数量，不再一次性全部执行。不同之处在于，cargo每次会加载满额的任务做为任务单元，只有任务单元中全部执行完成后，才会加载新的任务单元。</span><br><span class=\"line\">auto: 用来处理有依赖关系的多个任务的执行。</span><br><span class=\"line\">iterator: 将一组函数包装成为一个iterator，初次调用此iterator时，会执行定义中的第一个函数并返回第二个函数以供调用。</span><br><span class=\"line\">apply: 可以让我们给一个函数预绑定多个参数并生成一个可直接调用的新函数，简化代码。</span><br><span class=\"line\">nextTick: 与nodejs的nextTick一样，再最后调用函数。</span><br><span class=\"line\">times: 异步运行,times可以指定调用几次，并把结果合并到数组中返回</span><br><span class=\"line\">timesSeries: 与time类似，唯一不同的是同步执行</span><br></pre></td></tr></table></figure>\n<h2 id=\"工具类-Utils\"><a href=\"#工具类-Utils\" class=\"headerlink\" title=\"工具类: Utils\"></a>工具类: Utils</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memoize: 让某一个函数在内存中缓存它的计算结果。对于相同的参数，只计算一次，下次就直接拿到之前算好的结果。</span><br><span class=\"line\">unmemoize: 让已经被缓存的函数，返回不缓存的函数引用。</span><br><span class=\"line\">log: 执行某异步函数，并记录它的返回值，日志输出。</span><br><span class=\"line\">dir: 与log类似，不同之处在于，会调用浏览器的console.dir()函数，显示为DOM视图。</span><br><span class=\"line\">noConflict: 如果之前已经在全局域中定义了async变量，当导入本async.js时，会先把之前的async变量保存起来，然后覆盖它。仅仅用于浏览器端，在nodejs中没用，这里无法演示。</span><br></pre></td></tr></table></figure>"},{"title":"node-crawl","date":"2015-12-01T08:03:21.000Z","_content":"\n## 项目介绍\n> request+cheerio+mysql\n\n## read\n```\nvar request = require('request');\nvar cheerio = require('cheerio');\nvar util = require('util');\nvar debug = require('debug')('crawl:read');\nexports.classList = function(url,callback){\n    debug('读取文章的分类信息:%s',url);\n    request(url,function(err,res){\n        if(err)\n            return callback(err);\n        var $ = cheerio.load(res.body.toString());\n        var classList = [];\n        $('.panel_body li a').each(function(){\n            var $this = $(this);\n            var item = {\n                name:$this.text().trim(),\n                url:\"http://blog.csdn.net\"+$this.attr('href')\n            };\n            var s = item.url.match(/\\/article\\/category\\/(\\d+)/);\n            if(Array.isArray(s)){\n                item.id = s[1];\n                classList.push(item);\n            }\n        });\n        callback(err,classList);\n    })\n};\nexports.classArticles = function(url,callback){\n    debug('读取分类下面的文章列表:%s',url);\n    request(url,function(err,res){\n        if(err)\n            return callback(err);\n        var articleList = [];\n        var $ = cheerio.load(res.body.toString());\n        $('#article_list .article_item').each(function(){\n            var $this = $(this);\n            var $title = $this.find('.link_title a');\n            var $time = $this.find('.article_manage .link_postdate');\n            var item = {\n                title:$title.text().trim(),\n                url: \"http://blog.csdn.net/\"+$title.attr('href'),\n                time:$time.text().trim()\n            }\n            var s = item.url.match(/\\/article\\/details\\/(\\d+)/);\n            if(Array.isArray(s)){\n                item.id = s[1];\n                articleList.push(item);\n            }\n        });\n        callback(err,articleList);\n    })\n};\nexports.articleDetail = function(url,callback){\n    debug('读取文章的详情:%s',url);\n    request(url,function(err,res){\n        if(err)\n            return callback(err);\n        var tags = [];\n        var $ = cheerio.load(res.body.toString());\n        $('.tag2box a').each(function(){\n            var tag = $(this).text().trim();\n            if(tag){\n                tags.push(tag);\n            }\n        });\n        var content = $('.article_content').html().trim();\n        callback(err,{tags:tags,content:content});\n\n    })\n};\n```\n\n## write\n```\nvar mysql = require('mysql');\nvar debug = require('debug')('crawl:write');\nvar async = require('async');\nvar connection = mysql.createConnection({\n    host:'127.0.0.1',\n    user:'root',\n    password:'',\n    database:'coffee'\n});\nconnection.connect();\nexports.classList = function(classList,callback){\n    debug('保存文章的分类列表');\n    async.eachSeries(classList,function(item,next){\n        connection.query('replace into class_list(id,name,url) value(?,?,?)',[item.id,item.name,item.url],next);\n    },callback)\n};\nexports.classArticles = function(class_id,list,callback){\n    debug('保存分类下面的文章列表%d',class_id);\n    async.eachSeries(list,function(item,next){\n        connection.query('replace into article_list(id,title,url,postdate,class_id) value(?,?,?,?,?)',[item.id,item.title,item.url,item.time,class_id],next);\n    },callback)\n};\nexports.articleDetail = function(id,title,tags,content,callback){\n    debug('保存文章的详情%d',id);\n    connection.query('replace into article_detail(id,title,tags,content) values(?,?,?,?)',[id,title,tags.join(','),content],callback);\n}\n```\n\n## app\n```\nvar read = require('./read');\nvar write = require('./write');\nvar debug = require('debug')(\"craw:app\");\nvar async = require('async');\nvar classList;\nvar classArticles = {};\nvar articles = [];//所有的文章的ID列表\nvar url = 'http://blog.csdn.net/hongqishi';\nasync.series([function(next){\n    read.classList(url,function(err,list){\n        classList = list;\n        next(err);\n    })\n},function(next){\n    write.classList(classList,next);\n},function(next){\n    //读取每个分类下面的文章列表\n    async.eachSeries(classList,function(cls,done){\n        read.classArticles(cls.url,function(err,list){\n            classArticles[cls.id] = list;//key=分类ID value=文章列表\n            done(err);\n        });\n    },next);\n},function(next){\n    //保存每一个分类和分类下面的文章\n    async.eachSeries(Object.keys(classArticles),function(class_id,done){\n        write.classArticles(class_id,classArticles[class_id],done)\n    },next);\n},function(next){\n    debug('消除重复的文章');\n    var article = {};\n    Object.keys(classArticles).forEach(function(class_id){\n        classArticles[class_id].forEach(function(item){\n            article[item.id] = item;\n        });\n    });\n    Object.keys(article).forEach(function(id){\n        articles.push(article[id]);\n    });\n    next();\n},function(next){\n    debug('保存文章详情');\n    async.eachSeries(articles,function(item,done){\n        read.articleDetail(item.url,function(err,ret){\n            write.articleDetail(item.id,item.title,ret.tags,ret.content,done);\n        })\n    },next);\n}],function(err,result){\n    if(err)\n        console.error(err);\n    console.log('done');\n});\n```\n\n## crontab\n```\nvar crontab = require('cron').CronJob;\nvar job = new crontab(\"* * * * * * *\",function(){\n    console.log('每秒一次');\n});\njob.start();\n/**\n * 秒 分 小时 日 月 dayofweek\n *  * 每xx一次\n *  a-b 第几秒到第几秒\n *  星/n 每隔多少秒\n *  a-b/n 第几秒到第几秒,每隔多少秒\n **/\n```","source":"_posts/node-crawl.md","raw":"title: node-crawl\ndate: 2015-12-01 16:03:21\ntags:\n- request\n- cheerio\n- 爬虫\ncategories: 笔记\n---\n\n## 项目介绍\n> request+cheerio+mysql\n\n## read\n```\nvar request = require('request');\nvar cheerio = require('cheerio');\nvar util = require('util');\nvar debug = require('debug')('crawl:read');\nexports.classList = function(url,callback){\n    debug('读取文章的分类信息:%s',url);\n    request(url,function(err,res){\n        if(err)\n            return callback(err);\n        var $ = cheerio.load(res.body.toString());\n        var classList = [];\n        $('.panel_body li a').each(function(){\n            var $this = $(this);\n            var item = {\n                name:$this.text().trim(),\n                url:\"http://blog.csdn.net\"+$this.attr('href')\n            };\n            var s = item.url.match(/\\/article\\/category\\/(\\d+)/);\n            if(Array.isArray(s)){\n                item.id = s[1];\n                classList.push(item);\n            }\n        });\n        callback(err,classList);\n    })\n};\nexports.classArticles = function(url,callback){\n    debug('读取分类下面的文章列表:%s',url);\n    request(url,function(err,res){\n        if(err)\n            return callback(err);\n        var articleList = [];\n        var $ = cheerio.load(res.body.toString());\n        $('#article_list .article_item').each(function(){\n            var $this = $(this);\n            var $title = $this.find('.link_title a');\n            var $time = $this.find('.article_manage .link_postdate');\n            var item = {\n                title:$title.text().trim(),\n                url: \"http://blog.csdn.net/\"+$title.attr('href'),\n                time:$time.text().trim()\n            }\n            var s = item.url.match(/\\/article\\/details\\/(\\d+)/);\n            if(Array.isArray(s)){\n                item.id = s[1];\n                articleList.push(item);\n            }\n        });\n        callback(err,articleList);\n    })\n};\nexports.articleDetail = function(url,callback){\n    debug('读取文章的详情:%s',url);\n    request(url,function(err,res){\n        if(err)\n            return callback(err);\n        var tags = [];\n        var $ = cheerio.load(res.body.toString());\n        $('.tag2box a').each(function(){\n            var tag = $(this).text().trim();\n            if(tag){\n                tags.push(tag);\n            }\n        });\n        var content = $('.article_content').html().trim();\n        callback(err,{tags:tags,content:content});\n\n    })\n};\n```\n\n## write\n```\nvar mysql = require('mysql');\nvar debug = require('debug')('crawl:write');\nvar async = require('async');\nvar connection = mysql.createConnection({\n    host:'127.0.0.1',\n    user:'root',\n    password:'',\n    database:'coffee'\n});\nconnection.connect();\nexports.classList = function(classList,callback){\n    debug('保存文章的分类列表');\n    async.eachSeries(classList,function(item,next){\n        connection.query('replace into class_list(id,name,url) value(?,?,?)',[item.id,item.name,item.url],next);\n    },callback)\n};\nexports.classArticles = function(class_id,list,callback){\n    debug('保存分类下面的文章列表%d',class_id);\n    async.eachSeries(list,function(item,next){\n        connection.query('replace into article_list(id,title,url,postdate,class_id) value(?,?,?,?,?)',[item.id,item.title,item.url,item.time,class_id],next);\n    },callback)\n};\nexports.articleDetail = function(id,title,tags,content,callback){\n    debug('保存文章的详情%d',id);\n    connection.query('replace into article_detail(id,title,tags,content) values(?,?,?,?)',[id,title,tags.join(','),content],callback);\n}\n```\n\n## app\n```\nvar read = require('./read');\nvar write = require('./write');\nvar debug = require('debug')(\"craw:app\");\nvar async = require('async');\nvar classList;\nvar classArticles = {};\nvar articles = [];//所有的文章的ID列表\nvar url = 'http://blog.csdn.net/hongqishi';\nasync.series([function(next){\n    read.classList(url,function(err,list){\n        classList = list;\n        next(err);\n    })\n},function(next){\n    write.classList(classList,next);\n},function(next){\n    //读取每个分类下面的文章列表\n    async.eachSeries(classList,function(cls,done){\n        read.classArticles(cls.url,function(err,list){\n            classArticles[cls.id] = list;//key=分类ID value=文章列表\n            done(err);\n        });\n    },next);\n},function(next){\n    //保存每一个分类和分类下面的文章\n    async.eachSeries(Object.keys(classArticles),function(class_id,done){\n        write.classArticles(class_id,classArticles[class_id],done)\n    },next);\n},function(next){\n    debug('消除重复的文章');\n    var article = {};\n    Object.keys(classArticles).forEach(function(class_id){\n        classArticles[class_id].forEach(function(item){\n            article[item.id] = item;\n        });\n    });\n    Object.keys(article).forEach(function(id){\n        articles.push(article[id]);\n    });\n    next();\n},function(next){\n    debug('保存文章详情');\n    async.eachSeries(articles,function(item,done){\n        read.articleDetail(item.url,function(err,ret){\n            write.articleDetail(item.id,item.title,ret.tags,ret.content,done);\n        })\n    },next);\n}],function(err,result){\n    if(err)\n        console.error(err);\n    console.log('done');\n});\n```\n\n## crontab\n```\nvar crontab = require('cron').CronJob;\nvar job = new crontab(\"* * * * * * *\",function(){\n    console.log('每秒一次');\n});\njob.start();\n/**\n * 秒 分 小时 日 月 dayofweek\n *  * 每xx一次\n *  a-b 第几秒到第几秒\n *  星/n 每隔多少秒\n *  a-b/n 第几秒到第几秒,每隔多少秒\n **/\n```","slug":"node-crawl","published":1,"updated":"2016-03-17T16:20:42.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8du001fe4gjqyev8fb5","content":"<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><blockquote>\n<p>request+cheerio+mysql</p>\n</blockquote>\n<h2 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read\"></a>read</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var request = require(&apos;request&apos;);</span><br><span class=\"line\">var cheerio = require(&apos;cheerio&apos;);</span><br><span class=\"line\">var util = require(&apos;util&apos;);</span><br><span class=\"line\">var debug = require(&apos;debug&apos;)(&apos;crawl:read&apos;);</span><br><span class=\"line\">exports.classList = function(url,callback)&#123;</span><br><span class=\"line\">    debug(&apos;读取文章的分类信息:%s&apos;,url);</span><br><span class=\"line\">    request(url,function(err,res)&#123;</span><br><span class=\"line\">        if(err)</span><br><span class=\"line\">            return callback(err);</span><br><span class=\"line\">        var $ = cheerio.load(res.body.toString());</span><br><span class=\"line\">        var classList = [];</span><br><span class=\"line\">        $(&apos;.panel_body li a&apos;).each(function()&#123;</span><br><span class=\"line\">            var $this = $(this);</span><br><span class=\"line\">            var item = &#123;</span><br><span class=\"line\">                name:$this.text().trim(),</span><br><span class=\"line\">                url:&quot;http://blog.csdn.net&quot;+$this.attr(&apos;href&apos;)</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            var s = item.url.match(/\\/article\\/category\\/(\\d+)/);</span><br><span class=\"line\">            if(Array.isArray(s))&#123;</span><br><span class=\"line\">                item.id = s[1];</span><br><span class=\"line\">                classList.push(item);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        callback(err,classList);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.classArticles = function(url,callback)&#123;</span><br><span class=\"line\">    debug(&apos;读取分类下面的文章列表:%s&apos;,url);</span><br><span class=\"line\">    request(url,function(err,res)&#123;</span><br><span class=\"line\">        if(err)</span><br><span class=\"line\">            return callback(err);</span><br><span class=\"line\">        var articleList = [];</span><br><span class=\"line\">        var $ = cheerio.load(res.body.toString());</span><br><span class=\"line\">        $(&apos;#article_list .article_item&apos;).each(function()&#123;</span><br><span class=\"line\">            var $this = $(this);</span><br><span class=\"line\">            var $title = $this.find(&apos;.link_title a&apos;);</span><br><span class=\"line\">            var $time = $this.find(&apos;.article_manage .link_postdate&apos;);</span><br><span class=\"line\">            var item = &#123;</span><br><span class=\"line\">                title:$title.text().trim(),</span><br><span class=\"line\">                url: &quot;http://blog.csdn.net/&quot;+$title.attr(&apos;href&apos;),</span><br><span class=\"line\">                time:$time.text().trim()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            var s = item.url.match(/\\/article\\/details\\/(\\d+)/);</span><br><span class=\"line\">            if(Array.isArray(s))&#123;</span><br><span class=\"line\">                item.id = s[1];</span><br><span class=\"line\">                articleList.push(item);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        callback(err,articleList);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.articleDetail = function(url,callback)&#123;</span><br><span class=\"line\">    debug(&apos;读取文章的详情:%s&apos;,url);</span><br><span class=\"line\">    request(url,function(err,res)&#123;</span><br><span class=\"line\">        if(err)</span><br><span class=\"line\">            return callback(err);</span><br><span class=\"line\">        var tags = [];</span><br><span class=\"line\">        var $ = cheerio.load(res.body.toString());</span><br><span class=\"line\">        $(&apos;.tag2box a&apos;).each(function()&#123;</span><br><span class=\"line\">            var tag = $(this).text().trim();</span><br><span class=\"line\">            if(tag)&#123;</span><br><span class=\"line\">                tags.push(tag);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        var content = $(&apos;.article_content&apos;).html().trim();</span><br><span class=\"line\">        callback(err,&#123;tags:tags,content:content&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write\"></a>write</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql = require(&apos;mysql&apos;);</span><br><span class=\"line\">var debug = require(&apos;debug&apos;)(&apos;crawl:write&apos;);</span><br><span class=\"line\">var async = require(&apos;async&apos;);</span><br><span class=\"line\">var connection = mysql.createConnection(&#123;</span><br><span class=\"line\">    host:&apos;127.0.0.1&apos;,</span><br><span class=\"line\">    user:&apos;root&apos;,</span><br><span class=\"line\">    password:&apos;&apos;,</span><br><span class=\"line\">    database:&apos;coffee&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">exports.classList = function(classList,callback)&#123;</span><br><span class=\"line\">    debug(&apos;保存文章的分类列表&apos;);</span><br><span class=\"line\">    async.eachSeries(classList,function(item,next)&#123;</span><br><span class=\"line\">        connection.query(&apos;replace into class_list(id,name,url) value(?,?,?)&apos;,[item.id,item.name,item.url],next);</span><br><span class=\"line\">    &#125;,callback)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.classArticles = function(class_id,list,callback)&#123;</span><br><span class=\"line\">    debug(&apos;保存分类下面的文章列表%d&apos;,class_id);</span><br><span class=\"line\">    async.eachSeries(list,function(item,next)&#123;</span><br><span class=\"line\">        connection.query(&apos;replace into article_list(id,title,url,postdate,class_id) value(?,?,?,?,?)&apos;,[item.id,item.title,item.url,item.time,class_id],next);</span><br><span class=\"line\">    &#125;,callback)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.articleDetail = function(id,title,tags,content,callback)&#123;</span><br><span class=\"line\">    debug(&apos;保存文章的详情%d&apos;,id);</span><br><span class=\"line\">    connection.query(&apos;replace into article_detail(id,title,tags,content) values(?,?,?,?)&apos;,[id,title,tags.join(&apos;,&apos;),content],callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"app\"><a href=\"#app\" class=\"headerlink\" title=\"app\"></a>app</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var read = require(&apos;./read&apos;);</span><br><span class=\"line\">var write = require(&apos;./write&apos;);</span><br><span class=\"line\">var debug = require(&apos;debug&apos;)(&quot;craw:app&quot;);</span><br><span class=\"line\">var async = require(&apos;async&apos;);</span><br><span class=\"line\">var classList;</span><br><span class=\"line\">var classArticles = &#123;&#125;;</span><br><span class=\"line\">var articles = [];//所有的文章的ID列表</span><br><span class=\"line\">var url = &apos;http://blog.csdn.net/hongqishi&apos;;</span><br><span class=\"line\">async.series([function(next)&#123;</span><br><span class=\"line\">    read.classList(url,function(err,list)&#123;</span><br><span class=\"line\">        classList = list;</span><br><span class=\"line\">        next(err);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,function(next)&#123;</span><br><span class=\"line\">    write.classList(classList,next);</span><br><span class=\"line\">&#125;,function(next)&#123;</span><br><span class=\"line\">    //读取每个分类下面的文章列表</span><br><span class=\"line\">    async.eachSeries(classList,function(cls,done)&#123;</span><br><span class=\"line\">        read.classArticles(cls.url,function(err,list)&#123;</span><br><span class=\"line\">            classArticles[cls.id] = list;//key=分类ID value=文章列表</span><br><span class=\"line\">            done(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,next);</span><br><span class=\"line\">&#125;,function(next)&#123;</span><br><span class=\"line\">    //保存每一个分类和分类下面的文章</span><br><span class=\"line\">    async.eachSeries(Object.keys(classArticles),function(class_id,done)&#123;</span><br><span class=\"line\">        write.classArticles(class_id,classArticles[class_id],done)</span><br><span class=\"line\">    &#125;,next);</span><br><span class=\"line\">&#125;,function(next)&#123;</span><br><span class=\"line\">    debug(&apos;消除重复的文章&apos;);</span><br><span class=\"line\">    var article = &#123;&#125;;</span><br><span class=\"line\">    Object.keys(classArticles).forEach(function(class_id)&#123;</span><br><span class=\"line\">        classArticles[class_id].forEach(function(item)&#123;</span><br><span class=\"line\">            article[item.id] = item;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    Object.keys(article).forEach(function(id)&#123;</span><br><span class=\"line\">        articles.push(article[id]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;,function(next)&#123;</span><br><span class=\"line\">    debug(&apos;保存文章详情&apos;);</span><br><span class=\"line\">    async.eachSeries(articles,function(item,done)&#123;</span><br><span class=\"line\">        read.articleDetail(item.url,function(err,ret)&#123;</span><br><span class=\"line\">            write.articleDetail(item.id,item.title,ret.tags,ret.content,done);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,next);</span><br><span class=\"line\">&#125;],function(err,result)&#123;</span><br><span class=\"line\">    if(err)</span><br><span class=\"line\">        console.error(err);</span><br><span class=\"line\">    console.log(&apos;done&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"crontab\"><a href=\"#crontab\" class=\"headerlink\" title=\"crontab\"></a>crontab</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var crontab = require(&apos;cron&apos;).CronJob;</span><br><span class=\"line\">var job = new crontab(&quot;* * * * * * *&quot;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;每秒一次&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">job.start();</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 秒 分 小时 日 月 dayofweek</span><br><span class=\"line\"> *  * 每xx一次</span><br><span class=\"line\"> *  a-b 第几秒到第几秒</span><br><span class=\"line\"> *  星/n 每隔多少秒</span><br><span class=\"line\"> *  a-b/n 第几秒到第几秒,每隔多少秒</span><br><span class=\"line\"> **/</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><blockquote>\n<p>request+cheerio+mysql</p>\n</blockquote>\n<h2 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read\"></a>read</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var request = require(&apos;request&apos;);</span><br><span class=\"line\">var cheerio = require(&apos;cheerio&apos;);</span><br><span class=\"line\">var util = require(&apos;util&apos;);</span><br><span class=\"line\">var debug = require(&apos;debug&apos;)(&apos;crawl:read&apos;);</span><br><span class=\"line\">exports.classList = function(url,callback)&#123;</span><br><span class=\"line\">    debug(&apos;读取文章的分类信息:%s&apos;,url);</span><br><span class=\"line\">    request(url,function(err,res)&#123;</span><br><span class=\"line\">        if(err)</span><br><span class=\"line\">            return callback(err);</span><br><span class=\"line\">        var $ = cheerio.load(res.body.toString());</span><br><span class=\"line\">        var classList = [];</span><br><span class=\"line\">        $(&apos;.panel_body li a&apos;).each(function()&#123;</span><br><span class=\"line\">            var $this = $(this);</span><br><span class=\"line\">            var item = &#123;</span><br><span class=\"line\">                name:$this.text().trim(),</span><br><span class=\"line\">                url:&quot;http://blog.csdn.net&quot;+$this.attr(&apos;href&apos;)</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            var s = item.url.match(/\\/article\\/category\\/(\\d+)/);</span><br><span class=\"line\">            if(Array.isArray(s))&#123;</span><br><span class=\"line\">                item.id = s[1];</span><br><span class=\"line\">                classList.push(item);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        callback(err,classList);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.classArticles = function(url,callback)&#123;</span><br><span class=\"line\">    debug(&apos;读取分类下面的文章列表:%s&apos;,url);</span><br><span class=\"line\">    request(url,function(err,res)&#123;</span><br><span class=\"line\">        if(err)</span><br><span class=\"line\">            return callback(err);</span><br><span class=\"line\">        var articleList = [];</span><br><span class=\"line\">        var $ = cheerio.load(res.body.toString());</span><br><span class=\"line\">        $(&apos;#article_list .article_item&apos;).each(function()&#123;</span><br><span class=\"line\">            var $this = $(this);</span><br><span class=\"line\">            var $title = $this.find(&apos;.link_title a&apos;);</span><br><span class=\"line\">            var $time = $this.find(&apos;.article_manage .link_postdate&apos;);</span><br><span class=\"line\">            var item = &#123;</span><br><span class=\"line\">                title:$title.text().trim(),</span><br><span class=\"line\">                url: &quot;http://blog.csdn.net/&quot;+$title.attr(&apos;href&apos;),</span><br><span class=\"line\">                time:$time.text().trim()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            var s = item.url.match(/\\/article\\/details\\/(\\d+)/);</span><br><span class=\"line\">            if(Array.isArray(s))&#123;</span><br><span class=\"line\">                item.id = s[1];</span><br><span class=\"line\">                articleList.push(item);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        callback(err,articleList);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.articleDetail = function(url,callback)&#123;</span><br><span class=\"line\">    debug(&apos;读取文章的详情:%s&apos;,url);</span><br><span class=\"line\">    request(url,function(err,res)&#123;</span><br><span class=\"line\">        if(err)</span><br><span class=\"line\">            return callback(err);</span><br><span class=\"line\">        var tags = [];</span><br><span class=\"line\">        var $ = cheerio.load(res.body.toString());</span><br><span class=\"line\">        $(&apos;.tag2box a&apos;).each(function()&#123;</span><br><span class=\"line\">            var tag = $(this).text().trim();</span><br><span class=\"line\">            if(tag)&#123;</span><br><span class=\"line\">                tags.push(tag);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        var content = $(&apos;.article_content&apos;).html().trim();</span><br><span class=\"line\">        callback(err,&#123;tags:tags,content:content&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write\"></a>write</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql = require(&apos;mysql&apos;);</span><br><span class=\"line\">var debug = require(&apos;debug&apos;)(&apos;crawl:write&apos;);</span><br><span class=\"line\">var async = require(&apos;async&apos;);</span><br><span class=\"line\">var connection = mysql.createConnection(&#123;</span><br><span class=\"line\">    host:&apos;127.0.0.1&apos;,</span><br><span class=\"line\">    user:&apos;root&apos;,</span><br><span class=\"line\">    password:&apos;&apos;,</span><br><span class=\"line\">    database:&apos;coffee&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">exports.classList = function(classList,callback)&#123;</span><br><span class=\"line\">    debug(&apos;保存文章的分类列表&apos;);</span><br><span class=\"line\">    async.eachSeries(classList,function(item,next)&#123;</span><br><span class=\"line\">        connection.query(&apos;replace into class_list(id,name,url) value(?,?,?)&apos;,[item.id,item.name,item.url],next);</span><br><span class=\"line\">    &#125;,callback)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.classArticles = function(class_id,list,callback)&#123;</span><br><span class=\"line\">    debug(&apos;保存分类下面的文章列表%d&apos;,class_id);</span><br><span class=\"line\">    async.eachSeries(list,function(item,next)&#123;</span><br><span class=\"line\">        connection.query(&apos;replace into article_list(id,title,url,postdate,class_id) value(?,?,?,?,?)&apos;,[item.id,item.title,item.url,item.time,class_id],next);</span><br><span class=\"line\">    &#125;,callback)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.articleDetail = function(id,title,tags,content,callback)&#123;</span><br><span class=\"line\">    debug(&apos;保存文章的详情%d&apos;,id);</span><br><span class=\"line\">    connection.query(&apos;replace into article_detail(id,title,tags,content) values(?,?,?,?)&apos;,[id,title,tags.join(&apos;,&apos;),content],callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"app\"><a href=\"#app\" class=\"headerlink\" title=\"app\"></a>app</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var read = require(&apos;./read&apos;);</span><br><span class=\"line\">var write = require(&apos;./write&apos;);</span><br><span class=\"line\">var debug = require(&apos;debug&apos;)(&quot;craw:app&quot;);</span><br><span class=\"line\">var async = require(&apos;async&apos;);</span><br><span class=\"line\">var classList;</span><br><span class=\"line\">var classArticles = &#123;&#125;;</span><br><span class=\"line\">var articles = [];//所有的文章的ID列表</span><br><span class=\"line\">var url = &apos;http://blog.csdn.net/hongqishi&apos;;</span><br><span class=\"line\">async.series([function(next)&#123;</span><br><span class=\"line\">    read.classList(url,function(err,list)&#123;</span><br><span class=\"line\">        classList = list;</span><br><span class=\"line\">        next(err);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,function(next)&#123;</span><br><span class=\"line\">    write.classList(classList,next);</span><br><span class=\"line\">&#125;,function(next)&#123;</span><br><span class=\"line\">    //读取每个分类下面的文章列表</span><br><span class=\"line\">    async.eachSeries(classList,function(cls,done)&#123;</span><br><span class=\"line\">        read.classArticles(cls.url,function(err,list)&#123;</span><br><span class=\"line\">            classArticles[cls.id] = list;//key=分类ID value=文章列表</span><br><span class=\"line\">            done(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,next);</span><br><span class=\"line\">&#125;,function(next)&#123;</span><br><span class=\"line\">    //保存每一个分类和分类下面的文章</span><br><span class=\"line\">    async.eachSeries(Object.keys(classArticles),function(class_id,done)&#123;</span><br><span class=\"line\">        write.classArticles(class_id,classArticles[class_id],done)</span><br><span class=\"line\">    &#125;,next);</span><br><span class=\"line\">&#125;,function(next)&#123;</span><br><span class=\"line\">    debug(&apos;消除重复的文章&apos;);</span><br><span class=\"line\">    var article = &#123;&#125;;</span><br><span class=\"line\">    Object.keys(classArticles).forEach(function(class_id)&#123;</span><br><span class=\"line\">        classArticles[class_id].forEach(function(item)&#123;</span><br><span class=\"line\">            article[item.id] = item;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    Object.keys(article).forEach(function(id)&#123;</span><br><span class=\"line\">        articles.push(article[id]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;,function(next)&#123;</span><br><span class=\"line\">    debug(&apos;保存文章详情&apos;);</span><br><span class=\"line\">    async.eachSeries(articles,function(item,done)&#123;</span><br><span class=\"line\">        read.articleDetail(item.url,function(err,ret)&#123;</span><br><span class=\"line\">            write.articleDetail(item.id,item.title,ret.tags,ret.content,done);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,next);</span><br><span class=\"line\">&#125;],function(err,result)&#123;</span><br><span class=\"line\">    if(err)</span><br><span class=\"line\">        console.error(err);</span><br><span class=\"line\">    console.log(&apos;done&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"crontab\"><a href=\"#crontab\" class=\"headerlink\" title=\"crontab\"></a>crontab</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var crontab = require(&apos;cron&apos;).CronJob;</span><br><span class=\"line\">var job = new crontab(&quot;* * * * * * *&quot;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;每秒一次&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">job.start();</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 秒 分 小时 日 月 dayofweek</span><br><span class=\"line\"> *  * 每xx一次</span><br><span class=\"line\"> *  a-b 第几秒到第几秒</span><br><span class=\"line\"> *  星/n 每隔多少秒</span><br><span class=\"line\"> *  a-b/n 第几秒到第几秒,每隔多少秒</span><br><span class=\"line\"> **/</span><br></pre></td></tr></table></figure>"},{"title":"node-03event","date":"2015-10-28T13:11:51.000Z","_content":"\n## 自定义event事件\n```\nfunction Event(){\n    this._events = {};\n}\n\n//注册事件\nEvent.prototype.on = function(eventName,listener){\n    if(this._events[eventName]){\n\n    }else{\n        this._events[eventName] = [listener];\n    }\n}\n\n//发射事件\nEvent.prototype.emit = function(eventname){\n    for(var i=0;i<this._events[eventname].length;i++){\n        this._events[eventname][i].call(this);\n    }\n}\n\nvar button = new Event();\nbutton.on('click',function(){\n    console.log('clicked');\n});\nbutton.emit('click');\n```\n\n## 自定义多个事件，且传递参数\n```\nfunction Event(name){\n    this.name = name;\n    this._events = {};\n}\n\n//注册事件\nEvent.prototype.on = function(eventName,listener){\n    if(this._events[eventName]){\n        this._events[eventName].push(listener);\n    }else{\n        this._events[eventName] = [listener];\n    }\n}\n\n//发射事件\nEvent.prototype.emit = function(eventname){\n    var handles = this._events[eventname];\n    var args = Array.prototype.slice.call(arguments,1);\n    for(var i=0;i<handles.length;i++){\n        this._events[eventname][i].apply(this,args);\n    }\n}\n\nvar button = new Event(\"confirm\");\nfunction show1(words){\n    console.log(this.name,'show1',words);\n}\nfunction show2(words){\n    console.log(this.name,'show2',words);\n}\nbutton.on('click',show1);\nbutton.on('click',show2);\nbutton.emit('click','welcome');\n```\n\n## node封装的event\n```\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nfunction Teacher(name){\n    this.name = name;\n}\n\nutil.inherits(Teacher,EventEmitter);\n\nvar coffee = new Teacher();\ncoffee.on('hungry',function(){\n    console.log('吃饭');\n});\n\ncoffee.emit('hungry');\n```\n","source":"_posts/node-03event.md","raw":"title: node-03event\ndate: 2015-10-28 21:11:51\ntags:\n- node\n- event\n- 学习笔记\ncategories: 笔记\n---\n\n## 自定义event事件\n```\nfunction Event(){\n    this._events = {};\n}\n\n//注册事件\nEvent.prototype.on = function(eventName,listener){\n    if(this._events[eventName]){\n\n    }else{\n        this._events[eventName] = [listener];\n    }\n}\n\n//发射事件\nEvent.prototype.emit = function(eventname){\n    for(var i=0;i<this._events[eventname].length;i++){\n        this._events[eventname][i].call(this);\n    }\n}\n\nvar button = new Event();\nbutton.on('click',function(){\n    console.log('clicked');\n});\nbutton.emit('click');\n```\n\n## 自定义多个事件，且传递参数\n```\nfunction Event(name){\n    this.name = name;\n    this._events = {};\n}\n\n//注册事件\nEvent.prototype.on = function(eventName,listener){\n    if(this._events[eventName]){\n        this._events[eventName].push(listener);\n    }else{\n        this._events[eventName] = [listener];\n    }\n}\n\n//发射事件\nEvent.prototype.emit = function(eventname){\n    var handles = this._events[eventname];\n    var args = Array.prototype.slice.call(arguments,1);\n    for(var i=0;i<handles.length;i++){\n        this._events[eventname][i].apply(this,args);\n    }\n}\n\nvar button = new Event(\"confirm\");\nfunction show1(words){\n    console.log(this.name,'show1',words);\n}\nfunction show2(words){\n    console.log(this.name,'show2',words);\n}\nbutton.on('click',show1);\nbutton.on('click',show2);\nbutton.emit('click','welcome');\n```\n\n## node封装的event\n```\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nfunction Teacher(name){\n    this.name = name;\n}\n\nutil.inherits(Teacher,EventEmitter);\n\nvar coffee = new Teacher();\ncoffee.on('hungry',function(){\n    console.log('吃饭');\n});\n\ncoffee.emit('hungry');\n```\n","slug":"node-03event","published":1,"updated":"2015-10-29T13:44:16.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8dz001je4gjgtmilxbv","content":"<h2 id=\"自定义event事件\"><a href=\"#自定义event事件\" class=\"headerlink\" title=\"自定义event事件\"></a>自定义event事件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Event()&#123;</span><br><span class=\"line\">    this._events = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//注册事件</span><br><span class=\"line\">Event.prototype.on = function(eventName,listener)&#123;</span><br><span class=\"line\">    if(this._events[eventName])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        this._events[eventName] = [listener];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//发射事件</span><br><span class=\"line\">Event.prototype.emit = function(eventname)&#123;</span><br><span class=\"line\">    for(var i=0;i&lt;this._events[eventname].length;i++)&#123;</span><br><span class=\"line\">        this._events[eventname][i].call(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var button = new Event();</span><br><span class=\"line\">button.on(&apos;click&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;clicked&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">button.emit(&apos;click&apos;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义多个事件，且传递参数\"><a href=\"#自定义多个事件，且传递参数\" class=\"headerlink\" title=\"自定义多个事件，且传递参数\"></a>自定义多个事件，且传递参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Event(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this._events = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//注册事件</span><br><span class=\"line\">Event.prototype.on = function(eventName,listener)&#123;</span><br><span class=\"line\">    if(this._events[eventName])&#123;</span><br><span class=\"line\">        this._events[eventName].push(listener);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        this._events[eventName] = [listener];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//发射事件</span><br><span class=\"line\">Event.prototype.emit = function(eventname)&#123;</span><br><span class=\"line\">    var handles = this._events[eventname];</span><br><span class=\"line\">    var args = Array.prototype.slice.call(arguments,1);</span><br><span class=\"line\">    for(var i=0;i&lt;handles.length;i++)&#123;</span><br><span class=\"line\">        this._events[eventname][i].apply(this,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var button = new Event(&quot;confirm&quot;);</span><br><span class=\"line\">function show1(words)&#123;</span><br><span class=\"line\">    console.log(this.name,&apos;show1&apos;,words);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function show2(words)&#123;</span><br><span class=\"line\">    console.log(this.name,&apos;show2&apos;,words);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">button.on(&apos;click&apos;,show1);</span><br><span class=\"line\">button.on(&apos;click&apos;,show2);</span><br><span class=\"line\">button.emit(&apos;click&apos;,&apos;welcome&apos;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"node封装的event\"><a href=\"#node封装的event\" class=\"headerlink\" title=\"node封装的event\"></a>node封装的event</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var EventEmitter = require(&apos;events&apos;).EventEmitter;</span><br><span class=\"line\">var util = require(&apos;util&apos;);</span><br><span class=\"line\">function Teacher(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">util.inherits(Teacher,EventEmitter);</span><br><span class=\"line\"></span><br><span class=\"line\">var coffee = new Teacher();</span><br><span class=\"line\">coffee.on(&apos;hungry&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;吃饭&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">coffee.emit(&apos;hungry&apos;);</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"自定义event事件\"><a href=\"#自定义event事件\" class=\"headerlink\" title=\"自定义event事件\"></a>自定义event事件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Event()&#123;</span><br><span class=\"line\">    this._events = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//注册事件</span><br><span class=\"line\">Event.prototype.on = function(eventName,listener)&#123;</span><br><span class=\"line\">    if(this._events[eventName])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        this._events[eventName] = [listener];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//发射事件</span><br><span class=\"line\">Event.prototype.emit = function(eventname)&#123;</span><br><span class=\"line\">    for(var i=0;i&lt;this._events[eventname].length;i++)&#123;</span><br><span class=\"line\">        this._events[eventname][i].call(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var button = new Event();</span><br><span class=\"line\">button.on(&apos;click&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;clicked&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">button.emit(&apos;click&apos;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义多个事件，且传递参数\"><a href=\"#自定义多个事件，且传递参数\" class=\"headerlink\" title=\"自定义多个事件，且传递参数\"></a>自定义多个事件，且传递参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Event(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this._events = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//注册事件</span><br><span class=\"line\">Event.prototype.on = function(eventName,listener)&#123;</span><br><span class=\"line\">    if(this._events[eventName])&#123;</span><br><span class=\"line\">        this._events[eventName].push(listener);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        this._events[eventName] = [listener];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//发射事件</span><br><span class=\"line\">Event.prototype.emit = function(eventname)&#123;</span><br><span class=\"line\">    var handles = this._events[eventname];</span><br><span class=\"line\">    var args = Array.prototype.slice.call(arguments,1);</span><br><span class=\"line\">    for(var i=0;i&lt;handles.length;i++)&#123;</span><br><span class=\"line\">        this._events[eventname][i].apply(this,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var button = new Event(&quot;confirm&quot;);</span><br><span class=\"line\">function show1(words)&#123;</span><br><span class=\"line\">    console.log(this.name,&apos;show1&apos;,words);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function show2(words)&#123;</span><br><span class=\"line\">    console.log(this.name,&apos;show2&apos;,words);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">button.on(&apos;click&apos;,show1);</span><br><span class=\"line\">button.on(&apos;click&apos;,show2);</span><br><span class=\"line\">button.emit(&apos;click&apos;,&apos;welcome&apos;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"node封装的event\"><a href=\"#node封装的event\" class=\"headerlink\" title=\"node封装的event\"></a>node封装的event</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var EventEmitter = require(&apos;events&apos;).EventEmitter;</span><br><span class=\"line\">var util = require(&apos;util&apos;);</span><br><span class=\"line\">function Teacher(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">util.inherits(Teacher,EventEmitter);</span><br><span class=\"line\"></span><br><span class=\"line\">var coffee = new Teacher();</span><br><span class=\"line\">coffee.on(&apos;hungry&apos;,function()&#123;</span><br><span class=\"line\">    console.log(&apos;吃饭&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">coffee.emit(&apos;hungry&apos;);</span><br></pre></td></tr></table></figure>\n"},{"title":"zepto学习笔记","date":"2015-10-27T06:21:46.000Z","_content":"\n> Zepto的设计目的是有一个5-10K的通用库、下载并快速执行、有一个熟悉通用的API。\n\n| module | default | description |\n| ------ | :-------: | :----------- |\n| zepto\t| ✔\t| 核心模块；包含许多方法 |\n| event\t| ✔|\t通过on()& off()处理事件 |\n| ajax\t| ✔|\tXMLHttpRequest 和 JSONP 实用功能 |\n| form\t| ✔|\t序列化 & 提交web表单 |\n| ie\t|✔| \t增加支持桌面的Internet Explorer 10+和Windows Phone 8。 |\n| detect| |\t\t提供 $.os和 $.browser消息 |\n| fx\t\t| | The animate()方法 |\n| fx_methods|\t|\t以动画形式的 show, hide, toggle, 和 fade*()方法. |\n| assets|\t|\t实验性支持从DOM中移除image元素后清理iOS的内存。 |\n| data\t|\t|一个全面的 data()方法, 能够在内存中存储任意对象。 |\n|deferred |\t|\t提供 $.Deferredpromises API. 依赖\"callbacks\" 模块. 当包含这个模块时候, $.ajax() 支持promise接口链式的回调。 |\n| callbacks\t| |\t为\"deferred\"模块提供 $.Callbacks。 |\n| touch\t\t| | 在触摸设备上触发tap– 和 swipe– 相关事件。这适用于所有的`touch`(iOS, Android)和`pointer`事件(Windows Phone)。 |\n| gesture\t| |\t在触摸设备上触发 pinch 手势事件。 |\n| stack\t\t| | 提供 andSelf& end()链式调用方法 |\n| ios3\t\t| | String.prototype.trim 和 Array.prototype.reduce 方法 (如果他们不存在) ，以兼容 iOS 3.x. |\n\n## 如何自制zepto\n```\n    1.git clone https://github.com/madrobby/zepto.git\n    2.npm install 下载package.json里dependence\n    3.MODULES=\"zepto event data ...\" npm run-script dist\n    the resulting files are:\n    1.dist/zepto.js\n    2.dist/zepto.min.js\n```\n\n--- \n   \n### 整体上zeptojs的用法和jquery一样","source":"_posts/zepto学习笔记.md","raw":"title: zepto学习笔记\ndate: 2015-10-27 14:21:46\ntags:\n- zepto\n- 学习笔记\ncategories: 笔记\n---\n\n> Zepto的设计目的是有一个5-10K的通用库、下载并快速执行、有一个熟悉通用的API。\n\n| module | default | description |\n| ------ | :-------: | :----------- |\n| zepto\t| ✔\t| 核心模块；包含许多方法 |\n| event\t| ✔|\t通过on()& off()处理事件 |\n| ajax\t| ✔|\tXMLHttpRequest 和 JSONP 实用功能 |\n| form\t| ✔|\t序列化 & 提交web表单 |\n| ie\t|✔| \t增加支持桌面的Internet Explorer 10+和Windows Phone 8。 |\n| detect| |\t\t提供 $.os和 $.browser消息 |\n| fx\t\t| | The animate()方法 |\n| fx_methods|\t|\t以动画形式的 show, hide, toggle, 和 fade*()方法. |\n| assets|\t|\t实验性支持从DOM中移除image元素后清理iOS的内存。 |\n| data\t|\t|一个全面的 data()方法, 能够在内存中存储任意对象。 |\n|deferred |\t|\t提供 $.Deferredpromises API. 依赖\"callbacks\" 模块. 当包含这个模块时候, $.ajax() 支持promise接口链式的回调。 |\n| callbacks\t| |\t为\"deferred\"模块提供 $.Callbacks。 |\n| touch\t\t| | 在触摸设备上触发tap– 和 swipe– 相关事件。这适用于所有的`touch`(iOS, Android)和`pointer`事件(Windows Phone)。 |\n| gesture\t| |\t在触摸设备上触发 pinch 手势事件。 |\n| stack\t\t| | 提供 andSelf& end()链式调用方法 |\n| ios3\t\t| | String.prototype.trim 和 Array.prototype.reduce 方法 (如果他们不存在) ，以兼容 iOS 3.x. |\n\n## 如何自制zepto\n```\n    1.git clone https://github.com/madrobby/zepto.git\n    2.npm install 下载package.json里dependence\n    3.MODULES=\"zepto event data ...\" npm run-script dist\n    the resulting files are:\n    1.dist/zepto.js\n    2.dist/zepto.min.js\n```\n\n--- \n   \n### 整体上zeptojs的用法和jquery一样","slug":"zepto学习笔记","published":1,"updated":"2015-10-27T12:36:38.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilwhj8e5001me4gjvq9kgurp","content":"<blockquote>\n<p>Zepto的设计目的是有一个5-10K的通用库、下载并快速执行、有一个熟悉通用的API。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>module</th>\n<th style=\"text-align:center\">default</th>\n<th style=\"text-align:left\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>zepto</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">核心模块；包含许多方法</td>\n</tr>\n<tr>\n<td>event</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">通过on()&amp; off()处理事件</td>\n</tr>\n<tr>\n<td>ajax</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">XMLHttpRequest 和 JSONP 实用功能</td>\n</tr>\n<tr>\n<td>form</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">序列化 &amp; 提交web表单</td>\n</tr>\n<tr>\n<td>ie</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">增加支持桌面的Internet Explorer 10+和Windows Phone 8。</td>\n</tr>\n<tr>\n<td>detect</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">提供 $.os和 $.browser消息</td>\n</tr>\n<tr>\n<td>fx</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">The animate()方法</td>\n</tr>\n<tr>\n<td>fx_methods</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">以动画形式的 show, hide, toggle, 和 fade*()方法.</td>\n</tr>\n<tr>\n<td>assets</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">实验性支持从DOM中移除image元素后清理iOS的内存。</td>\n</tr>\n<tr>\n<td>data</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">一个全面的 data()方法, 能够在内存中存储任意对象。</td>\n</tr>\n<tr>\n<td>deferred</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">提供 $.Deferredpromises API. 依赖”callbacks” 模块. 当包含这个模块时候, $.ajax() 支持promise接口链式的回调。</td>\n</tr>\n<tr>\n<td>callbacks</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">为”deferred”模块提供 $.Callbacks。</td>\n</tr>\n<tr>\n<td>touch</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">在触摸设备上触发tap– 和 swipe– 相关事件。这适用于所有的<code>touch</code>(iOS, Android)和<code>pointer</code>事件(Windows Phone)。</td>\n</tr>\n<tr>\n<td>gesture</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">在触摸设备上触发 pinch 手势事件。</td>\n</tr>\n<tr>\n<td>stack</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">提供 andSelf&amp; end()链式调用方法</td>\n</tr>\n<tr>\n<td>ios3</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">String.prototype.trim 和 Array.prototype.reduce 方法 (如果他们不存在) ，以兼容 iOS 3.x.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"如何自制zepto\"><a href=\"#如何自制zepto\" class=\"headerlink\" title=\"如何自制zepto\"></a>如何自制zepto</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.git clone https://github.com/madrobby/zepto.git</span><br><span class=\"line\">2.npm install 下载package.json里dependence</span><br><span class=\"line\">3.MODULES=&quot;zepto event data ...&quot; npm run-script dist</span><br><span class=\"line\">the resulting files are:</span><br><span class=\"line\">1.dist/zepto.js</span><br><span class=\"line\">2.dist/zepto.min.js</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"整体上zeptojs的用法和jquery一样\"><a href=\"#整体上zeptojs的用法和jquery一样\" class=\"headerlink\" title=\"整体上zeptojs的用法和jquery一样\"></a>整体上zeptojs的用法和jquery一样</h3>","excerpt":"","more":"<blockquote>\n<p>Zepto的设计目的是有一个5-10K的通用库、下载并快速执行、有一个熟悉通用的API。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>module</th>\n<th style=\"text-align:center\">default</th>\n<th style=\"text-align:left\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>zepto</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">核心模块；包含许多方法</td>\n</tr>\n<tr>\n<td>event</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">通过on()&amp; off()处理事件</td>\n</tr>\n<tr>\n<td>ajax</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">XMLHttpRequest 和 JSONP 实用功能</td>\n</tr>\n<tr>\n<td>form</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">序列化 &amp; 提交web表单</td>\n</tr>\n<tr>\n<td>ie</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">增加支持桌面的Internet Explorer 10+和Windows Phone 8。</td>\n</tr>\n<tr>\n<td>detect</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">提供 $.os和 $.browser消息</td>\n</tr>\n<tr>\n<td>fx</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">The animate()方法</td>\n</tr>\n<tr>\n<td>fx_methods</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">以动画形式的 show, hide, toggle, 和 fade*()方法.</td>\n</tr>\n<tr>\n<td>assets</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">实验性支持从DOM中移除image元素后清理iOS的内存。</td>\n</tr>\n<tr>\n<td>data</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">一个全面的 data()方法, 能够在内存中存储任意对象。</td>\n</tr>\n<tr>\n<td>deferred</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">提供 $.Deferredpromises API. 依赖”callbacks” 模块. 当包含这个模块时候, $.ajax() 支持promise接口链式的回调。</td>\n</tr>\n<tr>\n<td>callbacks</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">为”deferred”模块提供 $.Callbacks。</td>\n</tr>\n<tr>\n<td>touch</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">在触摸设备上触发tap– 和 swipe– 相关事件。这适用于所有的<code>touch</code>(iOS, Android)和<code>pointer</code>事件(Windows Phone)。</td>\n</tr>\n<tr>\n<td>gesture</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">在触摸设备上触发 pinch 手势事件。</td>\n</tr>\n<tr>\n<td>stack</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">提供 andSelf&amp; end()链式调用方法</td>\n</tr>\n<tr>\n<td>ios3</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">String.prototype.trim 和 Array.prototype.reduce 方法 (如果他们不存在) ，以兼容 iOS 3.x.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"如何自制zepto\"><a href=\"#如何自制zepto\" class=\"headerlink\" title=\"如何自制zepto\"></a>如何自制zepto</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.git clone https://github.com/madrobby/zepto.git</span><br><span class=\"line\">2.npm install 下载package.json里dependence</span><br><span class=\"line\">3.MODULES=&quot;zepto event data ...&quot; npm run-script dist</span><br><span class=\"line\">the resulting files are:</span><br><span class=\"line\">1.dist/zepto.js</span><br><span class=\"line\">2.dist/zepto.min.js</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"整体上zeptojs的用法和jquery一样\"><a href=\"#整体上zeptojs的用法和jquery一样\" class=\"headerlink\" title=\"整体上zeptojs的用法和jquery一样\"></a>整体上zeptojs的用法和jquery一样</h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"cilwhj8640000e4gjh4618866","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj86k0006e4gjsbohtlv8"},{"post_id":"cilwhj86a0001e4gj9mpve986","category_id":"cilwhj86j0005e4gjcbkv2c0b","_id":"cilwhj86m0008e4gje1g1ufus"},{"post_id":"cilwhj8c7000ge4gjzo2n0376","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8cj000ke4gjbzrhrd2q"},{"post_id":"cilwhj8c9000he4gjkdv5jy93","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8co000me4gjlgi9ddr6"},{"post_id":"cilwhj8cd000je4gj9zxzk1mg","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8cv000qe4gj0b6lmzc4"},{"post_id":"cilwhj8ck000le4gjfyj3vm47","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8cy000te4gjron3gk63"},{"post_id":"cilwhj8cq000oe4gjunmwxxm7","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8da000xe4gj5h9ujzal"},{"post_id":"cilwhj8cw000re4gjr54sxi4e","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8dd0010e4gjb2yyjd97"},{"post_id":"cilwhj8cz000ue4gj4rvg5qml","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8dh0014e4gj6e5lv27i"},{"post_id":"cilwhj8da000ye4gju22jy4tb","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8dj0017e4gju1jzlga4"},{"post_id":"cilwhj8de0011e4gj4fzpu3pl","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8do001be4gjz85tpt4t"},{"post_id":"cilwhj8dh0015e4gjhbmp0p4t","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8ds001ee4gjyncb2esm"},{"post_id":"cilwhj8dk0018e4gj23lfnnot","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8dz001ie4gjtbwdnw06"},{"post_id":"cilwhj8do001ce4gjbfunrg10","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8e2001le4gj4sa3sr2w"},{"post_id":"cilwhj8du001fe4gjqyev8fb5","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8e8001oe4gj9kbq45im"},{"post_id":"cilwhj8dz001je4gjgtmilxbv","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8eb001re4gjbs958hkg"},{"post_id":"cilwhj8e5001me4gjvq9kgurp","category_id":"cilwhj86h0003e4gj60wzwauk","_id":"cilwhj8ed001te4gjr3ddh7gi"}],"PostTag":[{"post_id":"cilwhj8640000e4gjh4618866","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj86n000ae4gj3qq48bgq"},{"post_id":"cilwhj8640000e4gjh4618866","tag_id":"cilwhj86j0004e4gjey02rymm","_id":"cilwhj86n000be4gj3y5nlhw4"},{"post_id":"cilwhj8640000e4gjh4618866","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj86o000de4gjbk2wh0oc"},{"post_id":"cilwhj86a0001e4gj9mpve986","tag_id":"cilwhj86m0009e4gjnpizigo8","_id":"cilwhj86o000ee4gjgf3ocgta"},{"post_id":"cilwhj86a0001e4gj9mpve986","tag_id":"cilwhj86n000ce4gjf29e4ahp","_id":"cilwhj86o000fe4gjvriwoc5d"},{"post_id":"cilwhj8c7000ge4gjzo2n0376","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj8cv000pe4gj8xeupvzy"},{"post_id":"cilwhj8c7000ge4gjzo2n0376","tag_id":"cilwhj8cb000ie4gjd8j8me0n","_id":"cilwhj8cy000se4gjszqqlnq5"},{"post_id":"cilwhj8c7000ge4gjzo2n0376","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8d9000we4gjgvyrzr6g"},{"post_id":"cilwhj8c9000he4gjkdv5jy93","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj8dd000ze4gjdvse9lmi"},{"post_id":"cilwhj8c9000he4gjkdv5jy93","tag_id":"cilwhj8cp000ne4gj9i7tzfdd","_id":"cilwhj8dh0013e4gjha2989o5"},{"post_id":"cilwhj8c9000he4gjkdv5jy93","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8dj0016e4gjj2gftwos"},{"post_id":"cilwhj8cz000ue4gj4rvg5qml","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj8dn001ae4gj8710ahvm"},{"post_id":"cilwhj8cz000ue4gj4rvg5qml","tag_id":"cilwhj86j0004e4gjey02rymm","_id":"cilwhj8dr001de4gjfj18go1n"},{"post_id":"cilwhj8cz000ue4gj4rvg5qml","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8dy001he4gjtzdwfx2x"},{"post_id":"cilwhj8cd000je4gj9zxzk1mg","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj8e2001ke4gj3v0ayh6j"},{"post_id":"cilwhj8cd000je4gj9zxzk1mg","tag_id":"cilwhj8d8000ve4gjg4r8dhas","_id":"cilwhj8e8001ne4gjmiwh9bpb"},{"post_id":"cilwhj8cd000je4gj9zxzk1mg","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8ea001qe4gjq76mmmmu"},{"post_id":"cilwhj8ck000le4gjfyj3vm47","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj8ec001se4gjwnaur92b"},{"post_id":"cilwhj8ck000le4gjfyj3vm47","tag_id":"cilwhj8d8000ve4gjg4r8dhas","_id":"cilwhj8eg001ve4gjdt1k0wv3"},{"post_id":"cilwhj8ck000le4gjfyj3vm47","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8eg001we4gj2mswmyld"},{"post_id":"cilwhj8cq000oe4gjunmwxxm7","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj8eh001ye4gj3k7hnilb"},{"post_id":"cilwhj8cq000oe4gjunmwxxm7","tag_id":"cilwhj8dm0019e4gjpktaello","_id":"cilwhj8eh001ze4gjqpb4ub6p"},{"post_id":"cilwhj8cq000oe4gjunmwxxm7","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8eh0021e4gjqdmjavwe"},{"post_id":"cilwhj8cw000re4gjr54sxi4e","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj8ek0022e4gj6aeqvw4i"},{"post_id":"cilwhj8cw000re4gjr54sxi4e","tag_id":"cilwhj8dy001ge4gjnqt986eh","_id":"cilwhj8ek0023e4gjqb6sh18t"},{"post_id":"cilwhj8cw000re4gjr54sxi4e","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8el0025e4gjie3awekx"},{"post_id":"cilwhj8da000ye4gju22jy4tb","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj8em0026e4gji8gwzwgs"},{"post_id":"cilwhj8da000ye4gju22jy4tb","tag_id":"cilwhj8e9001pe4gjy6ycwenk","_id":"cilwhj8en0028e4gjivmu2vel"},{"post_id":"cilwhj8da000ye4gju22jy4tb","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8eo0029e4gjq4gwpmqa"},{"post_id":"cilwhj8de0011e4gj4fzpu3pl","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj8ep002be4gjfahvf4j9"},{"post_id":"cilwhj8de0011e4gj4fzpu3pl","tag_id":"cilwhj8ee001ue4gjxtpwy3t1","_id":"cilwhj8ep002ce4gjfnr84dk3"},{"post_id":"cilwhj8de0011e4gj4fzpu3pl","tag_id":"cilwhj8eg001xe4gjlbrn9zzb","_id":"cilwhj8eq002ee4gj65fsmor4"},{"post_id":"cilwhj8de0011e4gj4fzpu3pl","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8er002fe4gjm0kl9rc3"},{"post_id":"cilwhj8dh0015e4gjhbmp0p4t","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj8es002he4gjmwfeh3j8"},{"post_id":"cilwhj8dh0015e4gjhbmp0p4t","tag_id":"cilwhj8eh0020e4gjtt2yukr7","_id":"cilwhj8et002ie4gjfn8bpi90"},{"post_id":"cilwhj8dh0015e4gjhbmp0p4t","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8et002je4gjkupkveak"},{"post_id":"cilwhj8dk0018e4gj23lfnnot","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj8eu002le4gjvvaxbfwi"},{"post_id":"cilwhj8dk0018e4gj23lfnnot","tag_id":"cilwhj8el0024e4gjjp612aro","_id":"cilwhj8eu002me4gjmtp8fijz"},{"post_id":"cilwhj8dk0018e4gj23lfnnot","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8ev002oe4gj3j7hrsk3"},{"post_id":"cilwhj8do001ce4gjbfunrg10","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj8ew002pe4gjsllx4i9f"},{"post_id":"cilwhj8do001ce4gjbfunrg10","tag_id":"cilwhj8el0024e4gjjp612aro","_id":"cilwhj8ex002qe4gjjmf0q67b"},{"post_id":"cilwhj8do001ce4gjbfunrg10","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8ey002re4gj1t1l2156"},{"post_id":"cilwhj8du001fe4gjqyev8fb5","tag_id":"cilwhj8eo002ae4gj3zek2816","_id":"cilwhj8ez002se4gje4vrkosu"},{"post_id":"cilwhj8du001fe4gjqyev8fb5","tag_id":"cilwhj8eq002de4gjyvavkiaf","_id":"cilwhj8ez002te4gjstodbgfb"},{"post_id":"cilwhj8du001fe4gjqyev8fb5","tag_id":"cilwhj8er002ge4gjvmk5ln7o","_id":"cilwhj8f0002ue4gjrhu6qpu2"},{"post_id":"cilwhj8dz001je4gjgtmilxbv","tag_id":"cilwhj86d0002e4gjvskwjnlo","_id":"cilwhj8f0002ve4gj0wxbzwb8"},{"post_id":"cilwhj8dz001je4gjgtmilxbv","tag_id":"cilwhj8et002ke4gjor2fouly","_id":"cilwhj8f1002we4gjk65999q9"},{"post_id":"cilwhj8dz001je4gjgtmilxbv","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8f1002xe4gj0eip07qk"},{"post_id":"cilwhj8e5001me4gjvq9kgurp","tag_id":"cilwhj8ev002ne4gjjsj3tl9t","_id":"cilwhj8f2002ye4gjkn5tuy4k"},{"post_id":"cilwhj8e5001me4gjvq9kgurp","tag_id":"cilwhj86l0007e4gjf07jkhlc","_id":"cilwhj8f3002ze4gjwzepasb3"}],"Tag":[{"name":"node","_id":"cilwhj86d0002e4gjvskwjnlo"},{"name":"http","_id":"cilwhj86j0004e4gjey02rymm"},{"name":"学习笔记","_id":"cilwhj86l0007e4gjf07jkhlc"},{"name":"css3","_id":"cilwhj86m0009e4gjnpizigo8"},{"name":"flexbox","_id":"cilwhj86n000ce4gjf29e4ahp"},{"name":"process","_id":"cilwhj8cb000ie4gjd8j8me0n"},{"name":"module","_id":"cilwhj8cp000ne4gj9i7tzfdd"},{"name":"buffer","_id":"cilwhj8d8000ve4gjg4r8dhas"},{"name":"stream","_id":"cilwhj8dm0019e4gjpktaello"},{"name":"npm","_id":"cilwhj8dy001ge4gjnqt986eh"},{"name":"path","_id":"cilwhj8e9001pe4gjy6ycwenk"},{"name":"cookie","_id":"cilwhj8ee001ue4gjxtpwy3t1"},{"name":"session","_id":"cilwhj8eg001xe4gjlbrn9zzb"},{"name":"express","_id":"cilwhj8eh0020e4gjtt2yukr7"},{"name":"mongoose","_id":"cilwhj8el0024e4gjjp612aro"},{"name":"request","_id":"cilwhj8eo002ae4gj3zek2816"},{"name":"cheerio","_id":"cilwhj8eq002de4gjyvavkiaf"},{"name":"爬虫","_id":"cilwhj8er002ge4gjvmk5ln7o"},{"name":"event","_id":"cilwhj8et002ke4gjor2fouly"},{"name":"zepto","_id":"cilwhj8ev002ne4gjjsj3tl9t"}]}}