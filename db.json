{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/flexible/flexible03.png","path":"images/flexible/flexible03.png","modified":1,"renderable":0},{"_id":"source/images/flexible/flexible04.png","path":"images/flexible/flexible04.png","modified":1,"renderable":0},{"_id":"source/images/flexible/flexible07.png","path":"images/flexible/flexible07.png","modified":1,"renderable":0},{"_id":"source/images/flexible/flexible06.png","path":"images/flexible/flexible06.png","modified":1,"renderable":0},{"_id":"source/images/flexible/flexible08.png","path":"images/flexible/flexible08.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/flexible/flexible01.png","path":"images/flexible/flexible01.png","modified":1,"renderable":0},{"_id":"source/images/flexible/flexible02.png","path":"images/flexible/flexible02.png","modified":1,"renderable":0},{"_id":"source/images/flexible/flexible05.png","path":"images/flexible/flexible05.png","modified":1,"renderable":0},{"_id":"source/images/flexible/flexible09.png","path":"images/flexible/flexible09.png","modified":1,"renderable":0},{"_id":"source/images/flexible/flexible10.png","path":"images/flexible/flexible10.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"2fee1653bd2540632d79b43158dc970577d7fdda","modified":1463364692474},{"_id":"source/favicon.ico","hash":"421c09dd34bd64ec866f4d34b808c887b23b1afe","modified":1463364692480},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1463364692492},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1463364692491},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1463364692493},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1463364692493},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1463364692493},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1463364692494},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1463364692494},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1463364692494},{"_id":"themes/next/_config.yml","hash":"eb890e709a4fe2112207d60c64d3c04083996717","modified":1463364692495},{"_id":"themes/next/bower.json","hash":"93adc30dab22314f3757c3b6d3c13771de994b08","modified":1463364692495},{"_id":"themes/next/gulpfile.coffee","hash":"0494704f9e1ac8f63b9bd2791c443ffbf6091df3","modified":1463364692495},{"_id":"themes/next/package.json","hash":"afc2cbda2fe4643808c151135d5528267ee634c4","modified":1463364692510},{"_id":"source/about/index.md","hash":"b52b14fb83bc7f5e080f0ab61b0e28e39df937b6","modified":1463364692479},{"_id":"source/_posts/Immutable详解及React中实践.md","hash":"3d667095a573067bf026efe5c8ecde932f368bc5","modified":1463364692474},{"_id":"source/_posts/animation-详解.md","hash":"47e9bf3c94c17e23554b62779214f78f0d8023e7","modified":1463364692475},{"_id":"source/_posts/es6函数式编程.md","hash":"4193d63d5cf3bbfe5c8066782edc3c3b3974fd81","modified":1463364692475},{"_id":"source/_posts/reduce的用法.md","hash":"46ef993fb3a6f55bcbc91155d1046bb3be17cf64","modified":1463364692475},{"_id":"source/_posts/zepto学习笔记.md","hash":"5736a703ed0069c189cd984838294886f328a997","modified":1463364692476},{"_id":"source/_posts/webapck配置指导.md","hash":"791374a4f327b4e6357d4b4212e8fe1946131b95","modified":1463364692476},{"_id":"source/_posts/使用Flexible实现H5页面终端适配.md","hash":"c417be85a0481b1ebc39d06ca3df29e95e4a63a3","modified":1463364692477},{"_id":"source/_posts/模块系统.md","hash":"d6f08161af9f976759bdfac7fb448608a270ad9f","modified":1463364692479},{"_id":"source/_posts/语法和数据类型.md","hash":"ec86f1ba6e098e37f5a39236ffd6484e933d8604","modified":1463479487584},{"_id":"source/images/avatar.jpg","hash":"cec12ec035c5a08107cf379ea621d240b71377a0","modified":1463364692480},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1463364692492},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a09da7ff6504131e928b9c99dcec98a411331812","modified":1463364692492},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1463364692496},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1463364692496},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1463364692496},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1463364692496},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1463364692497},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1463364692497},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1463364692497},{"_id":"themes/next/languages/zh-Hans.yml","hash":"1693a2027de3736a8e4b08109e664d64771410c3","modified":1463364692497},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1463364692498},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1463364692498},{"_id":"themes/next/layout/_layout.swig","hash":"bd7d977379b8efc5873f637f1c4d53879626f4d6","modified":1463364692498},{"_id":"themes/next/layout/about.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1463364692508},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1463364692508},{"_id":"themes/next/layout/index.swig","hash":"da76d90fbda3597623ea6d01d5e758b8bd6f180f","modified":1463364692509},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1463364692509},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1463364692509},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1463364692509},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1463364692510},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1463364692563},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1463364692563},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1463364692563},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463364692531},{"_id":"source/images/flexible/flexible03.png","hash":"f3c194f0ea9047ba2b12f777d2f66c19813cb55e","modified":1463364692484},{"_id":"source/images/flexible/flexible04.png","hash":"dbd8d6ab64540975fc2dce44368a5986d787e6b9","modified":1463364692485},{"_id":"source/images/flexible/flexible07.png","hash":"c8f5535f6c970f2951cff1339920991153aeaed2","modified":1463364692488},{"_id":"source/images/flexible/flexible06.png","hash":"5d054f69961f17a7b971998d7579c7b196bf042c","modified":1463364692487},{"_id":"source/images/flexible/flexible08.png","hash":"4c841e678059a3eaac0b8c4ac4d70cce106e95c3","modified":1463364692488},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1463364692499},{"_id":"themes/next/layout/_macro/post.swig","hash":"a61cf39c2d79f790fbb4a8e07ac2bbb06b95390d","modified":1463364692499},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6de4ea6db39fe8e04b058bcefc5b23f954726e77","modified":1463364692499},{"_id":"themes/next/layout/_macro/reward.swig","hash":"89f3d2e978d4062b470e774eda21c2ed3a086ab9","modified":1463364692499},{"_id":"themes/next/layout/_partials/comments.swig","hash":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1463364692500},{"_id":"themes/next/layout/_partials/footer.swig","hash":"cba20577cea89196d714ddfe6b3ea00f7c906ba7","modified":1463364692500},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1463364692500},{"_id":"themes/next/layout/_partials/head.swig","hash":"9d6501b54b959d28a6e0b5fde87d25fc38b97660","modified":1463364692500},{"_id":"themes/next/layout/_partials/header.swig","hash":"b3f4f07f03bedd615039934b44d552b91e2a4a1d","modified":1463364692501},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1463364692501},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1463364692501},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1463364692503},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1463364692504},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"1a51b8caa5130ff55948ae59dddb87ee0550c1e9","modified":1463364692508},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1463364692510},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1463364692510},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1463364692511},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1463364692531},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1463364692532},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1463364692532},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1463364692532},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1463364692533},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1463364692532},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1463364692533},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1463364692534},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1463364692534},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1463364692534},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1463364692534},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1463364692534},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1463364692535},{"_id":"source/images/flexible/flexible01.png","hash":"dc9be1fd1a3eb85adc0cdb803ae4d51e00ca2180","modified":1463364692482},{"_id":"source/images/flexible/flexible02.png","hash":"858c0905d08a2454cc3fdbc32726d3c856717fab","modified":1463364692483},{"_id":"source/images/flexible/flexible05.png","hash":"9a9389cbb474f1216a6c2c80d4e9cd131d148598","modified":1463364692486},{"_id":"source/images/flexible/flexible09.png","hash":"689c9ef22b7ba120aabe2b40b38a586ac700e158","modified":1463364692489},{"_id":"source/images/flexible/flexible10.png","hash":"a943ddd6f14e34e3267f2f15f8027fcc4a3f78c8","modified":1463364692491},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463364692504},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463364692504},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463364692524},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463364692524},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463364692524},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463364692530},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1463364692531},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1463364692502},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1463364692502},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1463364692502},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1463364692502},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1463364692503},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1463364692503},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1463364692503},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"6fa4daa91adee5800cbb0954e571b75e9796f99b","modified":1463364692504},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1463364692505},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1463364692505},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1463364692506},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"aebc73513c9cbbbbda2935e2eb18e09bb1c24bf8","modified":1463364692507},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1463364692507},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1463364692508},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"8eecd19c756df615afb3f5ec6a527cd7bd06d20c","modified":1463364692508},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1463364692523},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1463364692524},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"10ca6744a8594c1a085b50120f4ed0a1ef433f40","modified":1463364692524},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1463364692530},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"9f87ded9cde425048e8ae063cbb481e78a0e469c","modified":1463364692530},{"_id":"themes/next/source/css/_variables/base.styl","hash":"f171c71d42f8798608235206dd41b37193faed88","modified":1463364692531},{"_id":"themes/next/source/css/_variables/default.styl","hash":"17779fa6fa3c9e1262ba100a86a8dec730c2f312","modified":1463364692531},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1463364692535},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1463364692535},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1463364692536},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1463364692536},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1463364692536},{"_id":"themes/next/source/js/src/utils.js","hash":"efcb2a7de9dc371d03a8598da2d71e2c53132d4c","modified":1463364692537},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1463364692543},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1463364692543},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1463364692543},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1463364692543},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1463364692544},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1463364692544},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1463364692545},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1463364692545},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1463364692545},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1463364692555},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1463364692556},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1463364692556},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1463364692556},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1463364692556},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1463364692557},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1463364692557},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1463364692559},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1463364692559},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1463364692561},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1463364692562},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1463364692562},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1463364692555},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1463364692505},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1463364692505},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1463364692505},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1463364692506},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1463364692506},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1463364692506},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"da8aa3beab56d8c306dd97cf41127a3859e2d00c","modified":1463364692507},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1463364692511},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1463364692511},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1463364692512},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1463364692512},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1463364692515},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1463364692520},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1463364692522},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"05be2af57229c5125297c945d2e60ca97070bae1","modified":1463364692522},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1463364692523},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1463364692523},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"d110befc142dbb881c4fdcb94df65ed2f603f1c1","modified":1463364692523},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1463364692522},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1463364692525},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1463364692525},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1463364692525},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1463364692525},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1463364692526},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1463364692526},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5187512cc4b2ce095230928c7046e0b26c3897bd","modified":1463364692526},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1463364692527},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1463364692527},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1463364692527},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1463364692527},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"f70fa81275eb4e0ea5e5a740b7a35539c6ffa9ba","modified":1463364692527},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"59c0f66602ebc1c05c16f117bc8710d9f3744538","modified":1463364692528},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1463364692528},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"96f95471da25d0e80c6b82f1e834b03c9aba58a9","modified":1463364692528},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1463364692528},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1463364692528},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"802e599b1ac749eac162dae396f66b0acaa5edcc","modified":1463364692529},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1463364692530},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8b37699252a24741716b40fb70972a77453cbfe1","modified":1463364692536},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1463364692537},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1463364692538},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1463364692538},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1463364692538},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1463364692538},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1463364692539},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1463364692541},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1463364692542},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1463364692542},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1463364692544},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1463364692544},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1463364692546},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1463364692546},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1463364692546},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1463364692554},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1463364692558},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1463364692558},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1463364692548},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1463364692549},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1463364692553},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1463364692561},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1463364692512},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1463364692512},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1463364692513},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1463364692513},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1463364692513},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"f168f79ba8cc80c775907da4cc00d01771ac1e1e","modified":1463364692513},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"12724e07713c9e8d577d921c131f04de7a5e65b1","modified":1463364692514},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"9f0606d4d94ffa6bd77f91628507bba19133cf36","modified":1463364692514},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"8539c1122966a6aea64267d48af05603caa5fa29","modified":1463364692514},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"6c34f2cf9ad9b9b787007cfca522deeb6b1ae3b7","modified":1463364692515},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1463364692515},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1463364692515},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"68ed6b0ad40745cb07ecd38f13960bb217aef848","modified":1463364692515},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1463364692516},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1463364692516},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1463364692516},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"5dba4ca272d7c767b57233cd99fba95dbf82153f","modified":1463364692516},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"c9e3c5aca361ed9bbfa41a9755f3c516025da67e","modified":1463364692517},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1463364692517},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1463364692517},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"758d64ad65f718537ab5bfe5592a626abc40987e","modified":1463364692517},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1463364692517},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"0e91a5a80fb62ed38c97cb649b166f945c6ce5f1","modified":1463364692517},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1463364692518},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"70407054dbb5180c69e50ea2655d32835494394e","modified":1463364692518},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1463364692518},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1463364692518},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1463364692518},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"97832be1f30b631dbc2202524918b6eb55e74c4b","modified":1463364692519},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1463364692519},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"546ad04994f74643334fd36cdb548c17f71b11be","modified":1463364692519},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"99c4b7d1459569cda394c733845d368008a180bf","modified":1463364692520},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1463364692520},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1463364692520},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1463364692520},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1463364692521},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1463364692521},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1463364692521},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1463364692521},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1463364692521},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"0f368e6e95c0ba46580b491819e46ae31910c94b","modified":1463364692522},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1463364692526},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1463364692539},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1463364692539},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1463364692540},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1463364692540},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1463364692541},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1463364692540},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1463364692553},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1463364692551},{"_id":"public/atom.xml","hash":"d5ca8138073e8426f1134bdd4a257f4ce0afb352","modified":1463479498234},{"_id":"public/sitemap.xml","hash":"4eb85e11a43283b52343778b5c426e2a0a5d77d0","modified":1463479498241},{"_id":"public/about/index.html","hash":"d136c8132a876f3f533c6c4042d61c1851d1d53a","modified":1463479498250},{"_id":"public/2016/04/04/animation-详解/index.html","hash":"876accf501a9a0f85dd12a00a18fc9a6d11cf4db","modified":1463479498250},{"_id":"public/2015/10/27/zepto学习笔记/index.html","hash":"03ace7e610488067ee1f92cbe1ea4811337a7da8","modified":1463479498250},{"_id":"public/archives/index.html","hash":"34aa6a93da02eb172afec0917a36245e678c38a4","modified":1463479498250},{"_id":"public/archives/page/2/index.html","hash":"0b30c72d17032c562e3505f6d7818c4d82c8ef78","modified":1463479498250},{"_id":"public/archives/2015/index.html","hash":"62047116b38923cb4843667977b88893c492df18","modified":1463479498250},{"_id":"public/archives/2015/10/index.html","hash":"0b6e879e01c7ef72999e2233ae34d68517e9bb14","modified":1463479498250},{"_id":"public/archives/2016/page/2/index.html","hash":"d6098923dab7d9ad66f4bdc1d8301611c77a16dc","modified":1463479498250},{"_id":"public/archives/2016/03/index.html","hash":"e2a33d9c43a248bcf07e297181a018ea53dcd982","modified":1463479498250},{"_id":"public/archives/2016/index.html","hash":"af468c8adcd5293fd560fd006afd26f5952c9dc9","modified":1463479498250},{"_id":"public/archives/2016/04/index.html","hash":"270a5591d1a8af6a7207bf8b2b7cb9b8d2e98700","modified":1463479498250},{"_id":"public/archives/2016/05/index.html","hash":"21cb8bbef802021e4b85ca40028cd1e15c25fb5b","modified":1463479498250},{"_id":"public/categories/教程/index.html","hash":"63484efdd60f9d66bc570c76050c3c2d5b406f07","modified":1463479498250},{"_id":"public/categories/教程/page/2/index.html","hash":"016ebf5198935fb75554a136f840f3750eeed3e0","modified":1463479498250},{"_id":"public/categories/笔记/index.html","hash":"9083229ef33a711a939b2ff68107f92c7f4f3eb9","modified":1463479498250},{"_id":"public/tags/animation/index.html","hash":"749b091600c89736b4f2e0f4c8a3dc7747ad1b18","modified":1463479498251},{"_id":"public/tags/css3/index.html","hash":"3c4decc8cce7d3251ee597cfe04bc83b93de21a9","modified":1463479498251},{"_id":"public/tags/immutable/index.html","hash":"38abe9305a0e0e579c00ca796535fa6caa675631","modified":1463479498251},{"_id":"public/tags/javascript/index.html","hash":"7f13649650f6f481062c11f48232f701dc504230","modified":1463479498251},{"_id":"public/tags/react/index.html","hash":"3d56c8d9c3f5dcdbeab098b66cdfaf0d24fae03b","modified":1463479498251},{"_id":"public/tags/es6/index.html","hash":"41a81c9a684210cc1fd661d54623841aad68c65f","modified":1463479498251},{"_id":"public/tags/函数式编程/index.html","hash":"e9e657d7afa52997b2f6584e9fa3e2665488e1f6","modified":1463479498252},{"_id":"public/tags/webpack/index.html","hash":"d2194b3307410dd001217b4bc40d7c21f512d445","modified":1463479498252},{"_id":"public/tags/快速上手/index.html","hash":"e702fe0835c67d800c0582df6a3077fb916ff0a8","modified":1463479498252},{"_id":"public/tags/学习笔记/index.html","hash":"b3d0591d7c76bbd9e76ce809237725d0bf1466d6","modified":1463479498252},{"_id":"public/tags/zepto/index.html","hash":"71d05190cc7f8bed4a7ca6833803bf60a405db16","modified":1463479498252},{"_id":"public/tags/reduce/index.html","hash":"a3dbade9ed3a58b01b6957d2faf273a45b62682a","modified":1463479498252},{"_id":"public/tags/flexible/index.html","hash":"327e8b78d419a22552eedb525e8262b8a190f5e9","modified":1463479498252},{"_id":"public/tags/终端适配/index.html","hash":"ee45569e147b47994f8490aba7fa192139af9319","modified":1463479498252},{"_id":"public/tags/语法和数据类型/index.html","hash":"64f1bfe360f5ac6487720d77c0a9a360a024a0fa","modified":1463479498252},{"_id":"public/tags/模块系统/index.html","hash":"6075fdf7ab47e146ed8faf3cde616d911217498c","modified":1463479498252},{"_id":"public/2016/05/16/语法和数据类型/index.html","hash":"5dc907df93b0065c45a01b99ac0185ddc17989a0","modified":1463479498252},{"_id":"public/2016/05/09/Immutable详解及React中实践/index.html","hash":"1d7b6868280b965cc138ade655c4ee38b0b48e6c","modified":1463479498252},{"_id":"public/2016/05/09/reduce的用法/index.html","hash":"b2b733ebf5d5f3f46902bcd620547ac568fe5cb0","modified":1463479498252},{"_id":"public/2016/05/08/es6函数式编程/index.html","hash":"d3161d16089c279abb25f8e250a9dd85f1ad53ec","modified":1463479498252},{"_id":"public/2016/03/22/webapck配置指导/index.html","hash":"b0fb9d0e2b602096c049f01261c9aaa7995bbed4","modified":1463479498252},{"_id":"public/2016/03/24/使用Flexible实现H5页面终端适配/index.html","hash":"00a5aca2247afa6b66f4e400b665eaa10b7788e8","modified":1463479498252},{"_id":"public/2016/03/18/模块系统/index.html","hash":"1afd97ce74110fd5a5d124e52562a4d45c824331","modified":1463479498253},{"_id":"public/index.html","hash":"e420a42110c5feca8d8d3a4b442065a9dde6481d","modified":1463479498253},{"_id":"public/page/2/index.html","hash":"807aacd6557e4f424a947e9cbdbbdecfa2a9e415","modified":1463479498253},{"_id":"public/CNAME","hash":"2fee1653bd2540632d79b43158dc970577d7fdda","modified":1463479498287},{"_id":"public/favicon.ico","hash":"421c09dd34bd64ec866f4d34b808c887b23b1afe","modified":1463479498287},{"_id":"public/images/avatar.jpg","hash":"cec12ec035c5a08107cf379ea621d240b71377a0","modified":1463479498287},{"_id":"public/images/flexible/flexible03.png","hash":"f3c194f0ea9047ba2b12f777d2f66c19813cb55e","modified":1463479498287},{"_id":"public/images/flexible/flexible04.png","hash":"dbd8d6ab64540975fc2dce44368a5986d787e6b9","modified":1463479498287},{"_id":"public/images/flexible/flexible07.png","hash":"c8f5535f6c970f2951cff1339920991153aeaed2","modified":1463479498287},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1463479498287},{"_id":"public/images/flexible/flexible06.png","hash":"5d054f69961f17a7b971998d7579c7b196bf042c","modified":1463479498287},{"_id":"public/images/flexible/flexible08.png","hash":"4c841e678059a3eaac0b8c4ac4d70cce106e95c3","modified":1463479498287},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1463479498287},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1463479498287},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1463479498287},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1463479498287},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1463479498287},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1463479498287},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1463479498287},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1463479498287},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1463479498287},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1463479498287},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1463479498287},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1463479498287},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1463479498287},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1463479498287},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1463479498287},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1463479498288},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1463479498288},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1463479498288},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1463479498288},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1463479498288},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1463479498288},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1463479498288},{"_id":"public/images/flexible/flexible01.png","hash":"dc9be1fd1a3eb85adc0cdb803ae4d51e00ca2180","modified":1463479498823},{"_id":"public/images/flexible/flexible02.png","hash":"858c0905d08a2454cc3fdbc32726d3c856717fab","modified":1463479498826},{"_id":"public/images/flexible/flexible09.png","hash":"689c9ef22b7ba120aabe2b40b38a586ac700e158","modified":1463479498830},{"_id":"public/images/flexible/flexible05.png","hash":"9a9389cbb474f1216a6c2c80d4e9cd131d148598","modified":1463479498830},{"_id":"public/images/flexible/flexible10.png","hash":"a943ddd6f14e34e3267f2f15f8027fcc4a3f78c8","modified":1463479498830},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1463479498830},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1463479498830},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1463479498831},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1463479498846},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1463479498846},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1463479498846},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1463479498846},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1463479498846},{"_id":"public/js/src/utils.js","hash":"cf24307d8aeb18e9bad093647c7fb50dc3d9fbe8","modified":1463479498846},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1463479498846},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1463479498846},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1463479498847},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1463479498847},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1463479498847},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1463479498847},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1463479498847},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1463479498847},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1463479498847},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1463479498847},{"_id":"public/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1463479498847},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1463479498847},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1463479498847},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1463479498847},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1463479498847},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1463479498847},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1463479498847},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1463479498847},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1463479498847},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1463479498847},{"_id":"public/css/main.css","hash":"339268cabee20467ff5d3fe2d92f6dd2fa597187","modified":1463479498847},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1463479498847},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1463479498847},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1463479498847},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1463479498848},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1463479498848},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1463479498848},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1463479498848},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1463479498848},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1463479498848},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1463479498848},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1463479498866}],"Category":[{"name":"教程","_id":"ciob9wmve0004zgdllbr0dtbo"},{"name":"笔记","_id":"ciob9wmw1000lzgdlgs2jtpt4"}],"Data":[],"Page":[{"title":"about","date":"2016-03-22T08:02:16.000Z","_content":"## 我很帅，页面加载不出来了。。。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-03-22 16:02:16\n---\n## 我很帅，页面加载不出来了。。。","updated":"2016-05-16T02:11:32.479Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciob9wmv10000zgdlejgbhtoj","content":"<h2 id=\"我很帅，页面加载不出来了。。。\"><a href=\"#我很帅，页面加载不出来了。。。\" class=\"headerlink\" title=\"我很帅，页面加载不出来了。。。\"></a>我很帅，页面加载不出来了。。。</h2>","excerpt":"","more":"<h2 id=\"我很帅，页面加载不出来了。。。\"><a href=\"#我很帅，页面加载不出来了。。。\" class=\"headerlink\" title=\"我很帅，页面加载不出来了。。。\"></a>我很帅，页面加载不出来了。。。</h2>"}],"Post":[{"title":"animation-详解","date":"2016-04-04T08:22:51.000Z","_content":">A glamorous life is quite different to a life of luxury.\n\n## 简介 \nanimation属性是动画属性的简写，其中包括：\n- animation-name\n- animation-duration\n- animation-timing-function\n- animation-delay\n- animation-iteration-count\n- animation-direction\n- animation-fill-mode\n\n## 用法\nanimation可以定义多个动画属性，需要用逗号分隔。比如： \n```javascript\n/*一个animation定义的时候*/\nanimation: [animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-fill-mode];\n/*多个animation定义的时候*/\nanimation: [animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-fill-mode],\n[animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-fill-mode];\n```\n其中简写的animation属性用空格分隔，而且他们之间的排序没什么影响，除了animation-duration和animation-delay，他们需要顺序。也就是说当你使用两个time参数的时候，第一个时间指的是animation-duration第二个时间指的是animation-delay。\n\n```javascript\nanimation: bounce 0.3s ease-in-out 1s infinite;\n/*equivalent to*/\nanimation-name: bounce;\nanimation-duration: 0.3s;\nanimation-timing-function: ease-in-out;\nanimation-delay: 1s;\nanimation-iteration-count: infinite;\n```\n\n## animation-play-state\nanimation-play-state属性决定CSS animation是运行还是暂停。\n```javascript\nanimation-play-state: running | paused\n```","source":"_posts/animation-详解.md","raw":"---\ntitle: animation-详解\ndate: 2016-04-04 16:22:51\ntags:\n- animation\n- css3\ncategories: 教程\n---\n>A glamorous life is quite different to a life of luxury.\n\n## 简介 \nanimation属性是动画属性的简写，其中包括：\n- animation-name\n- animation-duration\n- animation-timing-function\n- animation-delay\n- animation-iteration-count\n- animation-direction\n- animation-fill-mode\n\n## 用法\nanimation可以定义多个动画属性，需要用逗号分隔。比如： \n```javascript\n/*一个animation定义的时候*/\nanimation: [animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-fill-mode];\n/*多个animation定义的时候*/\nanimation: [animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-fill-mode],\n[animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-fill-mode];\n```\n其中简写的animation属性用空格分隔，而且他们之间的排序没什么影响，除了animation-duration和animation-delay，他们需要顺序。也就是说当你使用两个time参数的时候，第一个时间指的是animation-duration第二个时间指的是animation-delay。\n\n```javascript\nanimation: bounce 0.3s ease-in-out 1s infinite;\n/*equivalent to*/\nanimation-name: bounce;\nanimation-duration: 0.3s;\nanimation-timing-function: ease-in-out;\nanimation-delay: 1s;\nanimation-iteration-count: infinite;\n```\n\n## animation-play-state\nanimation-play-state属性决定CSS animation是运行还是暂停。\n```javascript\nanimation-play-state: running | paused\n```","slug":"animation-详解","published":1,"updated":"2016-05-16T02:11:32.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciob9wmv50001zgdlfx0pkipb","content":"<blockquote>\n<p>A glamorous life is quite different to a life of luxury.</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>animation属性是动画属性的简写，其中包括：</p>\n<ul>\n<li>animation-name</li>\n<li>animation-duration</li>\n<li>animation-timing-function</li>\n<li>animation-delay</li>\n<li>animation-iteration-count</li>\n<li>animation-direction</li>\n<li>animation-fill-mode</li>\n</ul>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>animation可以定义多个动画属性，需要用逗号分隔。比如：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*一个animation定义的时候*/</span><br><span class=\"line\">animation: [animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-fill-mode];</span><br><span class=\"line\">/*多个animation定义的时候*/</span><br><span class=\"line\">animation: [animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-fill-mode],</span><br><span class=\"line\">[animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-fill-mode];</span><br></pre></td></tr></table></figure></p>\n<p>其中简写的animation属性用空格分隔，而且他们之间的排序没什么影响，除了animation-duration和animation-delay，他们需要顺序。也就是说当你使用两个time参数的时候，第一个时间指的是animation-duration第二个时间指的是animation-delay。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation: bounce <span class=\"number\">0.3</span>s ease-<span class=\"keyword\">in</span>-out <span class=\"number\">1</span>s infinite;</span><br><span class=\"line\"><span class=\"comment\">/*equivalent to*/</span></span><br><span class=\"line\">animation-name: bounce;</span><br><span class=\"line\">animation-duration: <span class=\"number\">0.3</span>s;</span><br><span class=\"line\">animation-timing-<span class=\"function\"><span class=\"keyword\">function</span>: <span class=\"title\">ease</span>-<span class=\"title\">in</span>-<span class=\"title\">out</span>;</span><br><span class=\"line\"><span class=\"title\">animation</span>-<span class=\"title\">delay</span>: 1<span class=\"title\">s</span>;</span><br><span class=\"line\"><span class=\"title\">animation</span>-<span class=\"title\">iteration</span>-<span class=\"title\">count</span>: <span class=\"title\">infinite</span>;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"animation-play-state\"><a href=\"#animation-play-state\" class=\"headerlink\" title=\"animation-play-state\"></a>animation-play-state</h2><p>animation-play-state属性决定CSS animation是运行还是暂停。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-play-state: running | paused</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<blockquote>\n<p>A glamorous life is quite different to a life of luxury.</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>animation属性是动画属性的简写，其中包括：</p>\n<ul>\n<li>animation-name</li>\n<li>animation-duration</li>\n<li>animation-timing-function</li>\n<li>animation-delay</li>\n<li>animation-iteration-count</li>\n<li>animation-direction</li>\n<li>animation-fill-mode</li>\n</ul>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>animation可以定义多个动画属性，需要用逗号分隔。比如：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*一个animation定义的时候*/</span><br><span class=\"line\">animation: [animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-fill-mode];</span><br><span class=\"line\">/*多个animation定义的时候*/</span><br><span class=\"line\">animation: [animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-fill-mode],</span><br><span class=\"line\">[animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-fill-mode];</span><br></pre></td></tr></table></figure></p>\n<p>其中简写的animation属性用空格分隔，而且他们之间的排序没什么影响，除了animation-duration和animation-delay，他们需要顺序。也就是说当你使用两个time参数的时候，第一个时间指的是animation-duration第二个时间指的是animation-delay。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation: bounce <span class=\"number\">0.3</span>s ease-<span class=\"keyword\">in</span>-out <span class=\"number\">1</span>s infinite;</span><br><span class=\"line\"><span class=\"comment\">/*equivalent to*/</span></span><br><span class=\"line\">animation-name: bounce;</span><br><span class=\"line\">animation-duration: <span class=\"number\">0.3</span>s;</span><br><span class=\"line\">animation-timing-<span class=\"function\"><span class=\"keyword\">function</span>: <span class=\"title\">ease</span>-<span class=\"title\">in</span>-<span class=\"title\">out</span>;</span><br><span class=\"line\"><span class=\"title\">animation</span>-<span class=\"title\">delay</span>: 1<span class=\"title\">s</span>;</span><br><span class=\"line\"><span class=\"title\">animation</span>-<span class=\"title\">iteration</span>-<span class=\"title\">count</span>: <span class=\"title\">infinite</span>;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"animation-play-state\"><a href=\"#animation-play-state\" class=\"headerlink\" title=\"animation-play-state\"></a>animation-play-state</h2><p>animation-play-state属性决定CSS animation是运行还是暂停。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation-play-state: running | paused</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Immutable详解及React中实践","date":"2016-05-09T15:52:22.000Z","_content":"> Shared mutable state is the root of all evil\n\n有人数Immutable可以给React应用带来数十倍的提升，也有人数Immutable的引入是近期Javascript中伟大的发明，因为同期React太火，它的光芒被掩盖了。这些至少说明Immutable是很有价值的。\n\nJavascript中的对象一般是可变的(mutable)，因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。虽然这样做可以节约内存，但是当应用复杂后，这就造成了非大的隐患，Mutable带来的优点变得得不偿失。为了解决这个问题，一般的做法是使用shallowCopy(浅拷贝)或deepCopy(深拷贝)来避免被修改，但这样做造成了CPU和内存的浪费。\n\n而Immutable可以很好的解决这些问题。\n\n##什么是Immutable Data\nImmutable Data就是一旦创建，就不能再被更改的数据。对Immutable对象的任何修改或添加删除操作都会返回一个新的Immutable对象。Immutable实现的原理是Persistent Data Structure(持久化数据结构)，也就是使用旧的数据创建新的数据时，要保证旧数据同时可用且不变。同时为了避免deepCopy把所有的节点的都复制一遍带来的性能损耗，Immutable使用了Structure Sharing(结构共享)，即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其他节点则进行共享。\n\n目前流行的Immutable库有两个：\n\n### immutable.js\nFacebook工程师Lee Byron花费3年时间打造，与React同期出现，但没有被默认放到React工具库里(React提供了简化的Helper)。它内部实现了一套完整的Persistent Data Structure，还有很多易用的数据类型。像Collection、List、Map、Set、Record、Seq.有非常全面的map、filter、groupBy、reduce `find`函数式操作方法。同事API也尽量与Object或Array类似。\n其中有3种最重要的数据结构：\n- Map:键值对集合，对应于Object,ES6也有专门的Map对象\n- List: 有序可重复的列表，对应于Array\n- Set: 无序且不可重复的列表\n\n### seamless-immutable\n与 Immutable.js 学院派的风格不同，seamless-immutable 并没有实现完整的 Persistent Data Structure，而是使用 Object.defineProperty（因此只能在 IE9 及以上使用）扩展了 JavaScript 的 Array 和 Object 对象来实现，只支持 Array 和 Object 两种数据类型，API 基于与 Array 和 Object 操持不变。代码库非常小，压缩后下载只有 2K。而 Immutable.js 压缩后下载有 16K。\n\n下面是例子\n```javascript\n    //原来的写法\n    let foo = {a:{b:1}};\n    let bar = foo;\n    bar.a.b = 2;\n    console.log(foo.a.b); //2\n    console.log(foo === bar); //true\n    //使用immutable.js后\n    import Immutable from 'immutable';\n    foo = Immutable.fromJS({a:{b:1}});\n    bar = foo.setIn(['a','b'],2); // 使用setIn赋值\n    console.log(foo.getIn(['a','b'])); //1\n    console.log(foo === bar); // false\n    //使用seamless-immutable.js后\n    import SImmutable from 'seamless-immutable';\n    foo = SImmutable({a:{b:1}});\n    bar = foo.merge({a:{b:2}}); //使用merge赋值\n    console.log(foo.a.b); //1\n    console.log(foo === bar); //false\n```\n\n## Immutable优点\n1. Immutable降低了Mutable带来的复杂度\n可变(Mutable)数据耦合了Time和Value的概念，造成了数据很难被回溯。\n比如下面的一段代码：\n\n```javascript\n    function touchAndLog(touchFn){\n        let data = {key:'value'};\n        touchFn(data);\n        console.log(data.key);\n    }\n```\n\n在不查看touchFn的代码的情况下，因为不确定它对data做了什么，你是不可能知道会打印什么的。但是如果data是Immutable，你可以知道打印的是value。\n\n2. 节省内存\nImmutable.js使用了Structure Sharing 会尽量复用内存，甚至以前使用的对象也可以再次被复用。没有被引用的对象会被垃圾回收。\n\n```javascript\n    import {Map} from 'immutable';\n    let a = Map({\n        select: 'users',\n        filter: Map({name:'Tom'})\n    })\n    let b = a.set('select','people');\n    a===b; //false\n    a.get('filter') === b.get('filter') //true\n```\n\n上面的a和b共享了没有变化的filter节点。\n\n3. Undo/Redo, Copy/Paste, 甚至时间旅行这些功能做起来小菜一碟\n因为每次数据都是不一样的，只要把这些数据放到一个数组里存储起来，想回退到哪里就拿出对应的数据即可，很容易开发出撤销重做这种功能。\n\n4. 并发安全\n传统的并发非常难做，因为要处理各种数据不一致问题，因此有人就发明了各种锁来解决。但是使用了Immutable之后，数据天生是不可变的，并发锁就不需要了。\n\n然而现在并没有什么卵用，因为Javascript是单线程运行的，但未来可能会加入。\n\n5. 拥抱函数式编程\nImmutable本事就是函数式编程中的概念，纯函数式编程比面向对象更适用于前端开发。因为只要输入一致，输出必然一致，这样开发的组件更易于调试和组装。\n\n像ClojureScript,Elm等函数式编程语言中的数据类型天生都是Immutable的，这也是为什么ClojureScript基于React的框架，OM性能比React还要好的原因。\n\n## Immutable的缺点\n容易与原生的对象混淆\n这点使我们使用Immutable.js过程中遇到的最大的问题。写代码要做思维上的转变。\n\n虽然Immutable.js尽量尝试把API设计的原生对象类似，有的时候还是很难区别到底是Immutable对象还是原生对象，容易混淆操作。\n\nImmutable中的Map和List虽然对应原生Object和Array，但操作非常不同，比如你要用map.get('key')而不是map.key，array.get(0)而不是array[0]。另外Immutable每次修改都会返回新对象，很容易忘记赋值。\n\n当使用外部库的时候，一般需要使用原生对象，也很容易忘记转换。\n\n下面给出了一些办法来避免类似问题发生：\n1. 使用Flow或TypeScript这类有静态类型检查的工具。\n2. 约定变量命名规则：如所有Immutable类型对象以$$开头。\n3. 使用Immutable.fromJS而不是Immutable.Map或Immutable.List来创建对象，这样可以避免Immutable和原生对象间的混用。\n\n## 更过认识\n两个immutable对象可以使用 === 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回false\n\n```javascript\n    let map1 = Immutable.Map({a:1,b:1,c:1});\n    let map2 = Immutable.Map({a:1,b:1,c:1});\n    map1 === map2; //false\n```\n\n为了直接比较对象的值，immutable.js提供了Immutable.js来做值比较：\n\n```javascript\n    Immutable.is(map1,map2); //true\n```\n\nImmutable.is比较的是两个对象的hashCode或valueOf(对于javascript对象)。由于immutable内部使用了Trie数据结构来存储，只要两个对象的hashCode相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。\n\n后面会使用Immutable.js来减少React重复渲染，提高性能。\n\n与Object.freeze、const比较\nES6中新加入的Object.freeze和const都可以达到防止对象被篡改的功能，但是它们是shallowCopy的。对象层级一深就要特殊处理了。\n\nCursor的概念\n这个Cursor和数据库中的游标是完全不同的而概念。\n\n由于Immutable数据一般嵌套非常深，为了便于访问深层数据，Cursor提供了直接访问这个深层数据的引用。\n\n```javascript\n    import Immutable from 'immutable';\n    import Cursor from 'immutable/contrib/cursor';\n    let data = Immutable.fromJS({a:{b:{c:1}}});\n    //让cursor指向{c:1}\n    let cursor = Cursor.from(data,['a','b'],newData => {\n        //当cursor或其子cursor执行update时调用\n        console.log(newData);\n    });\n    cursor.get('c'); //1\n    cursor = cursor.update('c',x => x+1);\n    cursor.get('c'); //2\n```\n\n## 实践\n### 与React搭配使用，Pure Render\n\n熟悉React的都知道，React做性能优化时有一个避免重复渲染的大招，就是使用shouldComponentUpdate(),但它默认返回true，即始终会执行render()方法，然后做Virtual DOM比较，并得到是否需要做真实DOM更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。\n\n当然我们也可以在shouldComponentUpdate()中使用deepCopy和deepCompare来避免无必要的render(),但deepCopy和deepCompare一般都是非常耗性能。\n\nImmutable则提供了简洁高效的而判断数据是否变化的方法，只需 === 和is比较就能知道是否需要执行render(),而这个操作几乎0成本，所以可以极大提高性能。修改后的shouldComponentUpdate是这样的：\n\n```javascript\n    import {is} from 'immutable';\n    shouldComponentUpdate: (nextProps,nextState) => {\n        return !(this.props === nextProps || is(this.props,nextProps)) || !(this.state === nextState || is(this.state,nextState));\n    }\n```\n\n当然你也可以借助React.addons.PureRenderMixin 或支持class语法的pure-render-decorator来实现。\n\nsetState的一个技巧\n\nReact建议把this.state当作Immutable的，因此修改前需要做一个deepCopy,显得麻烦：\n\n```javascript\n    import '_' from 'lodash';\n    const Component = React.createClass({\n        getInitialState(){\n            return{\n                data:{times:0}\n            }\n        },\n        handleAdd(){\n            let data = _.cloneDeep(this.state.data);\n            data.times = data.times + 1;\n            this.setState({data:data});\n            //如果上面不做cloneDeep，下面打印的结果会是已经加1后的值。\n            console.log(this.state.data.times);\n        }\n    })\n```\n\n使用Immutable后：\n\n```javascript\n    getInitialState(){\n        return {\n            data: Map({times:0})\n        }\n    },\n    handleAdd(){\n        this.setState({data:this.state.data.update('times',v => v+1)});\n        //这时的times并不会改变\n        console.log(this.state.data.get('times'));\n    }\n```\n\n上面的handleAdd可以简写成：\n\n```javascript\n    handleAdd(){\n        this.setState(({data}) => ({\n            data: data.update('times', v => v+1)})\n        });\n    }\n```\n\n## 与Flux搭配使用\n由于Flux并没有限定Store中的数据类型，使用Immutable非常简单。\n下面是实现一个类似带有添加和撤销功能Store:\n\n```javascript\n    import {Map, OrderedMap} from 'immutable';\n    let todos = OrderedMap();\n    let history = []; //普通数组，存放每次操作后产生的数据\n    let TodoStore = createStore({\n        getAll(){\n            return todos;\n        }\n    });\n    Dispatcher.register(action => {\n        if(action.actionType === 'create'){\n            let id = createGUID();\n            history.push(todos); //记录当前操作前的数据，便于撤销\n            todos = todos.set(id,Map({\n                id: id,\n                complete: false,\n                text: action.text.trim()\n            }));\n            TodoStore.emitChange();\n        }else if(action.actionType === 'undo'){\n            if(history.length > 0){\n                todos = history.pop();\n            }\n            TodoStore.emitChange();\n        }\n    })\n```\n\n## 与Redux搭配使用\nRedux是目前最流行的Flux衍生库。它简化了Flux中多个Store的概念，只有一个Store，数据操作通过Reducer中实现；同时它提供了更简洁和清晰的单项数据流(View -> Action -> Middleware -> Reducer),也更易于开发同构应用。\n\n由于 Redux 中内置的 combineReducers 和 reducer 中的 initialState 都为原生的 Object 对象，所以不能和 Immutable 原生搭配使用。\n\n幸运的是，Redux 并不排斥使用 Immutable，可以自己重写 combineReducers 或使用 redux-immutablejs 来提供支持。\n\n上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。\n\n## 总结\nImmutable可以给应用带来极大的性能提升，但是否使用还要看项目情况。由于侵入性较强，新项目引入比较容易，老项目迁移需要评估迁移。对于一些提供给外部使用的公共组件，最好不要把Immutable对象直接暴露在对外接口中。","source":"_posts/Immutable详解及React中实践.md","raw":"---\ntitle: Immutable详解及React中实践\ndate: 2016-05-09 23:52:22\ntags:\n- immutable\n- react\ncategories: 教程\n---\n> Shared mutable state is the root of all evil\n\n有人数Immutable可以给React应用带来数十倍的提升，也有人数Immutable的引入是近期Javascript中伟大的发明，因为同期React太火，它的光芒被掩盖了。这些至少说明Immutable是很有价值的。\n\nJavascript中的对象一般是可变的(mutable)，因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。虽然这样做可以节约内存，但是当应用复杂后，这就造成了非大的隐患，Mutable带来的优点变得得不偿失。为了解决这个问题，一般的做法是使用shallowCopy(浅拷贝)或deepCopy(深拷贝)来避免被修改，但这样做造成了CPU和内存的浪费。\n\n而Immutable可以很好的解决这些问题。\n\n##什么是Immutable Data\nImmutable Data就是一旦创建，就不能再被更改的数据。对Immutable对象的任何修改或添加删除操作都会返回一个新的Immutable对象。Immutable实现的原理是Persistent Data Structure(持久化数据结构)，也就是使用旧的数据创建新的数据时，要保证旧数据同时可用且不变。同时为了避免deepCopy把所有的节点的都复制一遍带来的性能损耗，Immutable使用了Structure Sharing(结构共享)，即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其他节点则进行共享。\n\n目前流行的Immutable库有两个：\n\n### immutable.js\nFacebook工程师Lee Byron花费3年时间打造，与React同期出现，但没有被默认放到React工具库里(React提供了简化的Helper)。它内部实现了一套完整的Persistent Data Structure，还有很多易用的数据类型。像Collection、List、Map、Set、Record、Seq.有非常全面的map、filter、groupBy、reduce `find`函数式操作方法。同事API也尽量与Object或Array类似。\n其中有3种最重要的数据结构：\n- Map:键值对集合，对应于Object,ES6也有专门的Map对象\n- List: 有序可重复的列表，对应于Array\n- Set: 无序且不可重复的列表\n\n### seamless-immutable\n与 Immutable.js 学院派的风格不同，seamless-immutable 并没有实现完整的 Persistent Data Structure，而是使用 Object.defineProperty（因此只能在 IE9 及以上使用）扩展了 JavaScript 的 Array 和 Object 对象来实现，只支持 Array 和 Object 两种数据类型，API 基于与 Array 和 Object 操持不变。代码库非常小，压缩后下载只有 2K。而 Immutable.js 压缩后下载有 16K。\n\n下面是例子\n```javascript\n    //原来的写法\n    let foo = {a:{b:1}};\n    let bar = foo;\n    bar.a.b = 2;\n    console.log(foo.a.b); //2\n    console.log(foo === bar); //true\n    //使用immutable.js后\n    import Immutable from 'immutable';\n    foo = Immutable.fromJS({a:{b:1}});\n    bar = foo.setIn(['a','b'],2); // 使用setIn赋值\n    console.log(foo.getIn(['a','b'])); //1\n    console.log(foo === bar); // false\n    //使用seamless-immutable.js后\n    import SImmutable from 'seamless-immutable';\n    foo = SImmutable({a:{b:1}});\n    bar = foo.merge({a:{b:2}}); //使用merge赋值\n    console.log(foo.a.b); //1\n    console.log(foo === bar); //false\n```\n\n## Immutable优点\n1. Immutable降低了Mutable带来的复杂度\n可变(Mutable)数据耦合了Time和Value的概念，造成了数据很难被回溯。\n比如下面的一段代码：\n\n```javascript\n    function touchAndLog(touchFn){\n        let data = {key:'value'};\n        touchFn(data);\n        console.log(data.key);\n    }\n```\n\n在不查看touchFn的代码的情况下，因为不确定它对data做了什么，你是不可能知道会打印什么的。但是如果data是Immutable，你可以知道打印的是value。\n\n2. 节省内存\nImmutable.js使用了Structure Sharing 会尽量复用内存，甚至以前使用的对象也可以再次被复用。没有被引用的对象会被垃圾回收。\n\n```javascript\n    import {Map} from 'immutable';\n    let a = Map({\n        select: 'users',\n        filter: Map({name:'Tom'})\n    })\n    let b = a.set('select','people');\n    a===b; //false\n    a.get('filter') === b.get('filter') //true\n```\n\n上面的a和b共享了没有变化的filter节点。\n\n3. Undo/Redo, Copy/Paste, 甚至时间旅行这些功能做起来小菜一碟\n因为每次数据都是不一样的，只要把这些数据放到一个数组里存储起来，想回退到哪里就拿出对应的数据即可，很容易开发出撤销重做这种功能。\n\n4. 并发安全\n传统的并发非常难做，因为要处理各种数据不一致问题，因此有人就发明了各种锁来解决。但是使用了Immutable之后，数据天生是不可变的，并发锁就不需要了。\n\n然而现在并没有什么卵用，因为Javascript是单线程运行的，但未来可能会加入。\n\n5. 拥抱函数式编程\nImmutable本事就是函数式编程中的概念，纯函数式编程比面向对象更适用于前端开发。因为只要输入一致，输出必然一致，这样开发的组件更易于调试和组装。\n\n像ClojureScript,Elm等函数式编程语言中的数据类型天生都是Immutable的，这也是为什么ClojureScript基于React的框架，OM性能比React还要好的原因。\n\n## Immutable的缺点\n容易与原生的对象混淆\n这点使我们使用Immutable.js过程中遇到的最大的问题。写代码要做思维上的转变。\n\n虽然Immutable.js尽量尝试把API设计的原生对象类似，有的时候还是很难区别到底是Immutable对象还是原生对象，容易混淆操作。\n\nImmutable中的Map和List虽然对应原生Object和Array，但操作非常不同，比如你要用map.get('key')而不是map.key，array.get(0)而不是array[0]。另外Immutable每次修改都会返回新对象，很容易忘记赋值。\n\n当使用外部库的时候，一般需要使用原生对象，也很容易忘记转换。\n\n下面给出了一些办法来避免类似问题发生：\n1. 使用Flow或TypeScript这类有静态类型检查的工具。\n2. 约定变量命名规则：如所有Immutable类型对象以$$开头。\n3. 使用Immutable.fromJS而不是Immutable.Map或Immutable.List来创建对象，这样可以避免Immutable和原生对象间的混用。\n\n## 更过认识\n两个immutable对象可以使用 === 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回false\n\n```javascript\n    let map1 = Immutable.Map({a:1,b:1,c:1});\n    let map2 = Immutable.Map({a:1,b:1,c:1});\n    map1 === map2; //false\n```\n\n为了直接比较对象的值，immutable.js提供了Immutable.js来做值比较：\n\n```javascript\n    Immutable.is(map1,map2); //true\n```\n\nImmutable.is比较的是两个对象的hashCode或valueOf(对于javascript对象)。由于immutable内部使用了Trie数据结构来存储，只要两个对象的hashCode相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。\n\n后面会使用Immutable.js来减少React重复渲染，提高性能。\n\n与Object.freeze、const比较\nES6中新加入的Object.freeze和const都可以达到防止对象被篡改的功能，但是它们是shallowCopy的。对象层级一深就要特殊处理了。\n\nCursor的概念\n这个Cursor和数据库中的游标是完全不同的而概念。\n\n由于Immutable数据一般嵌套非常深，为了便于访问深层数据，Cursor提供了直接访问这个深层数据的引用。\n\n```javascript\n    import Immutable from 'immutable';\n    import Cursor from 'immutable/contrib/cursor';\n    let data = Immutable.fromJS({a:{b:{c:1}}});\n    //让cursor指向{c:1}\n    let cursor = Cursor.from(data,['a','b'],newData => {\n        //当cursor或其子cursor执行update时调用\n        console.log(newData);\n    });\n    cursor.get('c'); //1\n    cursor = cursor.update('c',x => x+1);\n    cursor.get('c'); //2\n```\n\n## 实践\n### 与React搭配使用，Pure Render\n\n熟悉React的都知道，React做性能优化时有一个避免重复渲染的大招，就是使用shouldComponentUpdate(),但它默认返回true，即始终会执行render()方法，然后做Virtual DOM比较，并得到是否需要做真实DOM更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。\n\n当然我们也可以在shouldComponentUpdate()中使用deepCopy和deepCompare来避免无必要的render(),但deepCopy和deepCompare一般都是非常耗性能。\n\nImmutable则提供了简洁高效的而判断数据是否变化的方法，只需 === 和is比较就能知道是否需要执行render(),而这个操作几乎0成本，所以可以极大提高性能。修改后的shouldComponentUpdate是这样的：\n\n```javascript\n    import {is} from 'immutable';\n    shouldComponentUpdate: (nextProps,nextState) => {\n        return !(this.props === nextProps || is(this.props,nextProps)) || !(this.state === nextState || is(this.state,nextState));\n    }\n```\n\n当然你也可以借助React.addons.PureRenderMixin 或支持class语法的pure-render-decorator来实现。\n\nsetState的一个技巧\n\nReact建议把this.state当作Immutable的，因此修改前需要做一个deepCopy,显得麻烦：\n\n```javascript\n    import '_' from 'lodash';\n    const Component = React.createClass({\n        getInitialState(){\n            return{\n                data:{times:0}\n            }\n        },\n        handleAdd(){\n            let data = _.cloneDeep(this.state.data);\n            data.times = data.times + 1;\n            this.setState({data:data});\n            //如果上面不做cloneDeep，下面打印的结果会是已经加1后的值。\n            console.log(this.state.data.times);\n        }\n    })\n```\n\n使用Immutable后：\n\n```javascript\n    getInitialState(){\n        return {\n            data: Map({times:0})\n        }\n    },\n    handleAdd(){\n        this.setState({data:this.state.data.update('times',v => v+1)});\n        //这时的times并不会改变\n        console.log(this.state.data.get('times'));\n    }\n```\n\n上面的handleAdd可以简写成：\n\n```javascript\n    handleAdd(){\n        this.setState(({data}) => ({\n            data: data.update('times', v => v+1)})\n        });\n    }\n```\n\n## 与Flux搭配使用\n由于Flux并没有限定Store中的数据类型，使用Immutable非常简单。\n下面是实现一个类似带有添加和撤销功能Store:\n\n```javascript\n    import {Map, OrderedMap} from 'immutable';\n    let todos = OrderedMap();\n    let history = []; //普通数组，存放每次操作后产生的数据\n    let TodoStore = createStore({\n        getAll(){\n            return todos;\n        }\n    });\n    Dispatcher.register(action => {\n        if(action.actionType === 'create'){\n            let id = createGUID();\n            history.push(todos); //记录当前操作前的数据，便于撤销\n            todos = todos.set(id,Map({\n                id: id,\n                complete: false,\n                text: action.text.trim()\n            }));\n            TodoStore.emitChange();\n        }else if(action.actionType === 'undo'){\n            if(history.length > 0){\n                todos = history.pop();\n            }\n            TodoStore.emitChange();\n        }\n    })\n```\n\n## 与Redux搭配使用\nRedux是目前最流行的Flux衍生库。它简化了Flux中多个Store的概念，只有一个Store，数据操作通过Reducer中实现；同时它提供了更简洁和清晰的单项数据流(View -> Action -> Middleware -> Reducer),也更易于开发同构应用。\n\n由于 Redux 中内置的 combineReducers 和 reducer 中的 initialState 都为原生的 Object 对象，所以不能和 Immutable 原生搭配使用。\n\n幸运的是，Redux 并不排斥使用 Immutable，可以自己重写 combineReducers 或使用 redux-immutablejs 来提供支持。\n\n上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。\n\n## 总结\nImmutable可以给应用带来极大的性能提升，但是否使用还要看项目情况。由于侵入性较强，新项目引入比较容易，老项目迁移需要评估迁移。对于一些提供给外部使用的公共组件，最好不要把Immutable对象直接暴露在对外接口中。","slug":"Immutable详解及React中实践","published":1,"updated":"2016-05-16T02:11:32.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciob9wmv90002zgdl9jo66tez","content":"<blockquote>\n<p>Shared mutable state is the root of all evil</p>\n</blockquote>\n<p>有人数Immutable可以给React应用带来数十倍的提升，也有人数Immutable的引入是近期Javascript中伟大的发明，因为同期React太火，它的光芒被掩盖了。这些至少说明Immutable是很有价值的。</p>\n<p>Javascript中的对象一般是可变的(mutable)，因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。虽然这样做可以节约内存，但是当应用复杂后，这就造成了非大的隐患，Mutable带来的优点变得得不偿失。为了解决这个问题，一般的做法是使用shallowCopy(浅拷贝)或deepCopy(深拷贝)来避免被修改，但这样做造成了CPU和内存的浪费。</p>\n<p>而Immutable可以很好的解决这些问题。</p>\n<p>##什么是Immutable Data<br>Immutable Data就是一旦创建，就不能再被更改的数据。对Immutable对象的任何修改或添加删除操作都会返回一个新的Immutable对象。Immutable实现的原理是Persistent Data Structure(持久化数据结构)，也就是使用旧的数据创建新的数据时，要保证旧数据同时可用且不变。同时为了避免deepCopy把所有的节点的都复制一遍带来的性能损耗，Immutable使用了Structure Sharing(结构共享)，即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其他节点则进行共享。</p>\n<p>目前流行的Immutable库有两个：</p>\n<h3 id=\"immutable-js\"><a href=\"#immutable-js\" class=\"headerlink\" title=\"immutable.js\"></a>immutable.js</h3><p>Facebook工程师Lee Byron花费3年时间打造，与React同期出现，但没有被默认放到React工具库里(React提供了简化的Helper)。它内部实现了一套完整的Persistent Data Structure，还有很多易用的数据类型。像Collection、List、Map、Set、Record、Seq.有非常全面的map、filter、groupBy、reduce <code>find</code>函数式操作方法。同事API也尽量与Object或Array类似。<br>其中有3种最重要的数据结构：</p>\n<ul>\n<li>Map:键值对集合，对应于Object,ES6也有专门的Map对象</li>\n<li>List: 有序可重复的列表，对应于Array</li>\n<li>Set: 无序且不可重复的列表</li>\n</ul>\n<h3 id=\"seamless-immutable\"><a href=\"#seamless-immutable\" class=\"headerlink\" title=\"seamless-immutable\"></a>seamless-immutable</h3><p>与 Immutable.js 学院派的风格不同，seamless-immutable 并没有实现完整的 Persistent Data Structure，而是使用 Object.defineProperty（因此只能在 IE9 及以上使用）扩展了 JavaScript 的 Array 和 Object 对象来实现，只支持 Array 和 Object 两种数据类型，API 基于与 Array 和 Object 操持不变。代码库非常小，压缩后下载只有 2K。而 Immutable.js 压缩后下载有 16K。</p>\n<p>下面是例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原来的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;a:&#123;b:<span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = foo;</span><br><span class=\"line\">bar.a.b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.a.b); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo === bar); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//使用immutable.js后</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Immutable <span class=\"keyword\">from</span> <span class=\"string\">'immutable'</span>;</span><br><span class=\"line\">foo = Immutable.fromJS(&#123;a:&#123;b:<span class=\"number\">1</span>&#125;&#125;);</span><br><span class=\"line\">bar = foo.setIn([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>],<span class=\"number\">2</span>); <span class=\"comment\">// 使用setIn赋值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getIn([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>])); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo === bar); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">//使用seamless-immutable.js后</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SImmutable <span class=\"keyword\">from</span> <span class=\"string\">'seamless-immutable'</span>;</span><br><span class=\"line\">foo = SImmutable(&#123;a:&#123;b:<span class=\"number\">1</span>&#125;&#125;);</span><br><span class=\"line\">bar = foo.merge(&#123;a:&#123;b:<span class=\"number\">2</span>&#125;&#125;); <span class=\"comment\">//使用merge赋值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.a.b); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo === bar); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Immutable优点\"><a href=\"#Immutable优点\" class=\"headerlink\" title=\"Immutable优点\"></a>Immutable优点</h2><ol>\n<li>Immutable降低了Mutable带来的复杂度<br>可变(Mutable)数据耦合了Time和Value的概念，造成了数据很难被回溯。<br>比如下面的一段代码：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">touchAndLog</span>(<span class=\"params\">touchFn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = &#123;key:<span class=\"string\">'value'</span>&#125;;</span><br><span class=\"line\">    touchFn(data);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在不查看touchFn的代码的情况下，因为不确定它对data做了什么，你是不可能知道会打印什么的。但是如果data是Immutable，你可以知道打印的是value。</p>\n<ol>\n<li>节省内存<br>Immutable.js使用了Structure Sharing 会尽量复用内存，甚至以前使用的对象也可以再次被复用。没有被引用的对象会被垃圾回收。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"built_in\">Map</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">'immutable'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"built_in\">Map</span>(&#123;</span><br><span class=\"line\">    select: <span class=\"string\">'users'</span>,</span><br><span class=\"line\">    filter: <span class=\"built_in\">Map</span>(&#123;name:<span class=\"string\">'Tom'</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a.set(<span class=\"string\">'select'</span>,<span class=\"string\">'people'</span>);</span><br><span class=\"line\">a===b; <span class=\"comment\">//false</span></span><br><span class=\"line\">a.get(<span class=\"string\">'filter'</span>) === b.get(<span class=\"string\">'filter'</span>) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>上面的a和b共享了没有变化的filter节点。</p>\n<ol>\n<li><p>Undo/Redo, Copy/Paste, 甚至时间旅行这些功能做起来小菜一碟<br>因为每次数据都是不一样的，只要把这些数据放到一个数组里存储起来，想回退到哪里就拿出对应的数据即可，很容易开发出撤销重做这种功能。</p>\n</li>\n<li><p>并发安全<br>传统的并发非常难做，因为要处理各种数据不一致问题，因此有人就发明了各种锁来解决。但是使用了Immutable之后，数据天生是不可变的，并发锁就不需要了。</p>\n</li>\n</ol>\n<p>然而现在并没有什么卵用，因为Javascript是单线程运行的，但未来可能会加入。</p>\n<ol>\n<li>拥抱函数式编程<br>Immutable本事就是函数式编程中的概念，纯函数式编程比面向对象更适用于前端开发。因为只要输入一致，输出必然一致，这样开发的组件更易于调试和组装。</li>\n</ol>\n<p>像ClojureScript,Elm等函数式编程语言中的数据类型天生都是Immutable的，这也是为什么ClojureScript基于React的框架，OM性能比React还要好的原因。</p>\n<h2 id=\"Immutable的缺点\"><a href=\"#Immutable的缺点\" class=\"headerlink\" title=\"Immutable的缺点\"></a>Immutable的缺点</h2><p>容易与原生的对象混淆<br>这点使我们使用Immutable.js过程中遇到的最大的问题。写代码要做思维上的转变。</p>\n<p>虽然Immutable.js尽量尝试把API设计的原生对象类似，有的时候还是很难区别到底是Immutable对象还是原生对象，容易混淆操作。</p>\n<p>Immutable中的Map和List虽然对应原生Object和Array，但操作非常不同，比如你要用map.get(‘key’)而不是map.key，array.get(0)而不是array[0]。另外Immutable每次修改都会返回新对象，很容易忘记赋值。</p>\n<p>当使用外部库的时候，一般需要使用原生对象，也很容易忘记转换。</p>\n<p>下面给出了一些办法来避免类似问题发生：</p>\n<ol>\n<li>使用Flow或TypeScript这类有静态类型检查的工具。</li>\n<li>约定变量命名规则：如所有Immutable类型对象以$$开头。</li>\n<li>使用Immutable.fromJS而不是Immutable.Map或Immutable.List来创建对象，这样可以避免Immutable和原生对象间的混用。</li>\n</ol>\n<h2 id=\"更过认识\"><a href=\"#更过认识\" class=\"headerlink\" title=\"更过认识\"></a>更过认识</h2><p>两个immutable对象可以使用 === 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map1 = Immutable.Map(&#123;a:<span class=\"number\">1</span>,b:<span class=\"number\">1</span>,c:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> map2 = Immutable.Map(&#123;a:<span class=\"number\">1</span>,b:<span class=\"number\">1</span>,c:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">map1 === map2; <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p>为了直接比较对象的值，immutable.js提供了Immutable.js来做值比较：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Immutable.is(map1,map2); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>Immutable.is比较的是两个对象的hashCode或valueOf(对于javascript对象)。由于immutable内部使用了Trie数据结构来存储，只要两个对象的hashCode相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。</p>\n<p>后面会使用Immutable.js来减少React重复渲染，提高性能。</p>\n<p>与Object.freeze、const比较<br>ES6中新加入的Object.freeze和const都可以达到防止对象被篡改的功能，但是它们是shallowCopy的。对象层级一深就要特殊处理了。</p>\n<p>Cursor的概念<br>这个Cursor和数据库中的游标是完全不同的而概念。</p>\n<p>由于Immutable数据一般嵌套非常深，为了便于访问深层数据，Cursor提供了直接访问这个深层数据的引用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Immutable <span class=\"keyword\">from</span> <span class=\"string\">'immutable'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Cursor <span class=\"keyword\">from</span> <span class=\"string\">'immutable/contrib/cursor'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = Immutable.fromJS(&#123;a:&#123;b:&#123;c:<span class=\"number\">1</span>&#125;&#125;&#125;);</span><br><span class=\"line\"><span class=\"comment\">//让cursor指向&#123;c:1&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cursor = Cursor.from(data,[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>],newData =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//当cursor或其子cursor执行update时调用</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newData);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">cursor.get(<span class=\"string\">'c'</span>); <span class=\"comment\">//1</span></span><br><span class=\"line\">cursor = cursor.update(<span class=\"string\">'c'</span>,x =&gt; x+<span class=\"number\">1</span>);</span><br><span class=\"line\">cursor.get(<span class=\"string\">'c'</span>); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><h3 id=\"与React搭配使用，Pure-Render\"><a href=\"#与React搭配使用，Pure-Render\" class=\"headerlink\" title=\"与React搭配使用，Pure Render\"></a>与React搭配使用，Pure Render</h3><p>熟悉React的都知道，React做性能优化时有一个避免重复渲染的大招，就是使用shouldComponentUpdate(),但它默认返回true，即始终会执行render()方法，然后做Virtual DOM比较，并得到是否需要做真实DOM更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。</p>\n<p>当然我们也可以在shouldComponentUpdate()中使用deepCopy和deepCompare来避免无必要的render(),但deepCopy和deepCompare一般都是非常耗性能。</p>\n<p>Immutable则提供了简洁高效的而判断数据是否变化的方法，只需 === 和is比较就能知道是否需要执行render(),而这个操作几乎0成本，所以可以极大提高性能。修改后的shouldComponentUpdate是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;is&#125; <span class=\"keyword\">from</span> <span class=\"string\">'immutable'</span>;</span><br><span class=\"line\">shouldComponentUpdate: (nextProps,nextState) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(<span class=\"keyword\">this</span>.props === nextProps || is(<span class=\"keyword\">this</span>.props,nextProps)) || !(<span class=\"keyword\">this</span>.state === nextState || is(<span class=\"keyword\">this</span>.state,nextState));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然你也可以借助React.addons.PureRenderMixin 或支持class语法的pure-render-decorator来实现。</p>\n<p>setState的一个技巧</p>\n<p>React建议把this.state当作Immutable的，因此修改前需要做一个deepCopy,显得麻烦：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'_'</span> <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Component = React.createClass(&#123;</span><br><span class=\"line\">    getInitialState()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">            data:&#123;times:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleAdd()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = _.cloneDeep(<span class=\"keyword\">this</span>.state.data);</span><br><span class=\"line\">        data.times = data.times + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;data:data&#125;);</span><br><span class=\"line\">        <span class=\"comment\">//如果上面不做cloneDeep，下面打印的结果会是已经加1后的值。</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.data.times);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用Immutable后：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getInitialState()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        data: <span class=\"built_in\">Map</span>(&#123;times:<span class=\"number\">0</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">handleAdd()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;data:<span class=\"keyword\">this</span>.state.data.update(<span class=\"string\">'times'</span>,v =&gt; v+<span class=\"number\">1</span>)&#125;);</span><br><span class=\"line\">    <span class=\"comment\">//这时的times并不会改变</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.data.get(<span class=\"string\">'times'</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的handleAdd可以简写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleAdd()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState((&#123;data&#125;) =&gt; (&#123;</span><br><span class=\"line\">        data: data.update(<span class=\"string\">'times'</span>, v =&gt; v+<span class=\"number\">1</span>)&#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"与Flux搭配使用\"><a href=\"#与Flux搭配使用\" class=\"headerlink\" title=\"与Flux搭配使用\"></a>与Flux搭配使用</h2><p>由于Flux并没有限定Store中的数据类型，使用Immutable非常简单。<br>下面是实现一个类似带有添加和撤销功能Store:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"built_in\">Map</span>, OrderedMap&#125; <span class=\"keyword\">from</span> <span class=\"string\">'immutable'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> todos = OrderedMap();</span><br><span class=\"line\"><span class=\"keyword\">let</span> history = []; <span class=\"comment\">//普通数组，存放每次操作后产生的数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> TodoStore = createStore(&#123;</span><br><span class=\"line\">    getAll()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> todos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Dispatcher.register(action =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(action.actionType === <span class=\"string\">'create'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> id = createGUID();</span><br><span class=\"line\">        history.push(todos); <span class=\"comment\">//记录当前操作前的数据，便于撤销</span></span><br><span class=\"line\">        todos = todos.set(id,<span class=\"built_in\">Map</span>(&#123;</span><br><span class=\"line\">            id: id,</span><br><span class=\"line\">            complete: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            text: action.text.trim()</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        TodoStore.emitChange();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(action.actionType === <span class=\"string\">'undo'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(history.length &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            todos = history.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TodoStore.emitChange();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"与Redux搭配使用\"><a href=\"#与Redux搭配使用\" class=\"headerlink\" title=\"与Redux搭配使用\"></a>与Redux搭配使用</h2><p>Redux是目前最流行的Flux衍生库。它简化了Flux中多个Store的概念，只有一个Store，数据操作通过Reducer中实现；同时它提供了更简洁和清晰的单项数据流(View -&gt; Action -&gt; Middleware -&gt; Reducer),也更易于开发同构应用。</p>\n<p>由于 Redux 中内置的 combineReducers 和 reducer 中的 initialState 都为原生的 Object 对象，所以不能和 Immutable 原生搭配使用。</p>\n<p>幸运的是，Redux 并不排斥使用 Immutable，可以自己重写 combineReducers 或使用 redux-immutablejs 来提供支持。</p>\n<p>上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Immutable可以给应用带来极大的性能提升，但是否使用还要看项目情况。由于侵入性较强，新项目引入比较容易，老项目迁移需要评估迁移。对于一些提供给外部使用的公共组件，最好不要把Immutable对象直接暴露在对外接口中。</p>\n","excerpt":"","more":"<blockquote>\n<p>Shared mutable state is the root of all evil</p>\n</blockquote>\n<p>有人数Immutable可以给React应用带来数十倍的提升，也有人数Immutable的引入是近期Javascript中伟大的发明，因为同期React太火，它的光芒被掩盖了。这些至少说明Immutable是很有价值的。</p>\n<p>Javascript中的对象一般是可变的(mutable)，因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。虽然这样做可以节约内存，但是当应用复杂后，这就造成了非大的隐患，Mutable带来的优点变得得不偿失。为了解决这个问题，一般的做法是使用shallowCopy(浅拷贝)或deepCopy(深拷贝)来避免被修改，但这样做造成了CPU和内存的浪费。</p>\n<p>而Immutable可以很好的解决这些问题。</p>\n<p>##什么是Immutable Data<br>Immutable Data就是一旦创建，就不能再被更改的数据。对Immutable对象的任何修改或添加删除操作都会返回一个新的Immutable对象。Immutable实现的原理是Persistent Data Structure(持久化数据结构)，也就是使用旧的数据创建新的数据时，要保证旧数据同时可用且不变。同时为了避免deepCopy把所有的节点的都复制一遍带来的性能损耗，Immutable使用了Structure Sharing(结构共享)，即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其他节点则进行共享。</p>\n<p>目前流行的Immutable库有两个：</p>\n<h3 id=\"immutable-js\"><a href=\"#immutable-js\" class=\"headerlink\" title=\"immutable.js\"></a>immutable.js</h3><p>Facebook工程师Lee Byron花费3年时间打造，与React同期出现，但没有被默认放到React工具库里(React提供了简化的Helper)。它内部实现了一套完整的Persistent Data Structure，还有很多易用的数据类型。像Collection、List、Map、Set、Record、Seq.有非常全面的map、filter、groupBy、reduce <code>find</code>函数式操作方法。同事API也尽量与Object或Array类似。<br>其中有3种最重要的数据结构：</p>\n<ul>\n<li>Map:键值对集合，对应于Object,ES6也有专门的Map对象</li>\n<li>List: 有序可重复的列表，对应于Array</li>\n<li>Set: 无序且不可重复的列表</li>\n</ul>\n<h3 id=\"seamless-immutable\"><a href=\"#seamless-immutable\" class=\"headerlink\" title=\"seamless-immutable\"></a>seamless-immutable</h3><p>与 Immutable.js 学院派的风格不同，seamless-immutable 并没有实现完整的 Persistent Data Structure，而是使用 Object.defineProperty（因此只能在 IE9 及以上使用）扩展了 JavaScript 的 Array 和 Object 对象来实现，只支持 Array 和 Object 两种数据类型，API 基于与 Array 和 Object 操持不变。代码库非常小，压缩后下载只有 2K。而 Immutable.js 压缩后下载有 16K。</p>\n<p>下面是例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原来的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;a:&#123;b:<span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = foo;</span><br><span class=\"line\">bar.a.b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.a.b); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo === bar); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//使用immutable.js后</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Immutable <span class=\"keyword\">from</span> <span class=\"string\">'immutable'</span>;</span><br><span class=\"line\">foo = Immutable.fromJS(&#123;a:&#123;b:<span class=\"number\">1</span>&#125;&#125;);</span><br><span class=\"line\">bar = foo.setIn([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>],<span class=\"number\">2</span>); <span class=\"comment\">// 使用setIn赋值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.getIn([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>])); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo === bar); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">//使用seamless-immutable.js后</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SImmutable <span class=\"keyword\">from</span> <span class=\"string\">'seamless-immutable'</span>;</span><br><span class=\"line\">foo = SImmutable(&#123;a:&#123;b:<span class=\"number\">1</span>&#125;&#125;);</span><br><span class=\"line\">bar = foo.merge(&#123;a:&#123;b:<span class=\"number\">2</span>&#125;&#125;); <span class=\"comment\">//使用merge赋值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.a.b); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo === bar); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Immutable优点\"><a href=\"#Immutable优点\" class=\"headerlink\" title=\"Immutable优点\"></a>Immutable优点</h2><ol>\n<li>Immutable降低了Mutable带来的复杂度<br>可变(Mutable)数据耦合了Time和Value的概念，造成了数据很难被回溯。<br>比如下面的一段代码：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">touchAndLog</span>(<span class=\"params\">touchFn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = &#123;key:<span class=\"string\">'value'</span>&#125;;</span><br><span class=\"line\">    touchFn(data);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在不查看touchFn的代码的情况下，因为不确定它对data做了什么，你是不可能知道会打印什么的。但是如果data是Immutable，你可以知道打印的是value。</p>\n<ol>\n<li>节省内存<br>Immutable.js使用了Structure Sharing 会尽量复用内存，甚至以前使用的对象也可以再次被复用。没有被引用的对象会被垃圾回收。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"built_in\">Map</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">'immutable'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"built_in\">Map</span>(&#123;</span><br><span class=\"line\">    select: <span class=\"string\">'users'</span>,</span><br><span class=\"line\">    filter: <span class=\"built_in\">Map</span>(&#123;name:<span class=\"string\">'Tom'</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a.set(<span class=\"string\">'select'</span>,<span class=\"string\">'people'</span>);</span><br><span class=\"line\">a===b; <span class=\"comment\">//false</span></span><br><span class=\"line\">a.get(<span class=\"string\">'filter'</span>) === b.get(<span class=\"string\">'filter'</span>) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>上面的a和b共享了没有变化的filter节点。</p>\n<ol>\n<li><p>Undo/Redo, Copy/Paste, 甚至时间旅行这些功能做起来小菜一碟<br>因为每次数据都是不一样的，只要把这些数据放到一个数组里存储起来，想回退到哪里就拿出对应的数据即可，很容易开发出撤销重做这种功能。</p>\n</li>\n<li><p>并发安全<br>传统的并发非常难做，因为要处理各种数据不一致问题，因此有人就发明了各种锁来解决。但是使用了Immutable之后，数据天生是不可变的，并发锁就不需要了。</p>\n</li>\n</ol>\n<p>然而现在并没有什么卵用，因为Javascript是单线程运行的，但未来可能会加入。</p>\n<ol>\n<li>拥抱函数式编程<br>Immutable本事就是函数式编程中的概念，纯函数式编程比面向对象更适用于前端开发。因为只要输入一致，输出必然一致，这样开发的组件更易于调试和组装。</li>\n</ol>\n<p>像ClojureScript,Elm等函数式编程语言中的数据类型天生都是Immutable的，这也是为什么ClojureScript基于React的框架，OM性能比React还要好的原因。</p>\n<h2 id=\"Immutable的缺点\"><a href=\"#Immutable的缺点\" class=\"headerlink\" title=\"Immutable的缺点\"></a>Immutable的缺点</h2><p>容易与原生的对象混淆<br>这点使我们使用Immutable.js过程中遇到的最大的问题。写代码要做思维上的转变。</p>\n<p>虽然Immutable.js尽量尝试把API设计的原生对象类似，有的时候还是很难区别到底是Immutable对象还是原生对象，容易混淆操作。</p>\n<p>Immutable中的Map和List虽然对应原生Object和Array，但操作非常不同，比如你要用map.get(‘key’)而不是map.key，array.get(0)而不是array[0]。另外Immutable每次修改都会返回新对象，很容易忘记赋值。</p>\n<p>当使用外部库的时候，一般需要使用原生对象，也很容易忘记转换。</p>\n<p>下面给出了一些办法来避免类似问题发生：</p>\n<ol>\n<li>使用Flow或TypeScript这类有静态类型检查的工具。</li>\n<li>约定变量命名规则：如所有Immutable类型对象以$$开头。</li>\n<li>使用Immutable.fromJS而不是Immutable.Map或Immutable.List来创建对象，这样可以避免Immutable和原生对象间的混用。</li>\n</ol>\n<h2 id=\"更过认识\"><a href=\"#更过认识\" class=\"headerlink\" title=\"更过认识\"></a>更过认识</h2><p>两个immutable对象可以使用 === 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map1 = Immutable.Map(&#123;a:<span class=\"number\">1</span>,b:<span class=\"number\">1</span>,c:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> map2 = Immutable.Map(&#123;a:<span class=\"number\">1</span>,b:<span class=\"number\">1</span>,c:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">map1 === map2; <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p>为了直接比较对象的值，immutable.js提供了Immutable.js来做值比较：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Immutable.is(map1,map2); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>Immutable.is比较的是两个对象的hashCode或valueOf(对于javascript对象)。由于immutable内部使用了Trie数据结构来存储，只要两个对象的hashCode相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。</p>\n<p>后面会使用Immutable.js来减少React重复渲染，提高性能。</p>\n<p>与Object.freeze、const比较<br>ES6中新加入的Object.freeze和const都可以达到防止对象被篡改的功能，但是它们是shallowCopy的。对象层级一深就要特殊处理了。</p>\n<p>Cursor的概念<br>这个Cursor和数据库中的游标是完全不同的而概念。</p>\n<p>由于Immutable数据一般嵌套非常深，为了便于访问深层数据，Cursor提供了直接访问这个深层数据的引用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Immutable <span class=\"keyword\">from</span> <span class=\"string\">'immutable'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Cursor <span class=\"keyword\">from</span> <span class=\"string\">'immutable/contrib/cursor'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = Immutable.fromJS(&#123;a:&#123;b:&#123;c:<span class=\"number\">1</span>&#125;&#125;&#125;);</span><br><span class=\"line\"><span class=\"comment\">//让cursor指向&#123;c:1&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cursor = Cursor.from(data,[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>],newData =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//当cursor或其子cursor执行update时调用</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newData);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">cursor.get(<span class=\"string\">'c'</span>); <span class=\"comment\">//1</span></span><br><span class=\"line\">cursor = cursor.update(<span class=\"string\">'c'</span>,x =&gt; x+<span class=\"number\">1</span>);</span><br><span class=\"line\">cursor.get(<span class=\"string\">'c'</span>); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><h3 id=\"与React搭配使用，Pure-Render\"><a href=\"#与React搭配使用，Pure-Render\" class=\"headerlink\" title=\"与React搭配使用，Pure Render\"></a>与React搭配使用，Pure Render</h3><p>熟悉React的都知道，React做性能优化时有一个避免重复渲染的大招，就是使用shouldComponentUpdate(),但它默认返回true，即始终会执行render()方法，然后做Virtual DOM比较，并得到是否需要做真实DOM更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。</p>\n<p>当然我们也可以在shouldComponentUpdate()中使用deepCopy和deepCompare来避免无必要的render(),但deepCopy和deepCompare一般都是非常耗性能。</p>\n<p>Immutable则提供了简洁高效的而判断数据是否变化的方法，只需 === 和is比较就能知道是否需要执行render(),而这个操作几乎0成本，所以可以极大提高性能。修改后的shouldComponentUpdate是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;is&#125; <span class=\"keyword\">from</span> <span class=\"string\">'immutable'</span>;</span><br><span class=\"line\">shouldComponentUpdate: (nextProps,nextState) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(<span class=\"keyword\">this</span>.props === nextProps || is(<span class=\"keyword\">this</span>.props,nextProps)) || !(<span class=\"keyword\">this</span>.state === nextState || is(<span class=\"keyword\">this</span>.state,nextState));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然你也可以借助React.addons.PureRenderMixin 或支持class语法的pure-render-decorator来实现。</p>\n<p>setState的一个技巧</p>\n<p>React建议把this.state当作Immutable的，因此修改前需要做一个deepCopy,显得麻烦：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'_'</span> <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Component = React.createClass(&#123;</span><br><span class=\"line\">    getInitialState()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">            data:&#123;times:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleAdd()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = _.cloneDeep(<span class=\"keyword\">this</span>.state.data);</span><br><span class=\"line\">        data.times = data.times + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;data:data&#125;);</span><br><span class=\"line\">        <span class=\"comment\">//如果上面不做cloneDeep，下面打印的结果会是已经加1后的值。</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.data.times);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用Immutable后：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getInitialState()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        data: <span class=\"built_in\">Map</span>(&#123;times:<span class=\"number\">0</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">handleAdd()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;data:<span class=\"keyword\">this</span>.state.data.update(<span class=\"string\">'times'</span>,v =&gt; v+<span class=\"number\">1</span>)&#125;);</span><br><span class=\"line\">    <span class=\"comment\">//这时的times并不会改变</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.data.get(<span class=\"string\">'times'</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的handleAdd可以简写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleAdd()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState((&#123;data&#125;) =&gt; (&#123;</span><br><span class=\"line\">        data: data.update(<span class=\"string\">'times'</span>, v =&gt; v+<span class=\"number\">1</span>)&#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"与Flux搭配使用\"><a href=\"#与Flux搭配使用\" class=\"headerlink\" title=\"与Flux搭配使用\"></a>与Flux搭配使用</h2><p>由于Flux并没有限定Store中的数据类型，使用Immutable非常简单。<br>下面是实现一个类似带有添加和撤销功能Store:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"built_in\">Map</span>, OrderedMap&#125; <span class=\"keyword\">from</span> <span class=\"string\">'immutable'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> todos = OrderedMap();</span><br><span class=\"line\"><span class=\"keyword\">let</span> history = []; <span class=\"comment\">//普通数组，存放每次操作后产生的数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> TodoStore = createStore(&#123;</span><br><span class=\"line\">    getAll()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> todos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Dispatcher.register(action =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(action.actionType === <span class=\"string\">'create'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> id = createGUID();</span><br><span class=\"line\">        history.push(todos); <span class=\"comment\">//记录当前操作前的数据，便于撤销</span></span><br><span class=\"line\">        todos = todos.set(id,<span class=\"built_in\">Map</span>(&#123;</span><br><span class=\"line\">            id: id,</span><br><span class=\"line\">            complete: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            text: action.text.trim()</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        TodoStore.emitChange();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(action.actionType === <span class=\"string\">'undo'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(history.length &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            todos = history.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TodoStore.emitChange();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"与Redux搭配使用\"><a href=\"#与Redux搭配使用\" class=\"headerlink\" title=\"与Redux搭配使用\"></a>与Redux搭配使用</h2><p>Redux是目前最流行的Flux衍生库。它简化了Flux中多个Store的概念，只有一个Store，数据操作通过Reducer中实现；同时它提供了更简洁和清晰的单项数据流(View -&gt; Action -&gt; Middleware -&gt; Reducer),也更易于开发同构应用。</p>\n<p>由于 Redux 中内置的 combineReducers 和 reducer 中的 initialState 都为原生的 Object 对象，所以不能和 Immutable 原生搭配使用。</p>\n<p>幸运的是，Redux 并不排斥使用 Immutable，可以自己重写 combineReducers 或使用 redux-immutablejs 来提供支持。</p>\n<p>上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Immutable可以给应用带来极大的性能提升，但是否使用还要看项目情况。由于侵入性较强，新项目引入比较容易，老项目迁移需要评估迁移。对于一些提供给外部使用的公共组件，最好不要把Immutable对象直接暴露在对外接口中。</p>\n"},{"title":"es6函数式编程","date":"2016-05-08T13:46:52.000Z","_content":">Intelligence without ambition is a bird without wings.\n\n## 什么是函数式编程\n函数式编程是一种编程范式，我们常见的编程范式有命令式编程，函数式编程和逻辑式编程，常见的面向对象编程也是一种命令式编程。函数式编程世界里，函数是一等公民。\n\n## 函数式编程给我带来的好处\n由于命令式编程语言也可以通过类似函数指针的方式来实现高阶函数，函数式的最主要的好处是不可变性带来的。没有可变的状态，函数就是引用透明的和没有副作用。\n\n好处：函数既不依赖外部的状态也不修改外部的状态，函数调用的结果不依赖调用的时间和位置，这样写的代码容易进行推理，这样写的代码容易进行推理，不容易出错。这使得单元测试和调试都更容易。\n\n1. 纯函数式\n\n> 什么是纯函数：相同的参数返回的结果相同，它的执行不依赖于系统的状态\n函数式编程的核心就是借助形式化数学来描述逻辑：lambda运算。数学家们喜欢将程序描述为数据的变换，这也引入了第一个概念：纯函数。纯函数无副作用，仅仅依赖于函数的输入，并且当输入相同时输出保持一致。  \n\n1) 非纯净的\n```javascript\n    let number = 1;\n    const increment = () => number + 1;\n    increment();\n```\n2) 纯净的\n```javascript\n    const increment = n => n+1;\n    increment(1);\n```\n\n2. 高阶函数\n函数把其他函数当做参数传递使用或者返回一个函数\n\n1) 加法\n```javascript\n    const sum = (x,y) => x+y;\n    const calculate = (fn,x,y) => fn(x,y);\n    calculate(sum,1,2);\n```\n\n2) filter\n```javascript\n    let students = [\n        {name: 'Tom', grade: 6},\n        {name: 'Tim', grade: 7},\n        {name: 'Bom', grade: 8}\n    ];\n    const isApproved = student => student.grade >=7;\n    students.filter(isApproved);\n```\n\n3) Map\n```javascript\n    const byName = obj => obj.name;\n    students.map(byName);\n```\n\n4) 链式\n```javascript\n    let students = [\n        {name: 'Tom', grade: 6},\n        {name: 'Tim', grade: 7},\n        {name: 'Bom', grade: 8}\n    ];\n    const isApproved = student => student.grade >= 6;\n    \n    const byName = obj => obj.name;\n    \n    students.filter(isApproved).map(byName);\n```\n\n5) Reduce\n```javascript\n    const totalGrades = students.reduce((sum,student) => sum + student.grade, 0);\n    totalGrades\n```\n\n3. 递归\n当一个函数调用它自己的时候就创造了一个循环\n\n1) 递减\n```javascript\n    const countdown = num => {\n        if(num > 0){\n            console.log(num);\n            countdown(num -1);\n        }\n    }\n    countdown(5);\n```\n\n2) 阶乘\n```javascript\n    const factorial = num => {\n        if(num <= 0){\n            return 1;\n        }else{\n            return (num * factorial(num - 1));\n        }\n    }\n    factorial(5);\n```\n\n4. Functor\n有map方法的对象。functor的map方法通过map回调函数调用自己的内容，然后返回一个新的functor.\n\n1) 给数组所有的元素添加一个值\n```javascript\n    const plus1 = num => num + 1;\n    let numbers = [1,2,3];\n    numbers.map(plus1);\n```\n\n5. 组合\n通过组合两个或更多的函数生成一个新的函数\n\n1) 组合两个函数生成一个新的函数\n```javascript\n    const compose = (f,g) => x => f(g(x));\n    const toUpperCase = x => x.toUpperCase();\n    const exclaim = x => `${x}!`;\n    \n    const angry = compose(exclaim,toUpperCase);\n    \n    angry(\"stop this\");\n```\n\n2) 组合三个函数生成一个新的\n```javascript\n    const compose = (f,g) => x => f(g(x));\n    \n    const toUpperCase = x => x.toUpperCase();\n    const exclaim = x => `${x}!`;\n    const moreExclaim = x => `${x}!!!!!`;\n    \n    const reallyAngry = compose(exclaim, compose(toUpperCase,moreExclaim));\n    \n    reallyAngry(\"stop this\");\n```\n\n6. 解构\n从数组中提取数据或对象使用一种语法混合数组和对象文本的建设。或“模式匹配”。\n1) Select from pattern\n\n```javascript\n    const foo = () => [1,2,3];\n    const [a,b] = foo();\n    console.log(a,b);\n```\n\n2) 接收rest值\n```javascript\n    const [a,...b] = [1,2,3];\n    console.log(a,b)\n```\n\n3) 可选参数\n```javascript\n    const ajax = ({ url = \"localhost\", port: p=80}, ...data) => console.log(\"Url:\", url, \"Port:\", p, \"Rest:\", data);\n    \n    ajax({ url: \"someHost\" }, \"additional\", \"data\", \"hello\");\n    // Url: someHost Port: 80 Rest: [ 'additional', 'data', 'hello' ]\n    \n    ajax({ }, \"additional\", \"data\", \"hello\");\n    // Url: localhost Port: 80 Rest: [ 'additional', 'data', 'hello' ]\n```\n\n7. 柯里化\n一个函数有多个参数，把每个参数通过链式的形式返回下一个函数，知道最后一个返回结果。\n\n1) 对象柯里化\n```javascript\n    const student = name => grade => `Name: ${name} | Grade: ${grade}`;\n    student(\"Matt\")(8);\n    // Name: Matt | Grade: 8\n```\n\n2) 加法函数柯里化\n```javascript\n    const add = x => y => x+y;\n    \n    const increment = add(1);\n    const addFive = add(5);\n    \n    increment(3);\n    //4\n    \n    addFive(10);\n    //15\n```\n\n\n\n\n\n\n","source":"_posts/es6函数式编程.md","raw":"---\ntitle: es6函数式编程\ndate: 2016-05-08 21:46:52\ntags:\n- javascript\n- es6\n- 函数式编程\ncategories: 教程\n---\n>Intelligence without ambition is a bird without wings.\n\n## 什么是函数式编程\n函数式编程是一种编程范式，我们常见的编程范式有命令式编程，函数式编程和逻辑式编程，常见的面向对象编程也是一种命令式编程。函数式编程世界里，函数是一等公民。\n\n## 函数式编程给我带来的好处\n由于命令式编程语言也可以通过类似函数指针的方式来实现高阶函数，函数式的最主要的好处是不可变性带来的。没有可变的状态，函数就是引用透明的和没有副作用。\n\n好处：函数既不依赖外部的状态也不修改外部的状态，函数调用的结果不依赖调用的时间和位置，这样写的代码容易进行推理，这样写的代码容易进行推理，不容易出错。这使得单元测试和调试都更容易。\n\n1. 纯函数式\n\n> 什么是纯函数：相同的参数返回的结果相同，它的执行不依赖于系统的状态\n函数式编程的核心就是借助形式化数学来描述逻辑：lambda运算。数学家们喜欢将程序描述为数据的变换，这也引入了第一个概念：纯函数。纯函数无副作用，仅仅依赖于函数的输入，并且当输入相同时输出保持一致。  \n\n1) 非纯净的\n```javascript\n    let number = 1;\n    const increment = () => number + 1;\n    increment();\n```\n2) 纯净的\n```javascript\n    const increment = n => n+1;\n    increment(1);\n```\n\n2. 高阶函数\n函数把其他函数当做参数传递使用或者返回一个函数\n\n1) 加法\n```javascript\n    const sum = (x,y) => x+y;\n    const calculate = (fn,x,y) => fn(x,y);\n    calculate(sum,1,2);\n```\n\n2) filter\n```javascript\n    let students = [\n        {name: 'Tom', grade: 6},\n        {name: 'Tim', grade: 7},\n        {name: 'Bom', grade: 8}\n    ];\n    const isApproved = student => student.grade >=7;\n    students.filter(isApproved);\n```\n\n3) Map\n```javascript\n    const byName = obj => obj.name;\n    students.map(byName);\n```\n\n4) 链式\n```javascript\n    let students = [\n        {name: 'Tom', grade: 6},\n        {name: 'Tim', grade: 7},\n        {name: 'Bom', grade: 8}\n    ];\n    const isApproved = student => student.grade >= 6;\n    \n    const byName = obj => obj.name;\n    \n    students.filter(isApproved).map(byName);\n```\n\n5) Reduce\n```javascript\n    const totalGrades = students.reduce((sum,student) => sum + student.grade, 0);\n    totalGrades\n```\n\n3. 递归\n当一个函数调用它自己的时候就创造了一个循环\n\n1) 递减\n```javascript\n    const countdown = num => {\n        if(num > 0){\n            console.log(num);\n            countdown(num -1);\n        }\n    }\n    countdown(5);\n```\n\n2) 阶乘\n```javascript\n    const factorial = num => {\n        if(num <= 0){\n            return 1;\n        }else{\n            return (num * factorial(num - 1));\n        }\n    }\n    factorial(5);\n```\n\n4. Functor\n有map方法的对象。functor的map方法通过map回调函数调用自己的内容，然后返回一个新的functor.\n\n1) 给数组所有的元素添加一个值\n```javascript\n    const plus1 = num => num + 1;\n    let numbers = [1,2,3];\n    numbers.map(plus1);\n```\n\n5. 组合\n通过组合两个或更多的函数生成一个新的函数\n\n1) 组合两个函数生成一个新的函数\n```javascript\n    const compose = (f,g) => x => f(g(x));\n    const toUpperCase = x => x.toUpperCase();\n    const exclaim = x => `${x}!`;\n    \n    const angry = compose(exclaim,toUpperCase);\n    \n    angry(\"stop this\");\n```\n\n2) 组合三个函数生成一个新的\n```javascript\n    const compose = (f,g) => x => f(g(x));\n    \n    const toUpperCase = x => x.toUpperCase();\n    const exclaim = x => `${x}!`;\n    const moreExclaim = x => `${x}!!!!!`;\n    \n    const reallyAngry = compose(exclaim, compose(toUpperCase,moreExclaim));\n    \n    reallyAngry(\"stop this\");\n```\n\n6. 解构\n从数组中提取数据或对象使用一种语法混合数组和对象文本的建设。或“模式匹配”。\n1) Select from pattern\n\n```javascript\n    const foo = () => [1,2,3];\n    const [a,b] = foo();\n    console.log(a,b);\n```\n\n2) 接收rest值\n```javascript\n    const [a,...b] = [1,2,3];\n    console.log(a,b)\n```\n\n3) 可选参数\n```javascript\n    const ajax = ({ url = \"localhost\", port: p=80}, ...data) => console.log(\"Url:\", url, \"Port:\", p, \"Rest:\", data);\n    \n    ajax({ url: \"someHost\" }, \"additional\", \"data\", \"hello\");\n    // Url: someHost Port: 80 Rest: [ 'additional', 'data', 'hello' ]\n    \n    ajax({ }, \"additional\", \"data\", \"hello\");\n    // Url: localhost Port: 80 Rest: [ 'additional', 'data', 'hello' ]\n```\n\n7. 柯里化\n一个函数有多个参数，把每个参数通过链式的形式返回下一个函数，知道最后一个返回结果。\n\n1) 对象柯里化\n```javascript\n    const student = name => grade => `Name: ${name} | Grade: ${grade}`;\n    student(\"Matt\")(8);\n    // Name: Matt | Grade: 8\n```\n\n2) 加法函数柯里化\n```javascript\n    const add = x => y => x+y;\n    \n    const increment = add(1);\n    const addFive = add(5);\n    \n    increment(3);\n    //4\n    \n    addFive(10);\n    //15\n```\n\n\n\n\n\n\n","slug":"es6函数式编程","published":1,"updated":"2016-05-16T02:11:32.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciob9wmvf0005zgdllza3ssne","content":"<blockquote>\n<p>Intelligence without ambition is a bird without wings.</p>\n</blockquote>\n<h2 id=\"什么是函数式编程\"><a href=\"#什么是函数式编程\" class=\"headerlink\" title=\"什么是函数式编程\"></a>什么是函数式编程</h2><p>函数式编程是一种编程范式，我们常见的编程范式有命令式编程，函数式编程和逻辑式编程，常见的面向对象编程也是一种命令式编程。函数式编程世界里，函数是一等公民。</p>\n<h2 id=\"函数式编程给我带来的好处\"><a href=\"#函数式编程给我带来的好处\" class=\"headerlink\" title=\"函数式编程给我带来的好处\"></a>函数式编程给我带来的好处</h2><p>由于命令式编程语言也可以通过类似函数指针的方式来实现高阶函数，函数式的最主要的好处是不可变性带来的。没有可变的状态，函数就是引用透明的和没有副作用。</p>\n<p>好处：函数既不依赖外部的状态也不修改外部的状态，函数调用的结果不依赖调用的时间和位置，这样写的代码容易进行推理，这样写的代码容易进行推理，不容易出错。这使得单元测试和调试都更容易。</p>\n<ol>\n<li>纯函数式</li>\n</ol>\n<blockquote>\n<p>什么是纯函数：相同的参数返回的结果相同，它的执行不依赖于系统的状态<br>函数式编程的核心就是借助形式化数学来描述逻辑：lambda运算。数学家们喜欢将程序描述为数据的变换，这也引入了第一个概念：纯函数。纯函数无副作用，仅仅依赖于函数的输入，并且当输入相同时输出保持一致。  </p>\n</blockquote>\n<p>1) 非纯净的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> increment = () =&gt; number + <span class=\"number\">1</span>;</span><br><span class=\"line\">increment();</span><br></pre></td></tr></table></figure></p>\n<p>2) 纯净的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> increment = n =&gt; n+<span class=\"number\">1</span>;</span><br><span class=\"line\">increment(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>高阶函数<br>函数把其他函数当做参数传递使用或者返回一个函数</li>\n</ol>\n<p>1) 加法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = (x,y) =&gt; x+y;</span><br><span class=\"line\"><span class=\"keyword\">const</span> calculate = (fn,x,y) =&gt; fn(x,y);</span><br><span class=\"line\">calculate(sum,<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure></p>\n<p>2) filter<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> students = [</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'Tom'</span>, grade: <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'Tim'</span>, grade: <span class=\"number\">7</span>&#125;,</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'Bom'</span>, grade: <span class=\"number\">8</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> isApproved = student =&gt; student.grade &gt;=<span class=\"number\">7</span>;</span><br><span class=\"line\">students.filter(isApproved);</span><br></pre></td></tr></table></figure></p>\n<p>3) Map<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> byName = obj =&gt; obj.name;</span><br><span class=\"line\">students.map(byName);</span><br></pre></td></tr></table></figure></p>\n<p>4) 链式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> students = [</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'Tom'</span>, grade: <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'Tim'</span>, grade: <span class=\"number\">7</span>&#125;,</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'Bom'</span>, grade: <span class=\"number\">8</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> isApproved = student =&gt; student.grade &gt;= <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> byName = obj =&gt; obj.name;</span><br><span class=\"line\"></span><br><span class=\"line\">students.filter(isApproved).map(byName);</span><br></pre></td></tr></table></figure></p>\n<p>5) Reduce<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> totalGrades = students.reduce((sum,student) =&gt; sum + student.grade, <span class=\"number\">0</span>);</span><br><span class=\"line\">totalGrades</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>递归<br>当一个函数调用它自己的时候就创造了一个循环</li>\n</ol>\n<p>1) 递减<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> countdown = num =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\">        countdown(num <span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">countdown(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<p>2) 阶乘<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> factorial = num =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (num * factorial(num - <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">factorial(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>Functor<br>有map方法的对象。functor的map方法通过map回调函数调用自己的内容，然后返回一个新的functor.</li>\n</ol>\n<p>1) 给数组所有的元素添加一个值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> plus1 = num =&gt; num + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">numbers.map(plus1);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>组合<br>通过组合两个或更多的函数生成一个新的函数</li>\n</ol>\n<p>1) 组合两个函数生成一个新的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compose = (f,g) =&gt; x =&gt; f(g(x));</span><br><span class=\"line\"><span class=\"keyword\">const</span> toUpperCase = x =&gt; x.toUpperCase();</span><br><span class=\"line\"><span class=\"keyword\">const</span> exclaim = x =&gt; <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>!`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> angry = compose(exclaim,toUpperCase);</span><br><span class=\"line\"></span><br><span class=\"line\">angry(<span class=\"string\">\"stop this\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>2) 组合三个函数生成一个新的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compose = (f,g) =&gt; x =&gt; f(g(x));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toUpperCase = x =&gt; x.toUpperCase();</span><br><span class=\"line\"><span class=\"keyword\">const</span> exclaim = x =&gt; <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>!`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> moreExclaim = x =&gt; <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>!!!!!`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reallyAngry = compose(exclaim, compose(toUpperCase,moreExclaim));</span><br><span class=\"line\"></span><br><span class=\"line\">reallyAngry(<span class=\"string\">\"stop this\"</span>);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>解构<br>从数组中提取数据或对象使用一种语法混合数组和对象文本的建设。或“模式匹配”。<br>1) Select from pattern</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = () =&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [a,b] = foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b);</span><br></pre></td></tr></table></figure>\n<p>2) 接收rest值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,...b] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b)</span><br></pre></td></tr></table></figure></p>\n<p>3) 可选参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ajax = (&#123; url = <span class=\"string\">\"localhost\"</span>, port: p=<span class=\"number\">80</span>&#125;, ...data) =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Url:\"</span>, url, <span class=\"string\">\"Port:\"</span>, p, <span class=\"string\">\"Rest:\"</span>, data);</span><br><span class=\"line\"></span><br><span class=\"line\">ajax(&#123; url: <span class=\"string\">\"someHost\"</span> &#125;, <span class=\"string\">\"additional\"</span>, <span class=\"string\">\"data\"</span>, <span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Url: someHost Port: 80 Rest: [ 'additional', 'data', 'hello' ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">ajax(&#123; &#125;, <span class=\"string\">\"additional\"</span>, <span class=\"string\">\"data\"</span>, <span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Url: localhost Port: 80 Rest: [ 'additional', 'data', 'hello' ]</span></span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>柯里化<br>一个函数有多个参数，把每个参数通过链式的形式返回下一个函数，知道最后一个返回结果。</li>\n</ol>\n<p>1) 对象柯里化<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student = name =&gt; grade =&gt; <span class=\"string\">`Name: <span class=\"subst\">$&#123;name&#125;</span> | Grade: <span class=\"subst\">$&#123;grade&#125;</span>`</span>;</span><br><span class=\"line\">student(<span class=\"string\">\"Matt\"</span>)(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"comment\">// Name: Matt | Grade: 8</span></span><br></pre></td></tr></table></figure></p>\n<p>2) 加法函数柯里化<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> add = x =&gt; y =&gt; x+y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> increment = add(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> addFive = add(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">increment(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\">addFive(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<blockquote>\n<p>Intelligence without ambition is a bird without wings.</p>\n</blockquote>\n<h2 id=\"什么是函数式编程\"><a href=\"#什么是函数式编程\" class=\"headerlink\" title=\"什么是函数式编程\"></a>什么是函数式编程</h2><p>函数式编程是一种编程范式，我们常见的编程范式有命令式编程，函数式编程和逻辑式编程，常见的面向对象编程也是一种命令式编程。函数式编程世界里，函数是一等公民。</p>\n<h2 id=\"函数式编程给我带来的好处\"><a href=\"#函数式编程给我带来的好处\" class=\"headerlink\" title=\"函数式编程给我带来的好处\"></a>函数式编程给我带来的好处</h2><p>由于命令式编程语言也可以通过类似函数指针的方式来实现高阶函数，函数式的最主要的好处是不可变性带来的。没有可变的状态，函数就是引用透明的和没有副作用。</p>\n<p>好处：函数既不依赖外部的状态也不修改外部的状态，函数调用的结果不依赖调用的时间和位置，这样写的代码容易进行推理，这样写的代码容易进行推理，不容易出错。这使得单元测试和调试都更容易。</p>\n<ol>\n<li>纯函数式</li>\n</ol>\n<blockquote>\n<p>什么是纯函数：相同的参数返回的结果相同，它的执行不依赖于系统的状态<br>函数式编程的核心就是借助形式化数学来描述逻辑：lambda运算。数学家们喜欢将程序描述为数据的变换，这也引入了第一个概念：纯函数。纯函数无副作用，仅仅依赖于函数的输入，并且当输入相同时输出保持一致。  </p>\n</blockquote>\n<p>1) 非纯净的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> increment = () =&gt; number + <span class=\"number\">1</span>;</span><br><span class=\"line\">increment();</span><br></pre></td></tr></table></figure></p>\n<p>2) 纯净的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> increment = n =&gt; n+<span class=\"number\">1</span>;</span><br><span class=\"line\">increment(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>高阶函数<br>函数把其他函数当做参数传递使用或者返回一个函数</li>\n</ol>\n<p>1) 加法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = (x,y) =&gt; x+y;</span><br><span class=\"line\"><span class=\"keyword\">const</span> calculate = (fn,x,y) =&gt; fn(x,y);</span><br><span class=\"line\">calculate(sum,<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure></p>\n<p>2) filter<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> students = [</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'Tom'</span>, grade: <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'Tim'</span>, grade: <span class=\"number\">7</span>&#125;,</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'Bom'</span>, grade: <span class=\"number\">8</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> isApproved = student =&gt; student.grade &gt;=<span class=\"number\">7</span>;</span><br><span class=\"line\">students.filter(isApproved);</span><br></pre></td></tr></table></figure></p>\n<p>3) Map<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> byName = obj =&gt; obj.name;</span><br><span class=\"line\">students.map(byName);</span><br></pre></td></tr></table></figure></p>\n<p>4) 链式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> students = [</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'Tom'</span>, grade: <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'Tim'</span>, grade: <span class=\"number\">7</span>&#125;,</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'Bom'</span>, grade: <span class=\"number\">8</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> isApproved = student =&gt; student.grade &gt;= <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> byName = obj =&gt; obj.name;</span><br><span class=\"line\"></span><br><span class=\"line\">students.filter(isApproved).map(byName);</span><br></pre></td></tr></table></figure></p>\n<p>5) Reduce<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> totalGrades = students.reduce((sum,student) =&gt; sum + student.grade, <span class=\"number\">0</span>);</span><br><span class=\"line\">totalGrades</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>递归<br>当一个函数调用它自己的时候就创造了一个循环</li>\n</ol>\n<p>1) 递减<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> countdown = num =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\">        countdown(num <span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">countdown(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<p>2) 阶乘<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> factorial = num =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (num * factorial(num - <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">factorial(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>Functor<br>有map方法的对象。functor的map方法通过map回调函数调用自己的内容，然后返回一个新的functor.</li>\n</ol>\n<p>1) 给数组所有的元素添加一个值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> plus1 = num =&gt; num + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">numbers.map(plus1);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>组合<br>通过组合两个或更多的函数生成一个新的函数</li>\n</ol>\n<p>1) 组合两个函数生成一个新的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compose = (f,g) =&gt; x =&gt; f(g(x));</span><br><span class=\"line\"><span class=\"keyword\">const</span> toUpperCase = x =&gt; x.toUpperCase();</span><br><span class=\"line\"><span class=\"keyword\">const</span> exclaim = x =&gt; <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>!`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> angry = compose(exclaim,toUpperCase);</span><br><span class=\"line\"></span><br><span class=\"line\">angry(<span class=\"string\">\"stop this\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>2) 组合三个函数生成一个新的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compose = (f,g) =&gt; x =&gt; f(g(x));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toUpperCase = x =&gt; x.toUpperCase();</span><br><span class=\"line\"><span class=\"keyword\">const</span> exclaim = x =&gt; <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>!`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> moreExclaim = x =&gt; <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>!!!!!`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reallyAngry = compose(exclaim, compose(toUpperCase,moreExclaim));</span><br><span class=\"line\"></span><br><span class=\"line\">reallyAngry(<span class=\"string\">\"stop this\"</span>);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>解构<br>从数组中提取数据或对象使用一种语法混合数组和对象文本的建设。或“模式匹配”。<br>1) Select from pattern</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = () =&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [a,b] = foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b);</span><br></pre></td></tr></table></figure>\n<p>2) 接收rest值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,...b] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b)</span><br></pre></td></tr></table></figure></p>\n<p>3) 可选参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ajax = (&#123; url = <span class=\"string\">\"localhost\"</span>, port: p=<span class=\"number\">80</span>&#125;, ...data) =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Url:\"</span>, url, <span class=\"string\">\"Port:\"</span>, p, <span class=\"string\">\"Rest:\"</span>, data);</span><br><span class=\"line\"></span><br><span class=\"line\">ajax(&#123; url: <span class=\"string\">\"someHost\"</span> &#125;, <span class=\"string\">\"additional\"</span>, <span class=\"string\">\"data\"</span>, <span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Url: someHost Port: 80 Rest: [ 'additional', 'data', 'hello' ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">ajax(&#123; &#125;, <span class=\"string\">\"additional\"</span>, <span class=\"string\">\"data\"</span>, <span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Url: localhost Port: 80 Rest: [ 'additional', 'data', 'hello' ]</span></span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>柯里化<br>一个函数有多个参数，把每个参数通过链式的形式返回下一个函数，知道最后一个返回结果。</li>\n</ol>\n<p>1) 对象柯里化<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student = name =&gt; grade =&gt; <span class=\"string\">`Name: <span class=\"subst\">$&#123;name&#125;</span> | Grade: <span class=\"subst\">$&#123;grade&#125;</span>`</span>;</span><br><span class=\"line\">student(<span class=\"string\">\"Matt\"</span>)(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"comment\">// Name: Matt | Grade: 8</span></span><br></pre></td></tr></table></figure></p>\n<p>2) 加法函数柯里化<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> add = x =&gt; y =&gt; x+y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> increment = add(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> addFive = add(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">increment(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\">addFive(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"webapck直接上手","date":"2016-03-22T06:26:43.000Z","_content":">True mastery of any skill takes a lifetime.\n\n写在前面的话，花了一天一夜学得的webpack，并且都把webapck.config.js配置完成了，leader不让用，还说不要盲目跟风。无语，遂把学得的东西贡献出来。\n\n## Getting started\n\n首先，全局下载[webpack](https://www.npmjs.com/package/webpack)和[live-server](https://www.npmjs.com/package/live-server)。  \n***ps***：这边可自行选择，[live-server](https://www.npmjs.com/package/live-server)或是[webpack-dev-server](https://www.npmjs.com/package/webpack-dev-server)，我用的是live-server。\n\n```javascript\n$ npm install -g webpack live-server \n```\n\n然后，git直接clone本仓库以及依赖包\n\n```javascript\n$ git clone https://github.com/GaoQ1/webpack-start.git\n$ cd webpack-scaffold\n$ npm install\n```\n\n现在你可以试试webpack的效果了。\n\n```javascript\n$ webpack\n$ live-server\n```\n\n浏览器会自动打开，然后点击src，访问路径为[http://127.0.0.1:8080/src/](http://127.0.0.1:8080/src/)。 \n\n## 什么是webpack\n至于什么是webpack，网上有很多资料，我就不copy过来了，详细的可参考\n - [Webpack中文指南](http://zhaoda.net/webpack-handbook/)\n - [Webpack官网](http://webpack.github.io/docs/)\n\n还有关于webpack的常用的命令行有：\n```javascript\n $ webpack //用来一次性执行开发环境webpack\n $ webpack -p //用来一次性执行生产环境webpack\n $ webpack --watch //用来持续的执行webpack\n $ webpack -d //包含source maps文件\n $ webpack --colors //用来让wenbpack执行后的文件更优美\n```\n\n## 目录结构\n```javascript\n--- dist (webpac打包后的文件)\n    |--- ...\n--- images (图片文件)\n    |--- ...\n--- src (webpack打包前源文件)\n    |--- js (源文件组件文件夹)\n    |    |--- client.js (javascript文件)\n    |    |--- image.js (image文件)\n    |    |--- style.js (css文件)\n    | \t |...\n    |--- sass (sass文件夹)          \n    |    |--- app.scss (sass文件)\n    |    |---\n    |--- index.html (主页面)\n    |--- package.json (配置文件)\n    |--- webpack.config.js (webpack配置文件) \n```\n\n## 参考文章\n关于webpack.config.js的文件配置参考了\n - 阮大神的[webpack-demos](https://github.com/ruanyf/webpack-demos)\n - Petehunt大神的[webpack-howto](https://github.com/petehunt/webpack-howto)\n - [Webpack documents](https://webpack.github.io/docs/)\n - 鄙人的[blog](http://blog.gaoquan.wang)，会长期更新","source":"_posts/webapck配置指导.md","raw":"---\ntitle: webapck直接上手\ndate: 2016-03-22 14:26:43\ntags:\n- webpack\n- 快速上手\ncategories: 教程\n---\n>True mastery of any skill takes a lifetime.\n\n写在前面的话，花了一天一夜学得的webpack，并且都把webapck.config.js配置完成了，leader不让用，还说不要盲目跟风。无语，遂把学得的东西贡献出来。\n\n## Getting started\n\n首先，全局下载[webpack](https://www.npmjs.com/package/webpack)和[live-server](https://www.npmjs.com/package/live-server)。  \n***ps***：这边可自行选择，[live-server](https://www.npmjs.com/package/live-server)或是[webpack-dev-server](https://www.npmjs.com/package/webpack-dev-server)，我用的是live-server。\n\n```javascript\n$ npm install -g webpack live-server \n```\n\n然后，git直接clone本仓库以及依赖包\n\n```javascript\n$ git clone https://github.com/GaoQ1/webpack-start.git\n$ cd webpack-scaffold\n$ npm install\n```\n\n现在你可以试试webpack的效果了。\n\n```javascript\n$ webpack\n$ live-server\n```\n\n浏览器会自动打开，然后点击src，访问路径为[http://127.0.0.1:8080/src/](http://127.0.0.1:8080/src/)。 \n\n## 什么是webpack\n至于什么是webpack，网上有很多资料，我就不copy过来了，详细的可参考\n - [Webpack中文指南](http://zhaoda.net/webpack-handbook/)\n - [Webpack官网](http://webpack.github.io/docs/)\n\n还有关于webpack的常用的命令行有：\n```javascript\n $ webpack //用来一次性执行开发环境webpack\n $ webpack -p //用来一次性执行生产环境webpack\n $ webpack --watch //用来持续的执行webpack\n $ webpack -d //包含source maps文件\n $ webpack --colors //用来让wenbpack执行后的文件更优美\n```\n\n## 目录结构\n```javascript\n--- dist (webpac打包后的文件)\n    |--- ...\n--- images (图片文件)\n    |--- ...\n--- src (webpack打包前源文件)\n    |--- js (源文件组件文件夹)\n    |    |--- client.js (javascript文件)\n    |    |--- image.js (image文件)\n    |    |--- style.js (css文件)\n    | \t |...\n    |--- sass (sass文件夹)          \n    |    |--- app.scss (sass文件)\n    |    |---\n    |--- index.html (主页面)\n    |--- package.json (配置文件)\n    |--- webpack.config.js (webpack配置文件) \n```\n\n## 参考文章\n关于webpack.config.js的文件配置参考了\n - 阮大神的[webpack-demos](https://github.com/ruanyf/webpack-demos)\n - Petehunt大神的[webpack-howto](https://github.com/petehunt/webpack-howto)\n - [Webpack documents](https://webpack.github.io/docs/)\n - 鄙人的[blog](http://blog.gaoquan.wang)，会长期更新","slug":"webapck配置指导","published":1,"updated":"2016-05-16T02:11:32.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciob9wmvh0006zgdl26sut1o3","content":"<blockquote>\n<p>True mastery of any skill takes a lifetime.</p>\n</blockquote>\n<p>写在前面的话，花了一天一夜学得的webpack，并且都把webapck.config.js配置完成了，leader不让用，还说不要盲目跟风。无语，遂把学得的东西贡献出来。</p>\n<h2 id=\"Getting-started\"><a href=\"#Getting-started\" class=\"headerlink\" title=\"Getting started\"></a>Getting started</h2><p>首先，全局下载<a href=\"https://www.npmjs.com/package/webpack\" target=\"_blank\" rel=\"external\">webpack</a>和<a href=\"https://www.npmjs.com/package/live-server\" target=\"_blank\" rel=\"external\">live-server</a>。<br><strong><em>ps</em></strong>：这边可自行选择，<a href=\"https://www.npmjs.com/package/live-server\" target=\"_blank\" rel=\"external\">live-server</a>或是<a href=\"https://www.npmjs.com/package/webpack-dev-server\" target=\"_blank\" rel=\"external\">webpack-dev-server</a>，我用的是live-server。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g webpack live-server</span><br></pre></td></tr></table></figure>\n<p>然后，git直接clone本仓库以及依赖包</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https:<span class=\"comment\">//github.com/GaoQ1/webpack-start.git</span></span><br><span class=\"line\">$ cd webpack-scaffold</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>现在你可以试试webpack的效果了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack</span><br><span class=\"line\">$ live-server</span><br></pre></td></tr></table></figure>\n<p>浏览器会自动打开，然后点击src，访问路径为<a href=\"http://127.0.0.1:8080/src/\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8080/src/</a>。 </p>\n<h2 id=\"什么是webpack\"><a href=\"#什么是webpack\" class=\"headerlink\" title=\"什么是webpack\"></a>什么是webpack</h2><p>至于什么是webpack，网上有很多资料，我就不copy过来了，详细的可参考</p>\n<ul>\n<li><a href=\"http://zhaoda.net/webpack-handbook/\" target=\"_blank\" rel=\"external\">Webpack中文指南</a></li>\n<li><a href=\"http://webpack.github.io/docs/\" target=\"_blank\" rel=\"external\">Webpack官网</a></li>\n</ul>\n<p>还有关于webpack的常用的命令行有：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack <span class=\"comment\">//用来一次性执行开发环境webpack</span></span><br><span class=\"line\">$ webpack -p <span class=\"comment\">//用来一次性执行生产环境webpack</span></span><br><span class=\"line\">$ webpack --watch <span class=\"comment\">//用来持续的执行webpack</span></span><br><span class=\"line\">$ webpack -d <span class=\"comment\">//包含source maps文件</span></span><br><span class=\"line\">$ webpack --colors <span class=\"comment\">//用来让wenbpack执行后的文件更优美</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- dist (webpac打包后的文件)</span><br><span class=\"line\">    |--- ...</span><br><span class=\"line\">--- images (图片文件)</span><br><span class=\"line\">    |--- ...</span><br><span class=\"line\">--- src (webpack打包前源文件)</span><br><span class=\"line\">    |--- js (源文件组件文件夹)</span><br><span class=\"line\">    |    |--- client.js (javascript文件)</span><br><span class=\"line\">    |    |--- image.js (image文件)</span><br><span class=\"line\">    |    |--- style.js (css文件)</span><br><span class=\"line\">    | \t |...</span><br><span class=\"line\">    |--- sass (sass文件夹)          </span><br><span class=\"line\">    |    |--- app.scss (sass文件)</span><br><span class=\"line\">    |    |---</span><br><span class=\"line\">    |--- index.html (主页面)</span><br><span class=\"line\">    |--- package.json (配置文件)</span><br><span class=\"line\">    |--- webpack.config.js (webpack配置文件)</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p>关于webpack.config.js的文件配置参考了</p>\n<ul>\n<li>阮大神的<a href=\"https://github.com/ruanyf/webpack-demos\" target=\"_blank\" rel=\"external\">webpack-demos</a></li>\n<li>Petehunt大神的<a href=\"https://github.com/petehunt/webpack-howto\" target=\"_blank\" rel=\"external\">webpack-howto</a></li>\n<li><a href=\"https://webpack.github.io/docs/\" target=\"_blank\" rel=\"external\">Webpack documents</a></li>\n<li>鄙人的<a href=\"http://blog.gaoquan.wang\" target=\"_blank\" rel=\"external\">blog</a>，会长期更新</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>True mastery of any skill takes a lifetime.</p>\n</blockquote>\n<p>写在前面的话，花了一天一夜学得的webpack，并且都把webapck.config.js配置完成了，leader不让用，还说不要盲目跟风。无语，遂把学得的东西贡献出来。</p>\n<h2 id=\"Getting-started\"><a href=\"#Getting-started\" class=\"headerlink\" title=\"Getting started\"></a>Getting started</h2><p>首先，全局下载<a href=\"https://www.npmjs.com/package/webpack\">webpack</a>和<a href=\"https://www.npmjs.com/package/live-server\">live-server</a>。<br><strong><em>ps</em></strong>：这边可自行选择，<a href=\"https://www.npmjs.com/package/live-server\">live-server</a>或是<a href=\"https://www.npmjs.com/package/webpack-dev-server\">webpack-dev-server</a>，我用的是live-server。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g webpack live-server</span><br></pre></td></tr></table></figure>\n<p>然后，git直接clone本仓库以及依赖包</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https:<span class=\"comment\">//github.com/GaoQ1/webpack-start.git</span></span><br><span class=\"line\">$ cd webpack-scaffold</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>现在你可以试试webpack的效果了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack</span><br><span class=\"line\">$ live-server</span><br></pre></td></tr></table></figure>\n<p>浏览器会自动打开，然后点击src，访问路径为<a href=\"http://127.0.0.1:8080/src/\">http://127.0.0.1:8080/src/</a>。 </p>\n<h2 id=\"什么是webpack\"><a href=\"#什么是webpack\" class=\"headerlink\" title=\"什么是webpack\"></a>什么是webpack</h2><p>至于什么是webpack，网上有很多资料，我就不copy过来了，详细的可参考</p>\n<ul>\n<li><a href=\"http://zhaoda.net/webpack-handbook/\">Webpack中文指南</a></li>\n<li><a href=\"http://webpack.github.io/docs/\">Webpack官网</a></li>\n</ul>\n<p>还有关于webpack的常用的命令行有：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack <span class=\"comment\">//用来一次性执行开发环境webpack</span></span><br><span class=\"line\">$ webpack -p <span class=\"comment\">//用来一次性执行生产环境webpack</span></span><br><span class=\"line\">$ webpack --watch <span class=\"comment\">//用来持续的执行webpack</span></span><br><span class=\"line\">$ webpack -d <span class=\"comment\">//包含source maps文件</span></span><br><span class=\"line\">$ webpack --colors <span class=\"comment\">//用来让wenbpack执行后的文件更优美</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- dist (webpac打包后的文件)</span><br><span class=\"line\">    |--- ...</span><br><span class=\"line\">--- images (图片文件)</span><br><span class=\"line\">    |--- ...</span><br><span class=\"line\">--- src (webpack打包前源文件)</span><br><span class=\"line\">    |--- js (源文件组件文件夹)</span><br><span class=\"line\">    |    |--- client.js (javascript文件)</span><br><span class=\"line\">    |    |--- image.js (image文件)</span><br><span class=\"line\">    |    |--- style.js (css文件)</span><br><span class=\"line\">    | \t |...</span><br><span class=\"line\">    |--- sass (sass文件夹)          </span><br><span class=\"line\">    |    |--- app.scss (sass文件)</span><br><span class=\"line\">    |    |---</span><br><span class=\"line\">    |--- index.html (主页面)</span><br><span class=\"line\">    |--- package.json (配置文件)</span><br><span class=\"line\">    |--- webpack.config.js (webpack配置文件)</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p>关于webpack.config.js的文件配置参考了</p>\n<ul>\n<li>阮大神的<a href=\"https://github.com/ruanyf/webpack-demos\">webpack-demos</a></li>\n<li>Petehunt大神的<a href=\"https://github.com/petehunt/webpack-howto\">webpack-howto</a></li>\n<li><a href=\"https://webpack.github.io/docs/\">Webpack documents</a></li>\n<li>鄙人的<a href=\"http://blog.gaoquan.wang\">blog</a>，会长期更新</li>\n</ul>\n"},{"title":"zepto学习笔记","date":"2015-10-27T06:21:46.000Z","_content":"\n> Zepto的设计目的是有一个5-10K的通用库、下载并快速执行、有一个熟悉通用的API。\n\n| module | default | description |\n| ------ | :-------: | :----------- |\n| zepto\t| ✔\t| 核心模块；包含许多方法 |\n| event\t| ✔|\t通过on()& off()处理事件 |\n| ajax\t| ✔|\tXMLHttpRequest 和 JSONP 实用功能 |\n| form\t| ✔|\t序列化 & 提交web表单 |\n| ie\t|✔| \t增加支持桌面的Internet Explorer 10+和Windows Phone 8。 |\n| detect| |\t\t提供 $.os和 $.browser消息 |\n| fx\t\t| | The animate()方法 |\n| fx_methods|\t|\t以动画形式的 show, hide, toggle, 和 fade*()方法. |\n| assets|\t|\t实验性支持从DOM中移除image元素后清理iOS的内存。 |\n| data\t|\t|一个全面的 data()方法, 能够在内存中存储任意对象。 |\n|deferred |\t|\t提供 $.Deferredpromises API. 依赖\"callbacks\" 模块. 当包含这个模块时候, $.ajax() 支持promise接口链式的回调。 |\n| callbacks\t| |\t为\"deferred\"模块提供 $.Callbacks。 |\n| touch\t\t| | 在触摸设备上触发tap– 和 swipe– 相关事件。这适用于所有的`touch`(iOS, Android)和`pointer`事件(Windows Phone)。 |\n| gesture\t| |\t在触摸设备上触发 pinch 手势事件。 |\n| stack\t\t| | 提供 andSelf& end()链式调用方法 |\n| ios3\t\t| | String.prototype.trim 和 Array.prototype.reduce 方法 (如果他们不存在) ，以兼容 iOS 3.x. |\n\n## 如何自制zepto\n```\n    1.git clone https://github.com/madrobby/zepto.git\n    2.npm install 下载package.json里dependence\n    3.MODULES=\"zepto event data ...\" npm run-script dist\n    the resulting files are:\n    1.dist/zepto.js\n    2.dist/zepto.min.js\n```\n\n--- \n   \n### 整体上zeptojs的用法和jquery一样","source":"_posts/zepto学习笔记.md","raw":"title: zepto学习笔记\ndate: 2015-10-27 14:21:46\ntags:\n- zepto\n- 学习笔记\ncategories: 笔记\n---\n\n> Zepto的设计目的是有一个5-10K的通用库、下载并快速执行、有一个熟悉通用的API。\n\n| module | default | description |\n| ------ | :-------: | :----------- |\n| zepto\t| ✔\t| 核心模块；包含许多方法 |\n| event\t| ✔|\t通过on()& off()处理事件 |\n| ajax\t| ✔|\tXMLHttpRequest 和 JSONP 实用功能 |\n| form\t| ✔|\t序列化 & 提交web表单 |\n| ie\t|✔| \t增加支持桌面的Internet Explorer 10+和Windows Phone 8。 |\n| detect| |\t\t提供 $.os和 $.browser消息 |\n| fx\t\t| | The animate()方法 |\n| fx_methods|\t|\t以动画形式的 show, hide, toggle, 和 fade*()方法. |\n| assets|\t|\t实验性支持从DOM中移除image元素后清理iOS的内存。 |\n| data\t|\t|一个全面的 data()方法, 能够在内存中存储任意对象。 |\n|deferred |\t|\t提供 $.Deferredpromises API. 依赖\"callbacks\" 模块. 当包含这个模块时候, $.ajax() 支持promise接口链式的回调。 |\n| callbacks\t| |\t为\"deferred\"模块提供 $.Callbacks。 |\n| touch\t\t| | 在触摸设备上触发tap– 和 swipe– 相关事件。这适用于所有的`touch`(iOS, Android)和`pointer`事件(Windows Phone)。 |\n| gesture\t| |\t在触摸设备上触发 pinch 手势事件。 |\n| stack\t\t| | 提供 andSelf& end()链式调用方法 |\n| ios3\t\t| | String.prototype.trim 和 Array.prototype.reduce 方法 (如果他们不存在) ，以兼容 iOS 3.x. |\n\n## 如何自制zepto\n```\n    1.git clone https://github.com/madrobby/zepto.git\n    2.npm install 下载package.json里dependence\n    3.MODULES=\"zepto event data ...\" npm run-script dist\n    the resulting files are:\n    1.dist/zepto.js\n    2.dist/zepto.min.js\n```\n\n--- \n   \n### 整体上zeptojs的用法和jquery一样","slug":"zepto学习笔记","published":1,"updated":"2016-05-16T02:11:32.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciob9wmvk0008zgdlf6jeyxhg","content":"<blockquote>\n<p>Zepto的设计目的是有一个5-10K的通用库、下载并快速执行、有一个熟悉通用的API。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>module</th>\n<th style=\"text-align:center\">default</th>\n<th style=\"text-align:left\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>zepto</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">核心模块；包含许多方法</td>\n</tr>\n<tr>\n<td>event</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">通过on()&amp; off()处理事件</td>\n</tr>\n<tr>\n<td>ajax</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">XMLHttpRequest 和 JSONP 实用功能</td>\n</tr>\n<tr>\n<td>form</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">序列化 &amp; 提交web表单</td>\n</tr>\n<tr>\n<td>ie</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">增加支持桌面的Internet Explorer 10+和Windows Phone 8。</td>\n</tr>\n<tr>\n<td>detect</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">提供 $.os和 $.browser消息</td>\n</tr>\n<tr>\n<td>fx</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">The animate()方法</td>\n</tr>\n<tr>\n<td>fx_methods</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">以动画形式的 show, hide, toggle, 和 fade*()方法.</td>\n</tr>\n<tr>\n<td>assets</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">实验性支持从DOM中移除image元素后清理iOS的内存。</td>\n</tr>\n<tr>\n<td>data</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">一个全面的 data()方法, 能够在内存中存储任意对象。</td>\n</tr>\n<tr>\n<td>deferred</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">提供 $.Deferredpromises API. 依赖”callbacks” 模块. 当包含这个模块时候, $.ajax() 支持promise接口链式的回调。</td>\n</tr>\n<tr>\n<td>callbacks</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">为”deferred”模块提供 $.Callbacks。</td>\n</tr>\n<tr>\n<td>touch</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">在触摸设备上触发tap– 和 swipe– 相关事件。这适用于所有的<code>touch</code>(iOS, Android)和<code>pointer</code>事件(Windows Phone)。</td>\n</tr>\n<tr>\n<td>gesture</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">在触摸设备上触发 pinch 手势事件。</td>\n</tr>\n<tr>\n<td>stack</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">提供 andSelf&amp; end()链式调用方法</td>\n</tr>\n<tr>\n<td>ios3</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">String.prototype.trim 和 Array.prototype.reduce 方法 (如果他们不存在) ，以兼容 iOS 3.x.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"如何自制zepto\"><a href=\"#如何自制zepto\" class=\"headerlink\" title=\"如何自制zepto\"></a>如何自制zepto</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.git clone https://github.com/madrobby/zepto.git</span><br><span class=\"line\">2.npm install 下载package.json里dependence</span><br><span class=\"line\">3.MODULES=&quot;zepto event data ...&quot; npm run-script dist</span><br><span class=\"line\">the resulting files are:</span><br><span class=\"line\">1.dist/zepto.js</span><br><span class=\"line\">2.dist/zepto.min.js</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"整体上zeptojs的用法和jquery一样\"><a href=\"#整体上zeptojs的用法和jquery一样\" class=\"headerlink\" title=\"整体上zeptojs的用法和jquery一样\"></a>整体上zeptojs的用法和jquery一样</h3>","excerpt":"","more":"<blockquote>\n<p>Zepto的设计目的是有一个5-10K的通用库、下载并快速执行、有一个熟悉通用的API。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>module</th>\n<th style=\"text-align:center\">default</th>\n<th style=\"text-align:left\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>zepto</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">核心模块；包含许多方法</td>\n</tr>\n<tr>\n<td>event</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">通过on()&amp; off()处理事件</td>\n</tr>\n<tr>\n<td>ajax</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">XMLHttpRequest 和 JSONP 实用功能</td>\n</tr>\n<tr>\n<td>form</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">序列化 &amp; 提交web表单</td>\n</tr>\n<tr>\n<td>ie</td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:left\">增加支持桌面的Internet Explorer 10+和Windows Phone 8。</td>\n</tr>\n<tr>\n<td>detect</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">提供 $.os和 $.browser消息</td>\n</tr>\n<tr>\n<td>fx</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">The animate()方法</td>\n</tr>\n<tr>\n<td>fx_methods</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">以动画形式的 show, hide, toggle, 和 fade*()方法.</td>\n</tr>\n<tr>\n<td>assets</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">实验性支持从DOM中移除image元素后清理iOS的内存。</td>\n</tr>\n<tr>\n<td>data</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">一个全面的 data()方法, 能够在内存中存储任意对象。</td>\n</tr>\n<tr>\n<td>deferred</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">提供 $.Deferredpromises API. 依赖”callbacks” 模块. 当包含这个模块时候, $.ajax() 支持promise接口链式的回调。</td>\n</tr>\n<tr>\n<td>callbacks</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">为”deferred”模块提供 $.Callbacks。</td>\n</tr>\n<tr>\n<td>touch</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">在触摸设备上触发tap– 和 swipe– 相关事件。这适用于所有的<code>touch</code>(iOS, Android)和<code>pointer</code>事件(Windows Phone)。</td>\n</tr>\n<tr>\n<td>gesture</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">在触摸设备上触发 pinch 手势事件。</td>\n</tr>\n<tr>\n<td>stack</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">提供 andSelf&amp; end()链式调用方法</td>\n</tr>\n<tr>\n<td>ios3</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">String.prototype.trim 和 Array.prototype.reduce 方法 (如果他们不存在) ，以兼容 iOS 3.x.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"如何自制zepto\"><a href=\"#如何自制zepto\" class=\"headerlink\" title=\"如何自制zepto\"></a>如何自制zepto</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.git clone https://github.com/madrobby/zepto.git</span><br><span class=\"line\">2.npm install 下载package.json里dependence</span><br><span class=\"line\">3.MODULES=&quot;zepto event data ...&quot; npm run-script dist</span><br><span class=\"line\">the resulting files are:</span><br><span class=\"line\">1.dist/zepto.js</span><br><span class=\"line\">2.dist/zepto.min.js</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"整体上zeptojs的用法和jquery一样\"><a href=\"#整体上zeptojs的用法和jquery一样\" class=\"headerlink\" title=\"整体上zeptojs的用法和jquery一样\"></a>整体上zeptojs的用法和jquery一样</h3>"},{"title":"reduce的用法","date":"2016-05-09T15:05:47.000Z","_content":"> Real dream is the other shore of reality.\n\n## 概述\nreduce() 方法接收一个函数作为累加器(accumulator)，数组中的每个值（从左到右）开始合并，最终为一个值。\n\n## 语法\n```javascript\n    arr.reduce(callback,[initialValue])\n```\n\n### 参数\n执行数组中的每个值得函数，包含四个参数\n\npreviousValue -- 上一次回调函数返回的值，或者是提供的初始值(initialValue)\n\ncurrentValue -- 数组中当前被处理的元素\n\nindex -- 当前元素在数组中的索引\n\narray -- 调用reduce的数组\n\ninitialValue -- 作为第一次调用callback的第一个参数。\n\n## 描述\nreduce为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素，当前索引，调用reduce的数组。\n\n回调函数第一次执行时，preciousValue和currentValue可以是一个值，如果initialValue在调用reduce时被提供，那么第一个preciousValue等于initialValue，并且currentValue等于数组中的第一个值；如果initialValue未被提供，那么previousValue等于数组中的第一个值，currentValue等于数组中的第二个值。\n\n如果数组为空并且没有提供initialValue，会抛出TypeError。如果数组仅有一个元素（无论位置如何）并且没有提供initialValue，或者有提供initialValue但是数组为空，那么此唯一值将被返回并callback不会被执行。\n\n例如下面的代码\n\n```javascript\n    [0,1,2,3,4].reduce(function(previousValue,currentValue,index,array){\n        return previousValue + currentValue;\n    })\n```\n\n回调函数被执行了四次，每次的参数和返回值如下表\n\n|   | previousValue | currentValue | index | array | return value |\n| ----- | :-----: | :-----: | :-----: | :-----: | -----: |\n| first call | 0 | 1 | 1 | [0,1,2,3,4] | 1 |\n| second call | 1 | 2 | 2 | [0,1,2,3,4] | 3 |\n| third call | 3 | 3 | 3 | [0,1,2,3,4] | 6 |\n| fourth call | 6 | 4 | 4 | [0,1,2,3,4] | 10 |\n\nreduce 的返回值是回调函数的最后一次被调用的返回值10。\n\n如果把初始值作为第二个参数传入reduce，最终返回值变为20，结果如下：\n\n```javascript\n    [0,1,2,3,4].reduce(function(previousValue,currentValue,index,array){\n        return previousValue + currentValue;\n    },10);\n```\n\n## 栗子\n1. 将数组所有项相加\n\n```javascript\n    var total = [0,1,2,3].reduce(function(a,b){\n        return a + b;\n    });\n    //total 6\n```\n\n2. 将数组扁平化\n\n```javascript\n    var flattened = [[0,1],[2,3],[4,5],[6,7]].reduce(function(a,b){\n        return a.concat(b);\n    });\n    // flattened is [0,1,2,3,4,5]\n```\n\n## 兼容旧环境(Polyfill)\nArray.prototype.reduce 被添加到ECMA-262标准第5版；因此可能在某些环境中不被支持。可以将下面的代码插入到脚本开头来允许在那些未被原生支持reduce的实现环境中使用它。\n\n```javascript\n    if('function' !== typeof Array.prototype.reduce){\n        Array.prototype.reduce = function(callback,opt_initialValue){\n            'use strict'\n            if(null == this || 'undefined' === typeof this){\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n            if('function' !== typeof(callback)){\n                throw new TypeError(callback + 'is not a function');\n            }\n            var index, value, length = this.length >>> 0, isValueSet = false;\n            if(1<argument.length){\n                value = opt_initialValue;\n                isValueSet = true;\n            }\n            for(index = 0;length > index; ++index){\n                if(this.hasOwnProperty(index)){\n                    if(isValueSet){\n                        value = callback(value,this[index],index,this);\n                    }else{\n                        value = this[index];\n                        isValueSet = true;\n                    }\n                }\n            }\n            if(!isValueSet){\n                throw new TypeError('Reduce of empty with no initial value');\n                return value;\n            }\n        }\n    }\n```\n\n\n\n\n\n\n\n\n","source":"_posts/reduce的用法.md","raw":"---\ntitle: reduce的用法\ndate: 2016-05-09 23:05:47\ntags:\n- javascript\n- reduce\ncategories: 教程\n---\n> Real dream is the other shore of reality.\n\n## 概述\nreduce() 方法接收一个函数作为累加器(accumulator)，数组中的每个值（从左到右）开始合并，最终为一个值。\n\n## 语法\n```javascript\n    arr.reduce(callback,[initialValue])\n```\n\n### 参数\n执行数组中的每个值得函数，包含四个参数\n\npreviousValue -- 上一次回调函数返回的值，或者是提供的初始值(initialValue)\n\ncurrentValue -- 数组中当前被处理的元素\n\nindex -- 当前元素在数组中的索引\n\narray -- 调用reduce的数组\n\ninitialValue -- 作为第一次调用callback的第一个参数。\n\n## 描述\nreduce为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素，当前索引，调用reduce的数组。\n\n回调函数第一次执行时，preciousValue和currentValue可以是一个值，如果initialValue在调用reduce时被提供，那么第一个preciousValue等于initialValue，并且currentValue等于数组中的第一个值；如果initialValue未被提供，那么previousValue等于数组中的第一个值，currentValue等于数组中的第二个值。\n\n如果数组为空并且没有提供initialValue，会抛出TypeError。如果数组仅有一个元素（无论位置如何）并且没有提供initialValue，或者有提供initialValue但是数组为空，那么此唯一值将被返回并callback不会被执行。\n\n例如下面的代码\n\n```javascript\n    [0,1,2,3,4].reduce(function(previousValue,currentValue,index,array){\n        return previousValue + currentValue;\n    })\n```\n\n回调函数被执行了四次，每次的参数和返回值如下表\n\n|   | previousValue | currentValue | index | array | return value |\n| ----- | :-----: | :-----: | :-----: | :-----: | -----: |\n| first call | 0 | 1 | 1 | [0,1,2,3,4] | 1 |\n| second call | 1 | 2 | 2 | [0,1,2,3,4] | 3 |\n| third call | 3 | 3 | 3 | [0,1,2,3,4] | 6 |\n| fourth call | 6 | 4 | 4 | [0,1,2,3,4] | 10 |\n\nreduce 的返回值是回调函数的最后一次被调用的返回值10。\n\n如果把初始值作为第二个参数传入reduce，最终返回值变为20，结果如下：\n\n```javascript\n    [0,1,2,3,4].reduce(function(previousValue,currentValue,index,array){\n        return previousValue + currentValue;\n    },10);\n```\n\n## 栗子\n1. 将数组所有项相加\n\n```javascript\n    var total = [0,1,2,3].reduce(function(a,b){\n        return a + b;\n    });\n    //total 6\n```\n\n2. 将数组扁平化\n\n```javascript\n    var flattened = [[0,1],[2,3],[4,5],[6,7]].reduce(function(a,b){\n        return a.concat(b);\n    });\n    // flattened is [0,1,2,3,4,5]\n```\n\n## 兼容旧环境(Polyfill)\nArray.prototype.reduce 被添加到ECMA-262标准第5版；因此可能在某些环境中不被支持。可以将下面的代码插入到脚本开头来允许在那些未被原生支持reduce的实现环境中使用它。\n\n```javascript\n    if('function' !== typeof Array.prototype.reduce){\n        Array.prototype.reduce = function(callback,opt_initialValue){\n            'use strict'\n            if(null == this || 'undefined' === typeof this){\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n            if('function' !== typeof(callback)){\n                throw new TypeError(callback + 'is not a function');\n            }\n            var index, value, length = this.length >>> 0, isValueSet = false;\n            if(1<argument.length){\n                value = opt_initialValue;\n                isValueSet = true;\n            }\n            for(index = 0;length > index; ++index){\n                if(this.hasOwnProperty(index)){\n                    if(isValueSet){\n                        value = callback(value,this[index],index,this);\n                    }else{\n                        value = this[index];\n                        isValueSet = true;\n                    }\n                }\n            }\n            if(!isValueSet){\n                throw new TypeError('Reduce of empty with no initial value');\n                return value;\n            }\n        }\n    }\n```\n\n\n\n\n\n\n\n\n","slug":"reduce的用法","published":1,"updated":"2016-05-16T02:11:32.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciob9wmvn000azgdl5pvqtous","content":"<blockquote>\n<p>Real dream is the other shore of reality.</p>\n</blockquote>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>reduce() 方法接收一个函数作为累加器(accumulator)，数组中的每个值（从左到右）开始合并，最终为一个值。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback,[initialValue])</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>执行数组中的每个值得函数，包含四个参数</p>\n<p>previousValue – 上一次回调函数返回的值，或者是提供的初始值(initialValue)</p>\n<p>currentValue – 数组中当前被处理的元素</p>\n<p>index – 当前元素在数组中的索引</p>\n<p>array – 调用reduce的数组</p>\n<p>initialValue – 作为第一次调用callback的第一个参数。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>reduce为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素，当前索引，调用reduce的数组。</p>\n<p>回调函数第一次执行时，preciousValue和currentValue可以是一个值，如果initialValue在调用reduce时被提供，那么第一个preciousValue等于initialValue，并且currentValue等于数组中的第一个值；如果initialValue未被提供，那么previousValue等于数组中的第一个值，currentValue等于数组中的第二个值。</p>\n<p>如果数组为空并且没有提供initialValue，会抛出TypeError。如果数组仅有一个元素（无论位置如何）并且没有提供initialValue，或者有提供initialValue但是数组为空，那么此唯一值将被返回并callback不会被执行。</p>\n<p>例如下面的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue,currentValue,index,array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> previousValue + currentValue;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>回调函数被执行了四次，每次的参数和返回值如下表</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">previousValue</th>\n<th style=\"text-align:center\">currentValue</th>\n<th style=\"text-align:center\">index</th>\n<th style=\"text-align:center\">array</th>\n<th style=\"text-align:right\">return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">[0,1,2,3,4]</td>\n<td style=\"text-align:right\">1</td>\n</tr>\n<tr>\n<td>second call</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">[0,1,2,3,4]</td>\n<td style=\"text-align:right\">3</td>\n</tr>\n<tr>\n<td>third call</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">[0,1,2,3,4]</td>\n<td style=\"text-align:right\">6</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">[0,1,2,3,4]</td>\n<td style=\"text-align:right\">10</td>\n</tr>\n</tbody>\n</table>\n<p>reduce 的返回值是回调函数的最后一次被调用的返回值10。</p>\n<p>如果把初始值作为第二个参数传入reduce，最终返回值变为20，结果如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue,currentValue,index,array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> previousValue + currentValue;</span><br><span class=\"line\">&#125;,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h2><ol>\n<li>将数组所有项相加</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//total 6</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>将数组扁平化</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>],[<span class=\"number\">6</span>,<span class=\"number\">7</span>]].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// flattened is [0,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"兼容旧环境-Polyfill\"><a href=\"#兼容旧环境-Polyfill\" class=\"headerlink\" title=\"兼容旧环境(Polyfill)\"></a>兼容旧环境(Polyfill)</h2><p>Array.prototype.reduce 被添加到ECMA-262标准第5版；因此可能在某些环境中不被支持。可以将下面的代码插入到脚本开头来允许在那些未被原生支持reduce的实现环境中使用它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">'function'</span> !== <span class=\"keyword\">typeof</span> <span class=\"built_in\">Array</span>.prototype.reduce)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.reduce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback,opt_initialValue</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">        'use strict'</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"literal\">null</span> == <span class=\"keyword\">this</span> || <span class=\"string\">'undefined'</span> === <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Array.prototype.reduce called on null or undefined'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">'function'</span> !== <span class=\"keyword\">typeof</span>(callback))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(callback + <span class=\"string\">'is not a function'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index, value, length = <span class=\"keyword\">this</span>.length &gt;&gt;&gt; <span class=\"number\">0</span>, isValueSet = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">1</span>&lt;argument.length)&#123;</span><br><span class=\"line\">            value = opt_initialValue;</span><br><span class=\"line\">            isValueSet = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(index = <span class=\"number\">0</span>;length &gt; index; ++index)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.hasOwnProperty(index))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isValueSet)&#123;</span><br><span class=\"line\">                    value = callback(value,<span class=\"keyword\">this</span>[index],index,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    value = <span class=\"keyword\">this</span>[index];</span><br><span class=\"line\">                    isValueSet = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isValueSet)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Reduce of empty with no initial value'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>Real dream is the other shore of reality.</p>\n</blockquote>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>reduce() 方法接收一个函数作为累加器(accumulator)，数组中的每个值（从左到右）开始合并，最终为一个值。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback,[initialValue])</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>执行数组中的每个值得函数，包含四个参数</p>\n<p>previousValue – 上一次回调函数返回的值，或者是提供的初始值(initialValue)</p>\n<p>currentValue – 数组中当前被处理的元素</p>\n<p>index – 当前元素在数组中的索引</p>\n<p>array – 调用reduce的数组</p>\n<p>initialValue – 作为第一次调用callback的第一个参数。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>reduce为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素，当前索引，调用reduce的数组。</p>\n<p>回调函数第一次执行时，preciousValue和currentValue可以是一个值，如果initialValue在调用reduce时被提供，那么第一个preciousValue等于initialValue，并且currentValue等于数组中的第一个值；如果initialValue未被提供，那么previousValue等于数组中的第一个值，currentValue等于数组中的第二个值。</p>\n<p>如果数组为空并且没有提供initialValue，会抛出TypeError。如果数组仅有一个元素（无论位置如何）并且没有提供initialValue，或者有提供initialValue但是数组为空，那么此唯一值将被返回并callback不会被执行。</p>\n<p>例如下面的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue,currentValue,index,array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> previousValue + currentValue;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>回调函数被执行了四次，每次的参数和返回值如下表</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">previousValue</th>\n<th style=\"text-align:center\">currentValue</th>\n<th style=\"text-align:center\">index</th>\n<th style=\"text-align:center\">array</th>\n<th style=\"text-align:right\">return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">[0,1,2,3,4]</td>\n<td style=\"text-align:right\">1</td>\n</tr>\n<tr>\n<td>second call</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">[0,1,2,3,4]</td>\n<td style=\"text-align:right\">3</td>\n</tr>\n<tr>\n<td>third call</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">[0,1,2,3,4]</td>\n<td style=\"text-align:right\">6</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">[0,1,2,3,4]</td>\n<td style=\"text-align:right\">10</td>\n</tr>\n</tbody>\n</table>\n<p>reduce 的返回值是回调函数的最后一次被调用的返回值10。</p>\n<p>如果把初始值作为第二个参数传入reduce，最终返回值变为20，结果如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue,currentValue,index,array</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> previousValue + currentValue;</span><br><span class=\"line\">&#125;,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h2><ol>\n<li>将数组所有项相加</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//total 6</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>将数组扁平化</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>],[<span class=\"number\">6</span>,<span class=\"number\">7</span>]].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// flattened is [0,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"兼容旧环境-Polyfill\"><a href=\"#兼容旧环境-Polyfill\" class=\"headerlink\" title=\"兼容旧环境(Polyfill)\"></a>兼容旧环境(Polyfill)</h2><p>Array.prototype.reduce 被添加到ECMA-262标准第5版；因此可能在某些环境中不被支持。可以将下面的代码插入到脚本开头来允许在那些未被原生支持reduce的实现环境中使用它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">'function'</span> !== <span class=\"keyword\">typeof</span> <span class=\"built_in\">Array</span>.prototype.reduce)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.prototype.reduce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback,opt_initialValue</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">        'use strict'</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"literal\">null</span> == <span class=\"keyword\">this</span> || <span class=\"string\">'undefined'</span> === <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Array.prototype.reduce called on null or undefined'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">'function'</span> !== <span class=\"keyword\">typeof</span>(callback))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(callback + <span class=\"string\">'is not a function'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index, value, length = <span class=\"keyword\">this</span>.length &gt;&gt;&gt; <span class=\"number\">0</span>, isValueSet = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">1</span>&lt;argument.length)&#123;</span><br><span class=\"line\">            value = opt_initialValue;</span><br><span class=\"line\">            isValueSet = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(index = <span class=\"number\">0</span>;length &gt; index; ++index)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.hasOwnProperty(index))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isValueSet)&#123;</span><br><span class=\"line\">                    value = callback(value,<span class=\"keyword\">this</span>[index],index,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    value = <span class=\"keyword\">this</span>[index];</span><br><span class=\"line\">                    isValueSet = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isValueSet)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Reduce of empty with no initial value'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"使用Flexible实现H5页面终端适配","date":"2016-03-24T05:50:47.000Z","_content":">The less you reveal the more people can wonder.\n\n一次偶然的机会在某技术群里听到手淘flexible.js能够解决移动端适配的问题，遂实践了一下。想来用这套方案也有一段时间了，今天就将自己的理解和实践做个总结。\n\n## 页面效果\n\n首先放一张设计完成的页面效果图：\n\n![页面效果图](/images/flexible/flexible01.png)\n\n就是这样一个简单的H5页面，虽然H5页面相对于PC端Web页面简单了很多，但是难点在于让页面适配众多不同的终端设备。而终端设备有哪些，详细参考[Device metrics](https://design.google.com/devices/)，看完之后会感觉很恶心，但仍想完美的解决，这时牛X的手淘团队总结了一套[Flexible解决方案](https://github.com/amfe/lib-flexible)\n\n## 手淘的方案\n\n#### 1. 直接上图看看手淘的适配协作模式：\n\n![手淘方案](/images/flexible/flexible02.png)\n\n对这张图我的理解让UI在750px设计并标注大小和坐标，再矢量放大1.5倍后切图，于是我得到了所谓的@3x切图\n\n![@3x切图](/images/flexible/flexible03.png)\n\n#### 2. 引入flexible.js\n\n[lib-flexible库](https://github.com/amfe/lib-flexible)使用方法非常简单，只需要在head头标签中添加对应的flexible_css.js,flexible.js文件。\n\n第一种方法是将文件下载到你的项目中，然后引入添加：\n\n```javascript\n<script src=\"./js/lib/flexible_css.debug.js\"></script>\n<script src=\"./js/lib/flexible.debug.js\"></script>\n```\n\n或者直接加载阿里CDN的文件：\n\n```javascript\n<script src=\"http://g.tbcdn.cn/mtb/lib-flexible/{{version}}/??flexible_css.js,flexible.js\"></script>\n```\n\n将代码中的***{{version}}***换成对应的版本号0.3.4.\n![flexible.js引入](/images/flexible/flexible04.png)\n\n注意使用lib-flexible，通常不要写：\n```javascript\n<meta name=\"viewport\" content=\"width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"/>\n```\n交给flexible.js自己处理。\n\n我们来看看效果，在chrome中选择iphone6可以看到font-size:75px：\n![iphone6](/images/flexible/flexible05.png)\n\n#### 3. 把视觉搞中的px转换成rem\n\n什么是rem？\n>font size of the root element.\n\n当html中font-size能够动态给出，这样使用rem就十分简单了。而如何将750px下的标注搞转换成rem。这里简单的介绍下Flexible的做法。\n\n目前Flexible会将视觉稿分成100份（主要为了以后能更好的兼容vh和vw），而每一份被称为一个单位a。同时1rem单位被认定为10a。针对我们这份视觉稿可以计算出：\n\n```\n1a   = 7.5px\n1rem = 75px \n```\n\n所以显而易见，只要将750px下的标注搞/75就是对应的rem的值，比如视觉稿中的图片大小为200px*200px，转换成为2.667rem*2.667rem。\n\n## 如何快速计算CSS\n\n关于这方面的工具有很多，手淘同学编写了各种工具，这里我使用的[PostCSS(px2rem)](https://www.npmjs.com/package/px2rem)，非常好用，在此谢过。gulpfile.js文件的编写如下：\n\n![gulpfile.js](/images/flexible/flexible06.png)\n\n配置完成后实际用的时候只要这样使用：\n\n![rem1.js](/images/flexible/flexible07.png)\n\npx2rem处理之后将会变成：\n\n![rem2.js](/images/flexible/flexible08.png)\n\n另外如果你是使用Sass或是Less，你也可以使用Sass函数、混合宏来实现：\n\n```javascript\n@function px2em($px, $base-font-size: 16px) {\n    @if (unitless($px)) {\n        @warn \"#{$px} 参数应该为像素\";\n        @return px2em($px + 0px);\n    } @else if (unit($px) == em) {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n```\n\n***需要注意的是字号不使用rem，还是用px***\n\n## 效果\n\n最后，直接看下效果吧。\nMobile S\n![Mobile S](/images/flexible/flexible09.png)\n\nMobile L\n![Mobile L](/images/flexible/flexible10.png)\n\n## 总结\n\n竟然写了这么长，这篇一来是对自己使用flexible的总结和感悟，总之用了之后很方便。其次也是最近有朋友问我是如何解决移动端适配，我直接说了flexible并扔了几个资料，把自己如何用的写出来估计会更好。有什么意见欢迎提出。","source":"_posts/使用Flexible实现H5页面终端适配.md","raw":"---\ntitle: 使用Flexible实现H5页面终端适配\ndate: 2016-03-24 13:50:47\ntags:\n- flexible\n- 终端适配\ncategories: 教程\n---\n>The less you reveal the more people can wonder.\n\n一次偶然的机会在某技术群里听到手淘flexible.js能够解决移动端适配的问题，遂实践了一下。想来用这套方案也有一段时间了，今天就将自己的理解和实践做个总结。\n\n## 页面效果\n\n首先放一张设计完成的页面效果图：\n\n![页面效果图](/images/flexible/flexible01.png)\n\n就是这样一个简单的H5页面，虽然H5页面相对于PC端Web页面简单了很多，但是难点在于让页面适配众多不同的终端设备。而终端设备有哪些，详细参考[Device metrics](https://design.google.com/devices/)，看完之后会感觉很恶心，但仍想完美的解决，这时牛X的手淘团队总结了一套[Flexible解决方案](https://github.com/amfe/lib-flexible)\n\n## 手淘的方案\n\n#### 1. 直接上图看看手淘的适配协作模式：\n\n![手淘方案](/images/flexible/flexible02.png)\n\n对这张图我的理解让UI在750px设计并标注大小和坐标，再矢量放大1.5倍后切图，于是我得到了所谓的@3x切图\n\n![@3x切图](/images/flexible/flexible03.png)\n\n#### 2. 引入flexible.js\n\n[lib-flexible库](https://github.com/amfe/lib-flexible)使用方法非常简单，只需要在head头标签中添加对应的flexible_css.js,flexible.js文件。\n\n第一种方法是将文件下载到你的项目中，然后引入添加：\n\n```javascript\n<script src=\"./js/lib/flexible_css.debug.js\"></script>\n<script src=\"./js/lib/flexible.debug.js\"></script>\n```\n\n或者直接加载阿里CDN的文件：\n\n```javascript\n<script src=\"http://g.tbcdn.cn/mtb/lib-flexible/{{version}}/??flexible_css.js,flexible.js\"></script>\n```\n\n将代码中的***{{version}}***换成对应的版本号0.3.4.\n![flexible.js引入](/images/flexible/flexible04.png)\n\n注意使用lib-flexible，通常不要写：\n```javascript\n<meta name=\"viewport\" content=\"width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"/>\n```\n交给flexible.js自己处理。\n\n我们来看看效果，在chrome中选择iphone6可以看到font-size:75px：\n![iphone6](/images/flexible/flexible05.png)\n\n#### 3. 把视觉搞中的px转换成rem\n\n什么是rem？\n>font size of the root element.\n\n当html中font-size能够动态给出，这样使用rem就十分简单了。而如何将750px下的标注搞转换成rem。这里简单的介绍下Flexible的做法。\n\n目前Flexible会将视觉稿分成100份（主要为了以后能更好的兼容vh和vw），而每一份被称为一个单位a。同时1rem单位被认定为10a。针对我们这份视觉稿可以计算出：\n\n```\n1a   = 7.5px\n1rem = 75px \n```\n\n所以显而易见，只要将750px下的标注搞/75就是对应的rem的值，比如视觉稿中的图片大小为200px*200px，转换成为2.667rem*2.667rem。\n\n## 如何快速计算CSS\n\n关于这方面的工具有很多，手淘同学编写了各种工具，这里我使用的[PostCSS(px2rem)](https://www.npmjs.com/package/px2rem)，非常好用，在此谢过。gulpfile.js文件的编写如下：\n\n![gulpfile.js](/images/flexible/flexible06.png)\n\n配置完成后实际用的时候只要这样使用：\n\n![rem1.js](/images/flexible/flexible07.png)\n\npx2rem处理之后将会变成：\n\n![rem2.js](/images/flexible/flexible08.png)\n\n另外如果你是使用Sass或是Less，你也可以使用Sass函数、混合宏来实现：\n\n```javascript\n@function px2em($px, $base-font-size: 16px) {\n    @if (unitless($px)) {\n        @warn \"#{$px} 参数应该为像素\";\n        @return px2em($px + 0px);\n    } @else if (unit($px) == em) {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n```\n\n***需要注意的是字号不使用rem，还是用px***\n\n## 效果\n\n最后，直接看下效果吧。\nMobile S\n![Mobile S](/images/flexible/flexible09.png)\n\nMobile L\n![Mobile L](/images/flexible/flexible10.png)\n\n## 总结\n\n竟然写了这么长，这篇一来是对自己使用flexible的总结和感悟，总之用了之后很方便。其次也是最近有朋友问我是如何解决移动端适配，我直接说了flexible并扔了几个资料，把自己如何用的写出来估计会更好。有什么意见欢迎提出。","slug":"使用Flexible实现H5页面终端适配","published":1,"updated":"2016-05-16T02:11:32.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciob9wmvr000czgdlgb8l1aqd","content":"<blockquote>\n<p>The less you reveal the more people can wonder.</p>\n</blockquote>\n<p>一次偶然的机会在某技术群里听到手淘flexible.js能够解决移动端适配的问题，遂实践了一下。想来用这套方案也有一段时间了，今天就将自己的理解和实践做个总结。</p>\n<h2 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h2><p>首先放一张设计完成的页面效果图：</p>\n<p><img src=\"/images/flexible/flexible01.png\" alt=\"页面效果图\"></p>\n<p>就是这样一个简单的H5页面，虽然H5页面相对于PC端Web页面简单了很多，但是难点在于让页面适配众多不同的终端设备。而终端设备有哪些，详细参考<a href=\"https://design.google.com/devices/\" target=\"_blank\" rel=\"external\">Device metrics</a>，看完之后会感觉很恶心，但仍想完美的解决，这时牛X的手淘团队总结了一套<a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"external\">Flexible解决方案</a></p>\n<h2 id=\"手淘的方案\"><a href=\"#手淘的方案\" class=\"headerlink\" title=\"手淘的方案\"></a>手淘的方案</h2><h4 id=\"1-直接上图看看手淘的适配协作模式：\"><a href=\"#1-直接上图看看手淘的适配协作模式：\" class=\"headerlink\" title=\"1. 直接上图看看手淘的适配协作模式：\"></a>1. 直接上图看看手淘的适配协作模式：</h4><p><img src=\"/images/flexible/flexible02.png\" alt=\"手淘方案\"></p>\n<p>对这张图我的理解让UI在750px设计并标注大小和坐标，再矢量放大1.5倍后切图，于是我得到了所谓的@3x切图</p>\n<p><img src=\"/images/flexible/flexible03.png\" alt=\"@3x切图\"></p>\n<h4 id=\"2-引入flexible-js\"><a href=\"#2-引入flexible-js\" class=\"headerlink\" title=\"2. 引入flexible.js\"></a>2. 引入flexible.js</h4><p><a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"external\">lib-flexible库</a>使用方法非常简单，只需要在head头标签中添加对应的flexible_css.js,flexible.js文件。</p>\n<p>第一种方法是将文件下载到你的项目中，然后引入添加：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"./js/lib/flexible_css.debug.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"./js/lib/flexible.debug.js\"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>或者直接加载阿里CDN的文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"http://g.tbcdn.cn/mtb/lib-flexible/&#123;&#123;version&#125;&#125;/??flexible_css.js,flexible.js\"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>将代码中的<strong><em></em></strong>换成对应的版本号0.3.4.<br><img src=\"/images/flexible/flexible04.png\" alt=\"flexible.js引入\"></p>\n<p>注意使用lib-flexible，通常不要写：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"</span>/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>交给flexible.js自己处理。</p>\n<p>我们来看看效果，在chrome中选择iphone6可以看到font-size:75px：<br><img src=\"/images/flexible/flexible05.png\" alt=\"iphone6\"></p>\n<h4 id=\"3-把视觉搞中的px转换成rem\"><a href=\"#3-把视觉搞中的px转换成rem\" class=\"headerlink\" title=\"3. 把视觉搞中的px转换成rem\"></a>3. 把视觉搞中的px转换成rem</h4><p>什么是rem？</p>\n<blockquote>\n<p>font size of the root element.</p>\n</blockquote>\n<p>当html中font-size能够动态给出，这样使用rem就十分简单了。而如何将750px下的标注搞转换成rem。这里简单的介绍下Flexible的做法。</p>\n<p>目前Flexible会将视觉稿分成100份（主要为了以后能更好的兼容vh和vw），而每一份被称为一个单位a。同时1rem单位被认定为10a。针对我们这份视觉稿可以计算出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1a   = 7.5px</span><br><span class=\"line\">1rem = 75px</span><br></pre></td></tr></table></figure>\n<p>所以显而易见，只要将750px下的标注搞/75就是对应的rem的值，比如视觉稿中的图片大小为200px<em>200px，转换成为2.667rem</em>2.667rem。</p>\n<h2 id=\"如何快速计算CSS\"><a href=\"#如何快速计算CSS\" class=\"headerlink\" title=\"如何快速计算CSS\"></a>如何快速计算CSS</h2><p>关于这方面的工具有很多，手淘同学编写了各种工具，这里我使用的<a href=\"https://www.npmjs.com/package/px2rem\" target=\"_blank\" rel=\"external\">PostCSS(px2rem)</a>，非常好用，在此谢过。gulpfile.js文件的编写如下：</p>\n<p><img src=\"/images/flexible/flexible06.png\" alt=\"gulpfile.js\"></p>\n<p>配置完成后实际用的时候只要这样使用：</p>\n<p><img src=\"/images/flexible/flexible07.png\" alt=\"rem1.js\"></p>\n<p>px2rem处理之后将会变成：</p>\n<p><img src=\"/images/flexible/flexible08.png\" alt=\"rem2.js\"></p>\n<p>另外如果你是使用Sass或是Less，你也可以使用Sass函数、混合宏来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">px2em</span>(<span class=\"params\">$px, $base-font-size: 16px</span>) </span>&#123;</span><br><span class=\"line\">    @<span class=\"keyword\">if</span> (unitless($px)) &#123;</span><br><span class=\"line\">        @warn <span class=\"string\">\"#&#123;$px&#125; 参数应该为像素\"</span>;</span><br><span class=\"line\">        @<span class=\"keyword\">return</span> px2em($px + <span class=\"number\">0</span>px);</span><br><span class=\"line\">    &#125; @<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (unit($px) == em) &#123;</span><br><span class=\"line\">        @<span class=\"keyword\">return</span> $px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @<span class=\"keyword\">return</span> ($px / $base-font-size) * <span class=\"number\">1</span>em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>需要注意的是字号不使用rem，还是用px</em></strong></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>最后，直接看下效果吧。<br>Mobile S<br><img src=\"/images/flexible/flexible09.png\" alt=\"Mobile S\"></p>\n<p>Mobile L<br><img src=\"/images/flexible/flexible10.png\" alt=\"Mobile L\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>竟然写了这么长，这篇一来是对自己使用flexible的总结和感悟，总之用了之后很方便。其次也是最近有朋友问我是如何解决移动端适配，我直接说了flexible并扔了几个资料，把自己如何用的写出来估计会更好。有什么意见欢迎提出。</p>\n","excerpt":"","more":"<blockquote>\n<p>The less you reveal the more people can wonder.</p>\n</blockquote>\n<p>一次偶然的机会在某技术群里听到手淘flexible.js能够解决移动端适配的问题，遂实践了一下。想来用这套方案也有一段时间了，今天就将自己的理解和实践做个总结。</p>\n<h2 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h2><p>首先放一张设计完成的页面效果图：</p>\n<p><img src=\"/images/flexible/flexible01.png\" alt=\"页面效果图\"></p>\n<p>就是这样一个简单的H5页面，虽然H5页面相对于PC端Web页面简单了很多，但是难点在于让页面适配众多不同的终端设备。而终端设备有哪些，详细参考<a href=\"https://design.google.com/devices/\">Device metrics</a>，看完之后会感觉很恶心，但仍想完美的解决，这时牛X的手淘团队总结了一套<a href=\"https://github.com/amfe/lib-flexible\">Flexible解决方案</a></p>\n<h2 id=\"手淘的方案\"><a href=\"#手淘的方案\" class=\"headerlink\" title=\"手淘的方案\"></a>手淘的方案</h2><h4 id=\"1-直接上图看看手淘的适配协作模式：\"><a href=\"#1-直接上图看看手淘的适配协作模式：\" class=\"headerlink\" title=\"1. 直接上图看看手淘的适配协作模式：\"></a>1. 直接上图看看手淘的适配协作模式：</h4><p><img src=\"/images/flexible/flexible02.png\" alt=\"手淘方案\"></p>\n<p>对这张图我的理解让UI在750px设计并标注大小和坐标，再矢量放大1.5倍后切图，于是我得到了所谓的@3x切图</p>\n<p><img src=\"/images/flexible/flexible03.png\" alt=\"@3x切图\"></p>\n<h4 id=\"2-引入flexible-js\"><a href=\"#2-引入flexible-js\" class=\"headerlink\" title=\"2. 引入flexible.js\"></a>2. 引入flexible.js</h4><p><a href=\"https://github.com/amfe/lib-flexible\">lib-flexible库</a>使用方法非常简单，只需要在head头标签中添加对应的flexible_css.js,flexible.js文件。</p>\n<p>第一种方法是将文件下载到你的项目中，然后引入添加：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"./js/lib/flexible_css.debug.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"./js/lib/flexible.debug.js\"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>或者直接加载阿里CDN的文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"http://g.tbcdn.cn/mtb/lib-flexible/&#123;&#123;version&#125;&#125;/??flexible_css.js,flexible.js\"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>将代码中的<strong><em></em></strong>换成对应的版本号0.3.4.<br><img src=\"/images/flexible/flexible04.png\" alt=\"flexible.js引入\"></p>\n<p>注意使用lib-flexible，通常不要写：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"</span>/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>交给flexible.js自己处理。</p>\n<p>我们来看看效果，在chrome中选择iphone6可以看到font-size:75px：<br><img src=\"/images/flexible/flexible05.png\" alt=\"iphone6\"></p>\n<h4 id=\"3-把视觉搞中的px转换成rem\"><a href=\"#3-把视觉搞中的px转换成rem\" class=\"headerlink\" title=\"3. 把视觉搞中的px转换成rem\"></a>3. 把视觉搞中的px转换成rem</h4><p>什么是rem？</p>\n<blockquote>\n<p>font size of the root element.</p>\n</blockquote>\n<p>当html中font-size能够动态给出，这样使用rem就十分简单了。而如何将750px下的标注搞转换成rem。这里简单的介绍下Flexible的做法。</p>\n<p>目前Flexible会将视觉稿分成100份（主要为了以后能更好的兼容vh和vw），而每一份被称为一个单位a。同时1rem单位被认定为10a。针对我们这份视觉稿可以计算出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1a   = 7.5px</span><br><span class=\"line\">1rem = 75px</span><br></pre></td></tr></table></figure>\n<p>所以显而易见，只要将750px下的标注搞/75就是对应的rem的值，比如视觉稿中的图片大小为200px<em>200px，转换成为2.667rem</em>2.667rem。</p>\n<h2 id=\"如何快速计算CSS\"><a href=\"#如何快速计算CSS\" class=\"headerlink\" title=\"如何快速计算CSS\"></a>如何快速计算CSS</h2><p>关于这方面的工具有很多，手淘同学编写了各种工具，这里我使用的<a href=\"https://www.npmjs.com/package/px2rem\">PostCSS(px2rem)</a>，非常好用，在此谢过。gulpfile.js文件的编写如下：</p>\n<p><img src=\"/images/flexible/flexible06.png\" alt=\"gulpfile.js\"></p>\n<p>配置完成后实际用的时候只要这样使用：</p>\n<p><img src=\"/images/flexible/flexible07.png\" alt=\"rem1.js\"></p>\n<p>px2rem处理之后将会变成：</p>\n<p><img src=\"/images/flexible/flexible08.png\" alt=\"rem2.js\"></p>\n<p>另外如果你是使用Sass或是Less，你也可以使用Sass函数、混合宏来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">px2em</span>(<span class=\"params\">$px, $base-font-size: 16px</span>) </span>&#123;</span><br><span class=\"line\">    @<span class=\"keyword\">if</span> (unitless($px)) &#123;</span><br><span class=\"line\">        @warn <span class=\"string\">\"#&#123;$px&#125; 参数应该为像素\"</span>;</span><br><span class=\"line\">        @<span class=\"keyword\">return</span> px2em($px + <span class=\"number\">0</span>px);</span><br><span class=\"line\">    &#125; @<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (unit($px) == em) &#123;</span><br><span class=\"line\">        @<span class=\"keyword\">return</span> $px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @<span class=\"keyword\">return</span> ($px / $base-font-size) * <span class=\"number\">1</span>em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>需要注意的是字号不使用rem，还是用px</em></strong></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>最后，直接看下效果吧。<br>Mobile S<br><img src=\"/images/flexible/flexible09.png\" alt=\"Mobile S\"></p>\n<p>Mobile L<br><img src=\"/images/flexible/flexible10.png\" alt=\"Mobile L\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>竟然写了这么长，这篇一来是对自己使用flexible的总结和感悟，总之用了之后很方便。其次也是最近有朋友问我是如何解决移动端适配，我直接说了flexible并扔了几个资料，把自己如何用的写出来估计会更好。有什么意见欢迎提出。</p>\n"},{"title":"语法和数据类型","date":"2016-05-16T02:13:21.000Z","_content":"> By plucking her petals you do not gather the beauty of the flower. \n\n> 本章讨论Javascript的基本语法(basic grammar)，变量声明(variable declarations)，数据类型(data types)和字面量(literals)。\n\n## 基础知识(Basic)\nJavascript很多语法借鉴自Java，但也受Awk, Perl和Python影响。\n\nJavascript是大小写敏感的，使用Unicode字符集。\n\n在Javascript中，语句被称为statements，并用分号分隔(;)。空格、制表符和换行符被称为空白。\nJavascript的脚本的源文件从左到右扫描，并转换成由令牌，控制字符，行结束符，注释或空白组成的输入元素序列。\nECMAScript中还定义了某些关键字和字面量，并具有分号自动插入功能(ASI)来结束语句。但是，建议随时添加分号结束你的语句以避免副作用。\n\n## 注释(Comments)\n注释语法和C++和其他语言相同：\n```javascript\n    //单行注释\n    /* 这是一个多行注释*/\n```\n\n## 声明(Declarations)\nJavascript有三种声明。\n\nvar 声明变量，可选择将其初始化为一个值\nlet 声明块范围局部变量(block scope local variable)，可选择将其初始化为一个值。\nconst 声明一个只读(read-only)命名常量。\n\n### 变量(variables)\n在应用程序中，使用变量来为值命名。变量的名称称为identifiers，需要遵守一定的规则。\n\n在Javascript语言中，一个标识符(identifier)必须以字母、下划线(_)或者美元($)符号开头；后续的字符可以包含数字(0-9)。因为Javascript语言中是区分大小写的，这里所指的字母可以是(大写的)\"A\"到字母\"Z\"和小写的\"a\"到\"z\"。\n从JavaScript 1.5版开始，你可以使用ISO 8859-1或Unicode编码的字符作标识符。你也可以使用\\uXXXX字样的转义序列Unicode escape sequences作标识符。\n\n### 声明变量(Declaring variables)\n你可以用以下三种方式声明变量：\n\n- 使用关键词var.例如，var x = 42。这个语法可以同时用来声明局部和全局变量。\n- 直接赋值。\n- 使用关键词let。例如let y = 13。这个语法可以用来声明语句块代码段的局部变量(block scope local variable)。\n\n### 对变量求值(Evaluation variables)\n用var或let声明的未赋初值的变量，值会被定义为undefined（即未定义值，本身也是一个值）。\n\n试图访问一个未初始化的变量会导致一个ReferenceError异常被抛出：\n\n```javascript\n    var a;\n    console.log(\"The value of a is \"+a); //logs的值未定义\n    console.log(\"The value of b is \"+b); //抛出ReferenceError异常\n```\n\n你可以使用undefined来确定变量是否已赋值。以下的代码中，变量input未被赋值，因而if条件语句的求值结果是true。\n\n```javascript\n    var input;\n    if(input === undefined){\n        doThis();\n    }else{\n        doThat();\n    }\n```\n\nundefined值在布尔类型环境中会被当做false。例如，下面的代码将运行函数myFunction，因为数组myArray中的元素未被赋值：\n\n```javascript\n    var myArray = new Array();\n    if(!myArray[0]){\n        myFunction();\n    }\n```\n\n数值类型环境中undefined值会被转换为NaN。\n\n```javascript\n    var a;\n    a + 2; // Evaluates to NaN\n```\n\n当你对一个空变量求值时，空值null在数值类型环境中会被当作0来对待，而布尔类型环境中会被当作false\n\n```javascript\n    var n = null;\n    console.log(n * 32); //logs 0\n```\n\n### 变量的域(Variable scope)\n在所有函数之外声明的变量，叫做全局变量，因为它可被当前文档中的其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在该函数内部访问。\n\nECMAScript6之前的Javascript没有语句块作用域；相反，语句块中声明的变量将成为语句块所在代码段的局部变量。例如，如下的代码将在控制台输出5，因为x的作用域是声明了x的那个函数(或全局范围)，而不是if语句块。\n\n```javascript\n    if(true){\n        var x = 5;\n    }\n    console.log(x); //5\n```\n\n如果使用ECMAScript6中的let声明，上述行为将发生变化。\n\n```javascript\n    if(true){\n        let x = 5;\n    }\n    console.log(x); //ReferenceError: y is not defined.\n```\n\n### 变量声明提升(Variable hoisting)\nJavaScript变量的另一个特别之处是，你可以引用稍后声明的变量，而不会引发异常。这一概念称为变量声明提升(hoisting)；JavaScript变量感觉上是被“举起”或提升到了所有函数和语句之前。然而提升后的变量将返回undefined值，所以即使在使用或引用某个变量之后存在声明和初始化操作，仍将得到undefined值。\n\n```javascript\n    /**\n     * Example 1\n     */\n    console.log(x === undefined); //logs \"true\"\n    var x = 3;\n    /**\n     * Example 2\n     */\n    // will return a value of undefined\n    var myvar = \"my value\";\n    (function(){\n        console.log(myvar); //undefined\n        var myvar = \"local value\";\n    })();\n```\n\n上面的例子，也可写作：\n\n```javascript\n    /**\n     * Example 1\n     */\n    var x;\n    console.log(x === undefined); // logs \"true\"\n    x = 3;\n    /**\n     * Example 2\n     */\n    var myvar = \"my value\";\n    (function() {\n      var myvar;\n      console.log(myvar); // undefined\n      myvar = \"local value\";\n    })();\n```\n\n由于存在变量声明提升，一个函数中所有的var语句应尽可能地放在接近函数顶部的地方。这大大地提升了程序代码的清晰度。\n\n### 全局变量(Global variables)\n全局变量实际上是全局对象的属性。在网页中，全局对象是window，所以你可以用形如window.variable的语法来设置和访问全局变量。\n\n因此，你可以通过制定window或frame的名字，从一个window或frame访问另一个window或frame中声明的变量。例如，设想一个叫phoneNumber的变量在文档里被声明，你可以在子框架里用phone.phoneNumber来引用它。\n\n## 常量(Constants)\n你可以用关键字const创建一个只读(read-only)的常量。常量标识符的命名规则和变量的相同：必须以字母、下划线或美元符号开头并可以包含有字母、数字或下划线。\n\n```javascript\n    const prefix = '212';\n```\n\n常量不可以通过赋值改变其值，也不可以在脚本运行时重新声明。**它必须被初始化为某个值。**\n\n常量的作用域规则与let会计作用域变量相同。若const关键字被省略了，该标识符将被视为变量。\n\n在同一个作用域下，不能用于变量或函数同样的名字来命名常量。例如：\n\n```javascript\n    //THIS WILL CAUSE AN ERROR\n     function f(){};\n     const f = 5;\n    // THIS WILL CAUSE AN ERROR ALSO\n    function f(){\n        const g = 5;\n        var g;\n        //statements\n    }\n```\n\n## 数据结构和类型\nJavaScript语言可以识别下面7中不同类型的值：\n- 六种是原型的数据类型：\n    1. Boolean. 布尔值，true和false.\n    2. null. 一个表明null值得特殊关键字。JavaScript是大小敏感的，因此null与Null、NULL或其他变量完全不同。\n    3. undefined. 变量未定义时的属性。\n    4. Number. 表示数字，例如：42或者3.14.\n    5. String. 表示字符串，例如：\"Hello\"。\n    6. Symbol(在ECMAScript6中新添加的类型)。一种数据类型，它的实例是唯一且不可改变的。\n- 以及Object对象\n\n仅凭这些为数不多的数据类型，在你的应用程序中他们就能够执行有用的功能。\n\nObjects和functions是本语言的其他两个基本元素。你可以将对象视为存放值得命名容器，而将函数视为你的应用程序能够执行的过程(procedures)。\n\n### 数据类型的转换(Data type conversion)\nJavaScript是一种动态类型语言(dynamically typed language)。这意味着你声明变量时可以不指定数据类型，而数据会在脚本执行需要时自动转换。那么，你可以这样来定义变量：\n\n```javascript\n    var answer = 42;\n```\n\n然后，你还可以给同一个变量分配一个字符串值，例如：\n\n```javascript\n    answer = \"hello world!\";\n```\n\n因为JavaScript是动态类型的，这样的指定并不会提示出错。\n\n再涉及加法运算符(+)的数字和字符串表达式中，JavaScript会把数字值转换为字符串。例如，假设有如下的语句：\n\n```javascript\n   x = \"The answer is \" + 42 // \"The answer is 42\"\n   y = 42 + \" is the answer\" // \"42 is the answer\"\n```\n\n在涉及其他运算符(如下面的减号)时，JavaScript语言不会把数字变为字符。例如(第一例是数字运算符，第二例是字符串运算符):\n\n```javascript\n   \"37\" - 7 // 30\n   \"37\" + 7 // \"377\" \n```\n\n### 字符串转化为数字(converting strings to numbers)\n有一些方法可以将内存中表示一个数字的字符串转换为对应的数字\nparseInt()和parseFloat()\n\nparseInt仅能够返回整数，所以使用它会丢失小数部分。另外，调用parseInt时最好总是带上进制(radix)参数，这个参数用于指定使用哪一种数制。\n\n#### 单目加法运算符\n**将字符串转换为数字的另一种方法是使用单目加法运算符。**\n\n```javascript\n    \"1.1\" + \"1.1\" = \"1.11.1\"\n    (+\"1.1\") + (+\"1.1\") = 2.2   // 注：加入括号为清楚起见，不是必需的。\n```\n\n## 字面值(Literals)\n(注：字面值是由语法表达式定义的常量；或通过一定字辞组成的语词表达式定义的常量)\n\n在JavaScript中，你可以使用各种字面值。这些字面值是脚本中按字面意思给出的固定的值，而不是变量。(字面值是常量，其值是固定的，而且在程序脚本运行中不可更改，比如false,3.1415,thisStringOfHelloWorld,invokedFunction: myFunction(\"myArgument\"))\n\n### 数组字面值(Array Literals)\n数组字面值是一个封闭在方括号对([])中的包含有零个或多个表达式的列表，其中每个表达式代表数组的一个元素。当你使用数组字面值创建一个数组时，该数组将会以指定的值作为它的元素进行初始化，而其长度被设定为元素的个数。\n\n下面的示例用3个元素生成数组coffees，它的长度是3。\n\n```javascript\n   var coffees = [\"French Roast\", \"Colombian\", \"Kona\"];\n   var a=[3];\n   console.log(a.length); // 1\n   console.log(a[0]); // 3 \n```\n\n若在顶层（全局）脚本里用字面值创建数组，JavaScript语言会在每次对包含该数组字面值的表达式时解释该数组。另一方面，在函数中使用的数组，将在每次调用函数时被创建一次。\n\n数组字面值同时也是数组对象。\n\n**数组字面值中的多余逗号**\n你不必列举数组字面值中的所有元素。若你在同一行中连写两个逗号（,），数组中就会产生一个没被指定的元素，其初始值是undefined。以下示例创建了一个名为fish的数组：\n\n```javascript\n    var fish = [\"Lion\", , \"Angel\"];\n```\n\n这个数组中，有两个已被赋值的元素，和一个空元素，此时的数组的长度是3.\n\n若你在元素列表的尾部添加了一个逗号，它会被忽略。在下面的例子中，该数组的长度是3.并不存在myList[3]这个元素。元素列表中所有其他的逗号都表示一个新元素（的开始）。\n\n```javascript\n   var myList = ['home', , 'school', ]; \n```\n\n在下面的例子中，数组的长度是4，元素myList[0]和myList[2]缺失（译注：没被赋值，因而是undefined）。\n\n```javascript\n    var myList = [ , 'home', , 'school'];\n```\n\n又一个例子，在这里该数组的长度是4，元素myList[1]和myList[3]被漏掉了。（但是）只有最后的那个逗号被忽略。\n\n```javascript\n    var myList = ['home', , 'school', , ];\n```\n\n理解多余的逗号（在脚本运行时会被如何处理）的含义，对于从语言层面理解JavaScript是十分重要的。但是，你自己写代码时：**显式地将缺失的元素声明为undefined，将大大增加你的代码的清晰度和可维护性**。\n\n### 布尔字面值(Boolean literals)\n布尔类型有两种字面值：true和false。\n\n不要混淆作为布尔对象的真和假与布尔类型的原始值true和false。布尔对象是原始布尔数据类型的一个包装器。\n\n### 整数(Intergers)\n整数可以被表示成十进制(基数为10)、十六进制(基数为16)以及八进制(基数为8)。\n - 十进制整数字组成的数字序列，不带前导0.\n - 带前导0、0O、0o的整数字面值表明它是八进制。八进制整数只能包括数字0-7。\n - 前缀0x或0X表示十六进制。十六进制整数，可以包含数字（0-9）和字母a~f或A~F。\n \n### 浮点数字面值(Floating-point literal)\n浮点数字面值可以有以下的组成部分：\n - 一个十进制整数，它可以带符号（即前面的\"+\"或\"-\"号），\n - 一个小数点（\".\"），\n - 一个小数部分（由一串十进制数表示），\n - 一个指数部分\n \n指数部分是以\"e\"或\"E\"开头后面跟着一个整数，可以有正负号（即前面写\"+\"或\"-\"）。一个浮点数字面值必须至少有一位数字，后接小数点或者\"e\"(\"E\")组成。\n\n一些浮点数字面值的例子，如3.1415,-3.1415,1e12以及2E-12。\n\n简而言之，其语法是：\n```javascript\n    [(+|-)][digits][.digits][(E|e)[(+|-)]digits]\n```\n\n### 对象字面量(Object literals)\n对象字面值是封闭在花括号对({})中的一个对象的零个或多个\"属性名-值\"对的（元素）列表。你不能在一条语句的开头就使用对象字面值，这将导致错误或非你所预想的行为，因为此时左花括号({)会被认为一个语句块的齐师傅好。\n\n以下是一个对象字面值的例子。对象car的第一个元素（译注：即一个属性双值对）定义了属性myCar；第二个元素，属性getCar，引用了一个函数（即CarTypes(\"Honda\")）；第三个元素，属性special，使用了一个已有的变量（即Sales）\n\n```javascript\n   var Sales = \"Toyota\";\n   function CarTypes(name) {\n     return (name === \"Honda\") ?\n       name :\n       \"Sorry, we don't sell \" + name + \".\" ;\n   }\n   var car = { myCar: \"Saturn\", getCar: CarTypes(\"Honda\"), special: Sales };\n   console.log(car.myCar);   // Saturn\n   console.log(car.getCar);  // Honda\n   console.log(car.special); // Toyota \n```\n\n更进一步的，你可以使用数字或字符串字面值作为属性的名字，或者在另一个字面值内嵌套上一个字面值。如下的示例中使用了这些可选项\n\n```javascript\n   var car = { manyCars: {a: \"Saab\", \"b\": \"Jeep\"}, 7: \"Mazda\" };\n   console.log(car.manyCars.b); // Jeep\n   console.log(car[7]); // Mazda \n```\n\n对象属性名字可以是任意字符串，包括空串。如果对象属性名字不是合法的javascript标识符，它必须用\"\"包裹。属性的名字不合法，那么便不能用.访问属性值，而是通过类数组标记(\"[]\")访问和赋值。\n\n```javascript\n    var unusualPropertyNames = {\n      \"\": \"An empty string\",\n      \"!\": \"Bang!\"\n    }\n    console.log(unusualPropertyNames.\"\");   // 语法错误: Unexpected string\n    console.log(unusualPropertyNames[\"\"]);  // An empty string\n    console.log(unusualPropertyNames.!);    // 语法错误: Unexpected token !\n    console.log(unusualPropertyNames[\"!\"]); // Bang!\n```\n\n在ES2015，对象文本扩展到支持在原型设置建造，简写foo:foo分配，界定方法，得到很好的名称，并与表达式计算属性名。总之，这些也带来了对象文字和类声明紧密联系起来，让基于对象的设计得益于一些同样的便利。\n\n```javascript\n    var obj = {\n        //__proto__\n        __proto__: theProtoObj,\n        // Shorthand for 'handler:handler'\n        handler,\n        //Methods\n        toString(){\n            //super calls\n            return \"d\" + super.toString();\n        },\n        //Computed (dynamic) property names\n        [ 'prop_' + (() => 42)() ]:42\n    };\n```\n\n### RegExp literals\n一个正则表达式是字符被斜线围成的表达式。下面是一个正则表达式文字的一个例子。\n\n```javascript\n    var re = /ab+c/;\n```\n\n### 字符串字面值\n字符串字面值可以包含零个或多个字符，由双引号对或单引号对包围。字符串被限定在同种引号之间。\n你可以在字符串字面值上使用字符串对象的所有方法--JavaScript会自动将字符串字面值转换为一个临时字符串对象，调用该方法，然后废弃掉那个临时的字符串变量。你也能对字符串字面值使用类似String.length的属性：\n\n```javascript\n   \"John's cat\".length\n```\n\n除非有特别需要使用字符串对象，否则，你应当始终使用字符串字面值。\n\n在字符串中使用的特殊字符\n作为一般字符的扩展，你可以在字符串中使用特殊字符\n\n```javascript\n    \"one line \\n another line\"\n```\n以下表格列举了你能在JavaScript的字符串中使用的特殊字符。\n\n| Character | Meaning |\n| ----- | :-----: |\n| \\0 | 空字符 |\n| \\b | 退格 |\n| \\f | 换页符 |\n| \\n | 换行符 |\n| \\r | 回车符 |\n| \\t | Tab制表符 |\n| \\v | 垂直制表符 |\n| \\' | 单引号 |\n| \\\" | 双引号 |\n| \\\\ | 反斜杠字符(\\) |\n| \\XXX | 通过最多三个八进制位数x377.例如在0和指定的Latin-1编码的字符，\\251是版本符号八进制序列。 |\n| \\xXX | 由00和FF之间的两个十六进制数字XX指定的Latin-1编码的字符。例如，版权所有\\ xA9为版权符号十六进制序列。 |\n| \\uXXXX | 由四个十六进制数字XXXX规定的Unicode字符。例如，\\ u00A9为版权符号的Unicode序列。见Unicode转义序列。 |\n| \\u{XXXXX} | Unicode code point escapes. For example, \\u{2F804} is the same as the simple Unicode escapes \\uD87E\\uDC04. |\n\n转义字符\n对于那些未出现在表2.1中的字符，其所带的前导反斜线'\\'将被忽略。但是，这一用法已被废弃，应当避免使用。\n\n通过在引号前加上反斜线'\\'，可以在字符串中插入引号，这就是引号转义。例如:\n```javascript\n    var quote = \"He read \\\"The Cremation of Sam McGee\\\" by R.W. Service.\";\n    console.log(quote); // He read \"The Cremation of Sam McGee\" by R.W. Service.\n```\n\n要在字符串中插入'\\'字面值，必须转义反斜线。例如，要把文件路径 c:\\temp 赋值给一个字符串，可以采用如下方式:\n```javascript\n   var home = \"c:\\\\temp\";\n```\n\n也可以在换行之前加上反斜线以转义换行（译注：实际上就是一条语句拆成多行书写），这样反斜线和换行都不会出现在字符串的值中。\n```javascript\n   var str = \"this string \\\n   is broken \\\n   across multiple\\\n   lines.\"\n   console.log(str);   // this string is broken across multiplelines. \n```\n\nJavascript没有“heredoc”语法，但可以用行末的换行符转义和转义的换行来近似实现 \n```javascript\n    var poem = \n    \"Roses are red,\\n\\\n    Violets are blue.\\n\\\n    I'm schizophrenic,\\n\\\n    And so am I.\"\n```","source":"_posts/语法和数据类型.md","raw":"---\ntitle: 语法和数据类型\ndate: 2016-05-16 10:13:21\ntags:\n- javascript\n- 语法和数据类型\ncategories: 笔记\n---\n> By plucking her petals you do not gather the beauty of the flower. \n\n> 本章讨论Javascript的基本语法(basic grammar)，变量声明(variable declarations)，数据类型(data types)和字面量(literals)。\n\n## 基础知识(Basic)\nJavascript很多语法借鉴自Java，但也受Awk, Perl和Python影响。\n\nJavascript是大小写敏感的，使用Unicode字符集。\n\n在Javascript中，语句被称为statements，并用分号分隔(;)。空格、制表符和换行符被称为空白。\nJavascript的脚本的源文件从左到右扫描，并转换成由令牌，控制字符，行结束符，注释或空白组成的输入元素序列。\nECMAScript中还定义了某些关键字和字面量，并具有分号自动插入功能(ASI)来结束语句。但是，建议随时添加分号结束你的语句以避免副作用。\n\n## 注释(Comments)\n注释语法和C++和其他语言相同：\n```javascript\n    //单行注释\n    /* 这是一个多行注释*/\n```\n\n## 声明(Declarations)\nJavascript有三种声明。\n\nvar 声明变量，可选择将其初始化为一个值\nlet 声明块范围局部变量(block scope local variable)，可选择将其初始化为一个值。\nconst 声明一个只读(read-only)命名常量。\n\n### 变量(variables)\n在应用程序中，使用变量来为值命名。变量的名称称为identifiers，需要遵守一定的规则。\n\n在Javascript语言中，一个标识符(identifier)必须以字母、下划线(_)或者美元($)符号开头；后续的字符可以包含数字(0-9)。因为Javascript语言中是区分大小写的，这里所指的字母可以是(大写的)\"A\"到字母\"Z\"和小写的\"a\"到\"z\"。\n从JavaScript 1.5版开始，你可以使用ISO 8859-1或Unicode编码的字符作标识符。你也可以使用\\uXXXX字样的转义序列Unicode escape sequences作标识符。\n\n### 声明变量(Declaring variables)\n你可以用以下三种方式声明变量：\n\n- 使用关键词var.例如，var x = 42。这个语法可以同时用来声明局部和全局变量。\n- 直接赋值。\n- 使用关键词let。例如let y = 13。这个语法可以用来声明语句块代码段的局部变量(block scope local variable)。\n\n### 对变量求值(Evaluation variables)\n用var或let声明的未赋初值的变量，值会被定义为undefined（即未定义值，本身也是一个值）。\n\n试图访问一个未初始化的变量会导致一个ReferenceError异常被抛出：\n\n```javascript\n    var a;\n    console.log(\"The value of a is \"+a); //logs的值未定义\n    console.log(\"The value of b is \"+b); //抛出ReferenceError异常\n```\n\n你可以使用undefined来确定变量是否已赋值。以下的代码中，变量input未被赋值，因而if条件语句的求值结果是true。\n\n```javascript\n    var input;\n    if(input === undefined){\n        doThis();\n    }else{\n        doThat();\n    }\n```\n\nundefined值在布尔类型环境中会被当做false。例如，下面的代码将运行函数myFunction，因为数组myArray中的元素未被赋值：\n\n```javascript\n    var myArray = new Array();\n    if(!myArray[0]){\n        myFunction();\n    }\n```\n\n数值类型环境中undefined值会被转换为NaN。\n\n```javascript\n    var a;\n    a + 2; // Evaluates to NaN\n```\n\n当你对一个空变量求值时，空值null在数值类型环境中会被当作0来对待，而布尔类型环境中会被当作false\n\n```javascript\n    var n = null;\n    console.log(n * 32); //logs 0\n```\n\n### 变量的域(Variable scope)\n在所有函数之外声明的变量，叫做全局变量，因为它可被当前文档中的其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在该函数内部访问。\n\nECMAScript6之前的Javascript没有语句块作用域；相反，语句块中声明的变量将成为语句块所在代码段的局部变量。例如，如下的代码将在控制台输出5，因为x的作用域是声明了x的那个函数(或全局范围)，而不是if语句块。\n\n```javascript\n    if(true){\n        var x = 5;\n    }\n    console.log(x); //5\n```\n\n如果使用ECMAScript6中的let声明，上述行为将发生变化。\n\n```javascript\n    if(true){\n        let x = 5;\n    }\n    console.log(x); //ReferenceError: y is not defined.\n```\n\n### 变量声明提升(Variable hoisting)\nJavaScript变量的另一个特别之处是，你可以引用稍后声明的变量，而不会引发异常。这一概念称为变量声明提升(hoisting)；JavaScript变量感觉上是被“举起”或提升到了所有函数和语句之前。然而提升后的变量将返回undefined值，所以即使在使用或引用某个变量之后存在声明和初始化操作，仍将得到undefined值。\n\n```javascript\n    /**\n     * Example 1\n     */\n    console.log(x === undefined); //logs \"true\"\n    var x = 3;\n    /**\n     * Example 2\n     */\n    // will return a value of undefined\n    var myvar = \"my value\";\n    (function(){\n        console.log(myvar); //undefined\n        var myvar = \"local value\";\n    })();\n```\n\n上面的例子，也可写作：\n\n```javascript\n    /**\n     * Example 1\n     */\n    var x;\n    console.log(x === undefined); // logs \"true\"\n    x = 3;\n    /**\n     * Example 2\n     */\n    var myvar = \"my value\";\n    (function() {\n      var myvar;\n      console.log(myvar); // undefined\n      myvar = \"local value\";\n    })();\n```\n\n由于存在变量声明提升，一个函数中所有的var语句应尽可能地放在接近函数顶部的地方。这大大地提升了程序代码的清晰度。\n\n### 全局变量(Global variables)\n全局变量实际上是全局对象的属性。在网页中，全局对象是window，所以你可以用形如window.variable的语法来设置和访问全局变量。\n\n因此，你可以通过制定window或frame的名字，从一个window或frame访问另一个window或frame中声明的变量。例如，设想一个叫phoneNumber的变量在文档里被声明，你可以在子框架里用phone.phoneNumber来引用它。\n\n## 常量(Constants)\n你可以用关键字const创建一个只读(read-only)的常量。常量标识符的命名规则和变量的相同：必须以字母、下划线或美元符号开头并可以包含有字母、数字或下划线。\n\n```javascript\n    const prefix = '212';\n```\n\n常量不可以通过赋值改变其值，也不可以在脚本运行时重新声明。**它必须被初始化为某个值。**\n\n常量的作用域规则与let会计作用域变量相同。若const关键字被省略了，该标识符将被视为变量。\n\n在同一个作用域下，不能用于变量或函数同样的名字来命名常量。例如：\n\n```javascript\n    //THIS WILL CAUSE AN ERROR\n     function f(){};\n     const f = 5;\n    // THIS WILL CAUSE AN ERROR ALSO\n    function f(){\n        const g = 5;\n        var g;\n        //statements\n    }\n```\n\n## 数据结构和类型\nJavaScript语言可以识别下面7中不同类型的值：\n- 六种是原型的数据类型：\n    1. Boolean. 布尔值，true和false.\n    2. null. 一个表明null值得特殊关键字。JavaScript是大小敏感的，因此null与Null、NULL或其他变量完全不同。\n    3. undefined. 变量未定义时的属性。\n    4. Number. 表示数字，例如：42或者3.14.\n    5. String. 表示字符串，例如：\"Hello\"。\n    6. Symbol(在ECMAScript6中新添加的类型)。一种数据类型，它的实例是唯一且不可改变的。\n- 以及Object对象\n\n仅凭这些为数不多的数据类型，在你的应用程序中他们就能够执行有用的功能。\n\nObjects和functions是本语言的其他两个基本元素。你可以将对象视为存放值得命名容器，而将函数视为你的应用程序能够执行的过程(procedures)。\n\n### 数据类型的转换(Data type conversion)\nJavaScript是一种动态类型语言(dynamically typed language)。这意味着你声明变量时可以不指定数据类型，而数据会在脚本执行需要时自动转换。那么，你可以这样来定义变量：\n\n```javascript\n    var answer = 42;\n```\n\n然后，你还可以给同一个变量分配一个字符串值，例如：\n\n```javascript\n    answer = \"hello world!\";\n```\n\n因为JavaScript是动态类型的，这样的指定并不会提示出错。\n\n再涉及加法运算符(+)的数字和字符串表达式中，JavaScript会把数字值转换为字符串。例如，假设有如下的语句：\n\n```javascript\n   x = \"The answer is \" + 42 // \"The answer is 42\"\n   y = 42 + \" is the answer\" // \"42 is the answer\"\n```\n\n在涉及其他运算符(如下面的减号)时，JavaScript语言不会把数字变为字符。例如(第一例是数字运算符，第二例是字符串运算符):\n\n```javascript\n   \"37\" - 7 // 30\n   \"37\" + 7 // \"377\" \n```\n\n### 字符串转化为数字(converting strings to numbers)\n有一些方法可以将内存中表示一个数字的字符串转换为对应的数字\nparseInt()和parseFloat()\n\nparseInt仅能够返回整数，所以使用它会丢失小数部分。另外，调用parseInt时最好总是带上进制(radix)参数，这个参数用于指定使用哪一种数制。\n\n#### 单目加法运算符\n**将字符串转换为数字的另一种方法是使用单目加法运算符。**\n\n```javascript\n    \"1.1\" + \"1.1\" = \"1.11.1\"\n    (+\"1.1\") + (+\"1.1\") = 2.2   // 注：加入括号为清楚起见，不是必需的。\n```\n\n## 字面值(Literals)\n(注：字面值是由语法表达式定义的常量；或通过一定字辞组成的语词表达式定义的常量)\n\n在JavaScript中，你可以使用各种字面值。这些字面值是脚本中按字面意思给出的固定的值，而不是变量。(字面值是常量，其值是固定的，而且在程序脚本运行中不可更改，比如false,3.1415,thisStringOfHelloWorld,invokedFunction: myFunction(\"myArgument\"))\n\n### 数组字面值(Array Literals)\n数组字面值是一个封闭在方括号对([])中的包含有零个或多个表达式的列表，其中每个表达式代表数组的一个元素。当你使用数组字面值创建一个数组时，该数组将会以指定的值作为它的元素进行初始化，而其长度被设定为元素的个数。\n\n下面的示例用3个元素生成数组coffees，它的长度是3。\n\n```javascript\n   var coffees = [\"French Roast\", \"Colombian\", \"Kona\"];\n   var a=[3];\n   console.log(a.length); // 1\n   console.log(a[0]); // 3 \n```\n\n若在顶层（全局）脚本里用字面值创建数组，JavaScript语言会在每次对包含该数组字面值的表达式时解释该数组。另一方面，在函数中使用的数组，将在每次调用函数时被创建一次。\n\n数组字面值同时也是数组对象。\n\n**数组字面值中的多余逗号**\n你不必列举数组字面值中的所有元素。若你在同一行中连写两个逗号（,），数组中就会产生一个没被指定的元素，其初始值是undefined。以下示例创建了一个名为fish的数组：\n\n```javascript\n    var fish = [\"Lion\", , \"Angel\"];\n```\n\n这个数组中，有两个已被赋值的元素，和一个空元素，此时的数组的长度是3.\n\n若你在元素列表的尾部添加了一个逗号，它会被忽略。在下面的例子中，该数组的长度是3.并不存在myList[3]这个元素。元素列表中所有其他的逗号都表示一个新元素（的开始）。\n\n```javascript\n   var myList = ['home', , 'school', ]; \n```\n\n在下面的例子中，数组的长度是4，元素myList[0]和myList[2]缺失（译注：没被赋值，因而是undefined）。\n\n```javascript\n    var myList = [ , 'home', , 'school'];\n```\n\n又一个例子，在这里该数组的长度是4，元素myList[1]和myList[3]被漏掉了。（但是）只有最后的那个逗号被忽略。\n\n```javascript\n    var myList = ['home', , 'school', , ];\n```\n\n理解多余的逗号（在脚本运行时会被如何处理）的含义，对于从语言层面理解JavaScript是十分重要的。但是，你自己写代码时：**显式地将缺失的元素声明为undefined，将大大增加你的代码的清晰度和可维护性**。\n\n### 布尔字面值(Boolean literals)\n布尔类型有两种字面值：true和false。\n\n不要混淆作为布尔对象的真和假与布尔类型的原始值true和false。布尔对象是原始布尔数据类型的一个包装器。\n\n### 整数(Intergers)\n整数可以被表示成十进制(基数为10)、十六进制(基数为16)以及八进制(基数为8)。\n - 十进制整数字组成的数字序列，不带前导0.\n - 带前导0、0O、0o的整数字面值表明它是八进制。八进制整数只能包括数字0-7。\n - 前缀0x或0X表示十六进制。十六进制整数，可以包含数字（0-9）和字母a~f或A~F。\n \n### 浮点数字面值(Floating-point literal)\n浮点数字面值可以有以下的组成部分：\n - 一个十进制整数，它可以带符号（即前面的\"+\"或\"-\"号），\n - 一个小数点（\".\"），\n - 一个小数部分（由一串十进制数表示），\n - 一个指数部分\n \n指数部分是以\"e\"或\"E\"开头后面跟着一个整数，可以有正负号（即前面写\"+\"或\"-\"）。一个浮点数字面值必须至少有一位数字，后接小数点或者\"e\"(\"E\")组成。\n\n一些浮点数字面值的例子，如3.1415,-3.1415,1e12以及2E-12。\n\n简而言之，其语法是：\n```javascript\n    [(+|-)][digits][.digits][(E|e)[(+|-)]digits]\n```\n\n### 对象字面量(Object literals)\n对象字面值是封闭在花括号对({})中的一个对象的零个或多个\"属性名-值\"对的（元素）列表。你不能在一条语句的开头就使用对象字面值，这将导致错误或非你所预想的行为，因为此时左花括号({)会被认为一个语句块的齐师傅好。\n\n以下是一个对象字面值的例子。对象car的第一个元素（译注：即一个属性双值对）定义了属性myCar；第二个元素，属性getCar，引用了一个函数（即CarTypes(\"Honda\")）；第三个元素，属性special，使用了一个已有的变量（即Sales）\n\n```javascript\n   var Sales = \"Toyota\";\n   function CarTypes(name) {\n     return (name === \"Honda\") ?\n       name :\n       \"Sorry, we don't sell \" + name + \".\" ;\n   }\n   var car = { myCar: \"Saturn\", getCar: CarTypes(\"Honda\"), special: Sales };\n   console.log(car.myCar);   // Saturn\n   console.log(car.getCar);  // Honda\n   console.log(car.special); // Toyota \n```\n\n更进一步的，你可以使用数字或字符串字面值作为属性的名字，或者在另一个字面值内嵌套上一个字面值。如下的示例中使用了这些可选项\n\n```javascript\n   var car = { manyCars: {a: \"Saab\", \"b\": \"Jeep\"}, 7: \"Mazda\" };\n   console.log(car.manyCars.b); // Jeep\n   console.log(car[7]); // Mazda \n```\n\n对象属性名字可以是任意字符串，包括空串。如果对象属性名字不是合法的javascript标识符，它必须用\"\"包裹。属性的名字不合法，那么便不能用.访问属性值，而是通过类数组标记(\"[]\")访问和赋值。\n\n```javascript\n    var unusualPropertyNames = {\n      \"\": \"An empty string\",\n      \"!\": \"Bang!\"\n    }\n    console.log(unusualPropertyNames.\"\");   // 语法错误: Unexpected string\n    console.log(unusualPropertyNames[\"\"]);  // An empty string\n    console.log(unusualPropertyNames.!);    // 语法错误: Unexpected token !\n    console.log(unusualPropertyNames[\"!\"]); // Bang!\n```\n\n在ES2015，对象文本扩展到支持在原型设置建造，简写foo:foo分配，界定方法，得到很好的名称，并与表达式计算属性名。总之，这些也带来了对象文字和类声明紧密联系起来，让基于对象的设计得益于一些同样的便利。\n\n```javascript\n    var obj = {\n        //__proto__\n        __proto__: theProtoObj,\n        // Shorthand for 'handler:handler'\n        handler,\n        //Methods\n        toString(){\n            //super calls\n            return \"d\" + super.toString();\n        },\n        //Computed (dynamic) property names\n        [ 'prop_' + (() => 42)() ]:42\n    };\n```\n\n### RegExp literals\n一个正则表达式是字符被斜线围成的表达式。下面是一个正则表达式文字的一个例子。\n\n```javascript\n    var re = /ab+c/;\n```\n\n### 字符串字面值\n字符串字面值可以包含零个或多个字符，由双引号对或单引号对包围。字符串被限定在同种引号之间。\n你可以在字符串字面值上使用字符串对象的所有方法--JavaScript会自动将字符串字面值转换为一个临时字符串对象，调用该方法，然后废弃掉那个临时的字符串变量。你也能对字符串字面值使用类似String.length的属性：\n\n```javascript\n   \"John's cat\".length\n```\n\n除非有特别需要使用字符串对象，否则，你应当始终使用字符串字面值。\n\n在字符串中使用的特殊字符\n作为一般字符的扩展，你可以在字符串中使用特殊字符\n\n```javascript\n    \"one line \\n another line\"\n```\n以下表格列举了你能在JavaScript的字符串中使用的特殊字符。\n\n| Character | Meaning |\n| ----- | :-----: |\n| \\0 | 空字符 |\n| \\b | 退格 |\n| \\f | 换页符 |\n| \\n | 换行符 |\n| \\r | 回车符 |\n| \\t | Tab制表符 |\n| \\v | 垂直制表符 |\n| \\' | 单引号 |\n| \\\" | 双引号 |\n| \\\\ | 反斜杠字符(\\) |\n| \\XXX | 通过最多三个八进制位数x377.例如在0和指定的Latin-1编码的字符，\\251是版本符号八进制序列。 |\n| \\xXX | 由00和FF之间的两个十六进制数字XX指定的Latin-1编码的字符。例如，版权所有\\ xA9为版权符号十六进制序列。 |\n| \\uXXXX | 由四个十六进制数字XXXX规定的Unicode字符。例如，\\ u00A9为版权符号的Unicode序列。见Unicode转义序列。 |\n| \\u{XXXXX} | Unicode code point escapes. For example, \\u{2F804} is the same as the simple Unicode escapes \\uD87E\\uDC04. |\n\n转义字符\n对于那些未出现在表2.1中的字符，其所带的前导反斜线'\\'将被忽略。但是，这一用法已被废弃，应当避免使用。\n\n通过在引号前加上反斜线'\\'，可以在字符串中插入引号，这就是引号转义。例如:\n```javascript\n    var quote = \"He read \\\"The Cremation of Sam McGee\\\" by R.W. Service.\";\n    console.log(quote); // He read \"The Cremation of Sam McGee\" by R.W. Service.\n```\n\n要在字符串中插入'\\'字面值，必须转义反斜线。例如，要把文件路径 c:\\temp 赋值给一个字符串，可以采用如下方式:\n```javascript\n   var home = \"c:\\\\temp\";\n```\n\n也可以在换行之前加上反斜线以转义换行（译注：实际上就是一条语句拆成多行书写），这样反斜线和换行都不会出现在字符串的值中。\n```javascript\n   var str = \"this string \\\n   is broken \\\n   across multiple\\\n   lines.\"\n   console.log(str);   // this string is broken across multiplelines. \n```\n\nJavascript没有“heredoc”语法，但可以用行末的换行符转义和转义的换行来近似实现 \n```javascript\n    var poem = \n    \"Roses are red,\\n\\\n    Violets are blue.\\n\\\n    I'm schizophrenic,\\n\\\n    And so am I.\"\n```","slug":"语法和数据类型","published":1,"updated":"2016-05-17T10:04:47.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciob9wmvx000hzgdlcxpk4rcv","content":"<blockquote>\n<p>By plucking her petals you do not gather the beauty of the flower. </p>\n<p>本章讨论Javascript的基本语法(basic grammar)，变量声明(variable declarations)，数据类型(data types)和字面量(literals)。</p>\n</blockquote>\n<h2 id=\"基础知识-Basic\"><a href=\"#基础知识-Basic\" class=\"headerlink\" title=\"基础知识(Basic)\"></a>基础知识(Basic)</h2><p>Javascript很多语法借鉴自Java，但也受Awk, Perl和Python影响。</p>\n<p>Javascript是大小写敏感的，使用Unicode字符集。</p>\n<p>在Javascript中，语句被称为statements，并用分号分隔(;)。空格、制表符和换行符被称为空白。<br>Javascript的脚本的源文件从左到右扫描，并转换成由令牌，控制字符，行结束符，注释或空白组成的输入元素序列。<br>ECMAScript中还定义了某些关键字和字面量，并具有分号自动插入功能(ASI)来结束语句。但是，建议随时添加分号结束你的语句以避免副作用。</p>\n<h2 id=\"注释-Comments\"><a href=\"#注释-Comments\" class=\"headerlink\" title=\"注释(Comments)\"></a>注释(Comments)</h2><p>注释语法和C++和其他语言相同：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//单行注释</span></span><br><span class=\"line\"><span class=\"comment\">/* 这是一个多行注释*/</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"声明-Declarations\"><a href=\"#声明-Declarations\" class=\"headerlink\" title=\"声明(Declarations)\"></a>声明(Declarations)</h2><p>Javascript有三种声明。</p>\n<p>var 声明变量，可选择将其初始化为一个值<br>let 声明块范围局部变量(block scope local variable)，可选择将其初始化为一个值。<br>const 声明一个只读(read-only)命名常量。</p>\n<h3 id=\"变量-variables\"><a href=\"#变量-variables\" class=\"headerlink\" title=\"变量(variables)\"></a>变量(variables)</h3><p>在应用程序中，使用变量来为值命名。变量的名称称为identifiers，需要遵守一定的规则。</p>\n<p>在Javascript语言中，一个标识符(identifier)必须以字母、下划线(_)或者美元($)符号开头；后续的字符可以包含数字(0-9)。因为Javascript语言中是区分大小写的，这里所指的字母可以是(大写的)”A”到字母”Z”和小写的”a”到”z”。<br>从JavaScript 1.5版开始，你可以使用ISO 8859-1或Unicode编码的字符作标识符。你也可以使用\\uXXXX字样的转义序列Unicode escape sequences作标识符。</p>\n<h3 id=\"声明变量-Declaring-variables\"><a href=\"#声明变量-Declaring-variables\" class=\"headerlink\" title=\"声明变量(Declaring variables)\"></a>声明变量(Declaring variables)</h3><p>你可以用以下三种方式声明变量：</p>\n<ul>\n<li>使用关键词var.例如，var x = 42。这个语法可以同时用来声明局部和全局变量。</li>\n<li>直接赋值。</li>\n<li>使用关键词let。例如let y = 13。这个语法可以用来声明语句块代码段的局部变量(block scope local variable)。</li>\n</ul>\n<h3 id=\"对变量求值-Evaluation-variables\"><a href=\"#对变量求值-Evaluation-variables\" class=\"headerlink\" title=\"对变量求值(Evaluation variables)\"></a>对变量求值(Evaluation variables)</h3><p>用var或let声明的未赋初值的变量，值会被定义为undefined（即未定义值，本身也是一个值）。</p>\n<p>试图访问一个未初始化的变量会导致一个ReferenceError异常被抛出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"The value of a is \"</span>+a); <span class=\"comment\">//logs的值未定义</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"The value of b is \"</span>+b); <span class=\"comment\">//抛出ReferenceError异常</span></span><br></pre></td></tr></table></figure>\n<p>你可以使用undefined来确定变量是否已赋值。以下的代码中，变量input未被赋值，因而if条件语句的求值结果是true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> input;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(input === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">    doThis();</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    doThat();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>undefined值在布尔类型环境中会被当做false。例如，下面的代码将运行函数myFunction，因为数组myArray中的元素未被赋值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myArray = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!myArray[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">    myFunction();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数值类型环境中undefined值会被转换为NaN。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a + <span class=\"number\">2</span>; <span class=\"comment\">// Evaluates to NaN</span></span><br></pre></td></tr></table></figure>\n<p>当你对一个空变量求值时，空值null在数值类型环境中会被当作0来对待，而布尔类型环境中会被当作false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n * <span class=\"number\">32</span>); <span class=\"comment\">//logs 0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"变量的域-Variable-scope\"><a href=\"#变量的域-Variable-scope\" class=\"headerlink\" title=\"变量的域(Variable scope)\"></a>变量的域(Variable scope)</h3><p>在所有函数之外声明的变量，叫做全局变量，因为它可被当前文档中的其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在该函数内部访问。</p>\n<p>ECMAScript6之前的Javascript没有语句块作用域；相反，语句块中声明的变量将成为语句块所在代码段的局部变量。例如，如下的代码将在控制台输出5，因为x的作用域是声明了x的那个函数(或全局范围)，而不是if语句块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure>\n<p>如果使用ECMAScript6中的let声明，上述行为将发生变化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//ReferenceError: y is not defined.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"变量声明提升-Variable-hoisting\"><a href=\"#变量声明提升-Variable-hoisting\" class=\"headerlink\" title=\"变量声明提升(Variable hoisting)\"></a>变量声明提升(Variable hoisting)</h3><p>JavaScript变量的另一个特别之处是，你可以引用稍后声明的变量，而不会引发异常。这一概念称为变量声明提升(hoisting)；JavaScript变量感觉上是被“举起”或提升到了所有函数和语句之前。然而提升后的变量将返回undefined值，所以即使在使用或引用某个变量之后存在声明和初始化操作，仍将得到undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Example 1</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x === <span class=\"literal\">undefined</span>); <span class=\"comment\">//logs \"true\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Example 2</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// will return a value of undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myvar = <span class=\"string\">\"my value\"</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(myvar); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> myvar = <span class=\"string\">\"local value\"</span>;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>上面的例子，也可写作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Example 1</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x === <span class=\"literal\">undefined</span>); <span class=\"comment\">// logs \"true\"</span></span><br><span class=\"line\">x = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Example 2</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myvar = <span class=\"string\">\"my value\"</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myvar;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(myvar); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  myvar = <span class=\"string\">\"local value\"</span>;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>由于存在变量声明提升，一个函数中所有的var语句应尽可能地放在接近函数顶部的地方。这大大地提升了程序代码的清晰度。</p>\n<h3 id=\"全局变量-Global-variables\"><a href=\"#全局变量-Global-variables\" class=\"headerlink\" title=\"全局变量(Global variables)\"></a>全局变量(Global variables)</h3><p>全局变量实际上是全局对象的属性。在网页中，全局对象是window，所以你可以用形如window.variable的语法来设置和访问全局变量。</p>\n<p>因此，你可以通过制定window或frame的名字，从一个window或frame访问另一个window或frame中声明的变量。例如，设想一个叫phoneNumber的变量在文档里被声明，你可以在子框架里用phone.phoneNumber来引用它。</p>\n<h2 id=\"常量-Constants\"><a href=\"#常量-Constants\" class=\"headerlink\" title=\"常量(Constants)\"></a>常量(Constants)</h2><p>你可以用关键字const创建一个只读(read-only)的常量。常量标识符的命名规则和变量的相同：必须以字母、下划线或美元符号开头并可以包含有字母、数字或下划线。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> prefix = <span class=\"string\">'212'</span>;</span><br></pre></td></tr></table></figure>\n<p>常量不可以通过赋值改变其值，也不可以在脚本运行时重新声明。<strong>它必须被初始化为某个值。</strong></p>\n<p>常量的作用域规则与let会计作用域变量相同。若const关键字被省略了，该标识符将被视为变量。</p>\n<p>在同一个作用域下，不能用于变量或函数同样的名字来命名常量。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//THIS WILL CAUSE AN ERROR</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> f = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">// THIS WILL CAUSE AN ERROR ALSO</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> g = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> g;</span><br><span class=\"line\">    <span class=\"comment\">//statements</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据结构和类型\"><a href=\"#数据结构和类型\" class=\"headerlink\" title=\"数据结构和类型\"></a>数据结构和类型</h2><p>JavaScript语言可以识别下面7中不同类型的值：</p>\n<ul>\n<li>六种是原型的数据类型：<ol>\n<li>Boolean. 布尔值，true和false.</li>\n<li>null. 一个表明null值得特殊关键字。JavaScript是大小敏感的，因此null与Null、NULL或其他变量完全不同。</li>\n<li>undefined. 变量未定义时的属性。</li>\n<li>Number. 表示数字，例如：42或者3.14.</li>\n<li>String. 表示字符串，例如：”Hello”。</li>\n<li>Symbol(在ECMAScript6中新添加的类型)。一种数据类型，它的实例是唯一且不可改变的。</li>\n</ol>\n</li>\n<li>以及Object对象</li>\n</ul>\n<p>仅凭这些为数不多的数据类型，在你的应用程序中他们就能够执行有用的功能。</p>\n<p>Objects和functions是本语言的其他两个基本元素。你可以将对象视为存放值得命名容器，而将函数视为你的应用程序能够执行的过程(procedures)。</p>\n<h3 id=\"数据类型的转换-Data-type-conversion\"><a href=\"#数据类型的转换-Data-type-conversion\" class=\"headerlink\" title=\"数据类型的转换(Data type conversion)\"></a>数据类型的转换(Data type conversion)</h3><p>JavaScript是一种动态类型语言(dynamically typed language)。这意味着你声明变量时可以不指定数据类型，而数据会在脚本执行需要时自动转换。那么，你可以这样来定义变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> answer = <span class=\"number\">42</span>;</span><br></pre></td></tr></table></figure>\n<p>然后，你还可以给同一个变量分配一个字符串值，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer = <span class=\"string\">\"hello world!\"</span>;</span><br></pre></td></tr></table></figure>\n<p>因为JavaScript是动态类型的，这样的指定并不会提示出错。</p>\n<p>再涉及加法运算符(+)的数字和字符串表达式中，JavaScript会把数字值转换为字符串。例如，假设有如下的语句：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"string\">\"The answer is \"</span> + <span class=\"number\">42</span> <span class=\"comment\">// \"The answer is 42\"</span></span><br><span class=\"line\">y = <span class=\"number\">42</span> + <span class=\"string\">\" is the answer\"</span> <span class=\"comment\">// \"42 is the answer\"</span></span><br></pre></td></tr></table></figure>\n<p>在涉及其他运算符(如下面的减号)时，JavaScript语言不会把数字变为字符。例如(第一例是数字运算符，第二例是字符串运算符):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"37\"</span> - <span class=\"number\">7</span> <span class=\"comment\">// 30</span></span><br><span class=\"line\"><span class=\"string\">\"37\"</span> + <span class=\"number\">7</span> <span class=\"comment\">// \"377\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串转化为数字-converting-strings-to-numbers\"><a href=\"#字符串转化为数字-converting-strings-to-numbers\" class=\"headerlink\" title=\"字符串转化为数字(converting strings to numbers)\"></a>字符串转化为数字(converting strings to numbers)</h3><p>有一些方法可以将内存中表示一个数字的字符串转换为对应的数字<br>parseInt()和parseFloat()</p>\n<p>parseInt仅能够返回整数，所以使用它会丢失小数部分。另外，调用parseInt时最好总是带上进制(radix)参数，这个参数用于指定使用哪一种数制。</p>\n<h4 id=\"单目加法运算符\"><a href=\"#单目加法运算符\" class=\"headerlink\" title=\"单目加法运算符\"></a>单目加法运算符</h4><p><strong>将字符串转换为数字的另一种方法是使用单目加法运算符。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"1.1\"</span> + <span class=\"string\">\"1.1\"</span> = <span class=\"string\">\"1.11.1\"</span></span><br><span class=\"line\">(+<span class=\"string\">\"1.1\"</span>) + (+<span class=\"string\">\"1.1\"</span>) = <span class=\"number\">2.2</span>   <span class=\"comment\">// 注：加入括号为清楚起见，不是必需的。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字面值-Literals\"><a href=\"#字面值-Literals\" class=\"headerlink\" title=\"字面值(Literals)\"></a>字面值(Literals)</h2><p>(注：字面值是由语法表达式定义的常量；或通过一定字辞组成的语词表达式定义的常量)</p>\n<p>在JavaScript中，你可以使用各种字面值。这些字面值是脚本中按字面意思给出的固定的值，而不是变量。(字面值是常量，其值是固定的，而且在程序脚本运行中不可更改，比如false,3.1415,thisStringOfHelloWorld,invokedFunction: myFunction(“myArgument”))</p>\n<h3 id=\"数组字面值-Array-Literals\"><a href=\"#数组字面值-Array-Literals\" class=\"headerlink\" title=\"数组字面值(Array Literals)\"></a>数组字面值(Array Literals)</h3><p>数组字面值是一个封闭在方括号对([])中的包含有零个或多个表达式的列表，其中每个表达式代表数组的一个元素。当你使用数组字面值创建一个数组时，该数组将会以指定的值作为它的元素进行初始化，而其长度被设定为元素的个数。</p>\n<p>下面的示例用3个元素生成数组coffees，它的长度是3。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> coffees = [<span class=\"string\">\"French Roast\"</span>, <span class=\"string\">\"Colombian\"</span>, <span class=\"string\">\"Kona\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> a=[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.length); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"number\">0</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>若在顶层（全局）脚本里用字面值创建数组，JavaScript语言会在每次对包含该数组字面值的表达式时解释该数组。另一方面，在函数中使用的数组，将在每次调用函数时被创建一次。</p>\n<p>数组字面值同时也是数组对象。</p>\n<p><strong>数组字面值中的多余逗号</strong><br>你不必列举数组字面值中的所有元素。若你在同一行中连写两个逗号（,），数组中就会产生一个没被指定的元素，其初始值是undefined。以下示例创建了一个名为fish的数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fish = [<span class=\"string\">\"Lion\"</span>, , <span class=\"string\">\"Angel\"</span>];</span><br></pre></td></tr></table></figure>\n<p>这个数组中，有两个已被赋值的元素，和一个空元素，此时的数组的长度是3.</p>\n<p>若你在元素列表的尾部添加了一个逗号，它会被忽略。在下面的例子中，该数组的长度是3.并不存在myList[3]这个元素。元素列表中所有其他的逗号都表示一个新元素（的开始）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myList = [<span class=\"string\">'home'</span>, , <span class=\"string\">'school'</span>, ];</span><br></pre></td></tr></table></figure>\n<p>在下面的例子中，数组的长度是4，元素myList[0]和myList[2]缺失（译注：没被赋值，因而是undefined）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myList = [ , <span class=\"string\">'home'</span>, , <span class=\"string\">'school'</span>];</span><br></pre></td></tr></table></figure>\n<p>又一个例子，在这里该数组的长度是4，元素myList[1]和myList[3]被漏掉了。（但是）只有最后的那个逗号被忽略。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myList = [<span class=\"string\">'home'</span>, , <span class=\"string\">'school'</span>, , ];</span><br></pre></td></tr></table></figure>\n<p>理解多余的逗号（在脚本运行时会被如何处理）的含义，对于从语言层面理解JavaScript是十分重要的。但是，你自己写代码时：<strong>显式地将缺失的元素声明为undefined，将大大增加你的代码的清晰度和可维护性</strong>。</p>\n<h3 id=\"布尔字面值-Boolean-literals\"><a href=\"#布尔字面值-Boolean-literals\" class=\"headerlink\" title=\"布尔字面值(Boolean literals)\"></a>布尔字面值(Boolean literals)</h3><p>布尔类型有两种字面值：true和false。</p>\n<p>不要混淆作为布尔对象的真和假与布尔类型的原始值true和false。布尔对象是原始布尔数据类型的一个包装器。</p>\n<h3 id=\"整数-Intergers\"><a href=\"#整数-Intergers\" class=\"headerlink\" title=\"整数(Intergers)\"></a>整数(Intergers)</h3><p>整数可以被表示成十进制(基数为10)、十六进制(基数为16)以及八进制(基数为8)。</p>\n<ul>\n<li>十进制整数字组成的数字序列，不带前导0.</li>\n<li>带前导0、0O、0o的整数字面值表明它是八进制。八进制整数只能包括数字0-7。</li>\n<li>前缀0x或0X表示十六进制。十六进制整数，可以包含数字（0-9）和字母a~f或A~F。</li>\n</ul>\n<h3 id=\"浮点数字面值-Floating-point-literal\"><a href=\"#浮点数字面值-Floating-point-literal\" class=\"headerlink\" title=\"浮点数字面值(Floating-point literal)\"></a>浮点数字面值(Floating-point literal)</h3><p>浮点数字面值可以有以下的组成部分：</p>\n<ul>\n<li>一个十进制整数，它可以带符号（即前面的”+”或”-“号），</li>\n<li>一个小数点（”.”），</li>\n<li>一个小数部分（由一串十进制数表示），</li>\n<li>一个指数部分</li>\n</ul>\n<p>指数部分是以”e”或”E”开头后面跟着一个整数，可以有正负号（即前面写”+”或”-“）。一个浮点数字面值必须至少有一位数字，后接小数点或者”e”(“E”)组成。</p>\n<p>一些浮点数字面值的例子，如3.1415,-3.1415,1e12以及2E-12。</p>\n<p>简而言之，其语法是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[(+|-)][digits][.digits][(E|e)[(+|-)]digits]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"对象字面量-Object-literals\"><a href=\"#对象字面量-Object-literals\" class=\"headerlink\" title=\"对象字面量(Object literals)\"></a>对象字面量(Object literals)</h3><p>对象字面值是封闭在花括号对({})中的一个对象的零个或多个”属性名-值”对的（元素）列表。你不能在一条语句的开头就使用对象字面值，这将导致错误或非你所预想的行为，因为此时左花括号({)会被认为一个语句块的齐师傅好。</p>\n<p>以下是一个对象字面值的例子。对象car的第一个元素（译注：即一个属性双值对）定义了属性myCar；第二个元素，属性getCar，引用了一个函数（即CarTypes(“Honda”)）；第三个元素，属性special，使用了一个已有的变量（即Sales）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Sales = <span class=\"string\">\"Toyota\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CarTypes</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (name === <span class=\"string\">\"Honda\"</span>) ?</span><br><span class=\"line\">    name :</span><br><span class=\"line\">    <span class=\"string\">\"Sorry, we don't sell \"</span> + name + <span class=\"string\">\".\"</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> car = &#123; myCar: <span class=\"string\">\"Saturn\"</span>, getCar: CarTypes(<span class=\"string\">\"Honda\"</span>), special: Sales &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(car.myCar);   <span class=\"comment\">// Saturn</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(car.getCar);  <span class=\"comment\">// Honda</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(car.special); <span class=\"comment\">// Toyota</span></span><br></pre></td></tr></table></figure>\n<p>更进一步的，你可以使用数字或字符串字面值作为属性的名字，或者在另一个字面值内嵌套上一个字面值。如下的示例中使用了这些可选项</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> car = &#123; manyCars: &#123;a: <span class=\"string\">\"Saab\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"Jeep\"</span>&#125;, <span class=\"number\">7</span>: <span class=\"string\">\"Mazda\"</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(car.manyCars.b); <span class=\"comment\">// Jeep</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(car[<span class=\"number\">7</span>]); <span class=\"comment\">// Mazda</span></span><br></pre></td></tr></table></figure>\n<p>对象属性名字可以是任意字符串，包括空串。如果对象属性名字不是合法的javascript标识符，它必须用””包裹。属性的名字不合法，那么便不能用.访问属性值，而是通过类数组标记(“[]”)访问和赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unusualPropertyNames = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"\"</span>: <span class=\"string\">\"An empty string\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"!\"</span>: <span class=\"string\">\"Bang!\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unusualPropertyNames.<span class=\"string\">\"\"</span>);   <span class=\"comment\">// 语法错误: Unexpected string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unusualPropertyNames[<span class=\"string\">\"\"</span>]);  <span class=\"comment\">// An empty string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unusualPropertyNames.!);    <span class=\"comment\">// 语法错误: Unexpected token !</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unusualPropertyNames[<span class=\"string\">\"!\"</span>]); <span class=\"comment\">// Bang!</span></span><br></pre></td></tr></table></figure>\n<p>在ES2015，对象文本扩展到支持在原型设置建造，简写foo:foo分配，界定方法，得到很好的名称，并与表达式计算属性名。总之，这些也带来了对象文字和类声明紧密联系起来，让基于对象的设计得益于一些同样的便利。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//__proto__</span></span><br><span class=\"line\">    __proto__: theProtoObj,</span><br><span class=\"line\">    <span class=\"comment\">// Shorthand for 'handler:handler'</span></span><br><span class=\"line\">    handler,</span><br><span class=\"line\">    <span class=\"comment\">//Methods</span></span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">        <span class=\"comment\">//super calls</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"d\"</span> + <span class=\"keyword\">super</span>.toString();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//Computed (dynamic) property names</span></span><br><span class=\"line\">    [ <span class=\"string\">'prop_'</span> + (() =&gt; <span class=\"number\">42</span>)() ]:<span class=\"number\">42</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RegExp-literals\"><a href=\"#RegExp-literals\" class=\"headerlink\" title=\"RegExp literals\"></a>RegExp literals</h3><p>一个正则表达式是字符被斜线围成的表达式。下面是一个正则表达式文字的一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/ab+c/</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串字面值\"><a href=\"#字符串字面值\" class=\"headerlink\" title=\"字符串字面值\"></a>字符串字面值</h3><p>字符串字面值可以包含零个或多个字符，由双引号对或单引号对包围。字符串被限定在同种引号之间。<br>你可以在字符串字面值上使用字符串对象的所有方法–JavaScript会自动将字符串字面值转换为一个临时字符串对象，调用该方法，然后废弃掉那个临时的字符串变量。你也能对字符串字面值使用类似String.length的属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"John's cat\"</span>.length</span><br></pre></td></tr></table></figure>\n<p>除非有特别需要使用字符串对象，否则，你应当始终使用字符串字面值。</p>\n<p>在字符串中使用的特殊字符<br>作为一般字符的扩展，你可以在字符串中使用特殊字符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"one line \\n another line\"</span></span><br></pre></td></tr></table></figure>\n<p>以下表格列举了你能在JavaScript的字符串中使用的特殊字符。</p>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n<th style=\"text-align:center\">Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\0</td>\n<td style=\"text-align:center\">空字符</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td style=\"text-align:center\">退格</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td style=\"text-align:center\">换页符</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td style=\"text-align:center\">换行符</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td style=\"text-align:center\">回车符</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td style=\"text-align:center\">Tab制表符</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td style=\"text-align:center\">垂直制表符</td>\n</tr>\n<tr>\n<td>\\’</td>\n<td style=\"text-align:center\">单引号</td>\n</tr>\n<tr>\n<td>\\”</td>\n<td style=\"text-align:center\">双引号</td>\n</tr>\n<tr>\n<td>\\</td>\n<td style=\"text-align:center\">反斜杠字符()</td>\n</tr>\n<tr>\n<td>\\XXX</td>\n<td style=\"text-align:center\">通过最多三个八进制位数x377.例如在0和指定的Latin-1编码的字符，\\251是版本符号八进制序列。</td>\n</tr>\n<tr>\n<td>\\xXX</td>\n<td style=\"text-align:center\">由00和FF之间的两个十六进制数字XX指定的Latin-1编码的字符。例如，版权所有\\ xA9为版权符号十六进制序列。</td>\n</tr>\n<tr>\n<td>\\uXXXX</td>\n<td style=\"text-align:center\">由四个十六进制数字XXXX规定的Unicode字符。例如，\\ u00A9为版权符号的Unicode序列。见Unicode转义序列。</td>\n</tr>\n<tr>\n<td>\\u{XXXXX}</td>\n<td style=\"text-align:center\">Unicode code point escapes. For example, \\u{2F804} is the same as the simple Unicode escapes \\uD87E\\uDC04.</td>\n</tr>\n</tbody>\n</table>\n<p>转义字符<br>对于那些未出现在表2.1中的字符，其所带的前导反斜线’\\’将被忽略。但是，这一用法已被废弃，应当避免使用。</p>\n<p>通过在引号前加上反斜线’\\’，可以在字符串中插入引号，这就是引号转义。例如:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> quote = <span class=\"string\">\"He read \\\"The Cremation of Sam McGee\\\" by R.W. Service.\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(quote); <span class=\"comment\">// He read \"The Cremation of Sam McGee\" by R.W. Service.</span></span><br></pre></td></tr></table></figure></p>\n<p>要在字符串中插入’\\’字面值，必须转义反斜线。例如，要把文件路径 c:\\temp 赋值给一个字符串，可以采用如下方式:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> home = <span class=\"string\">\"c:\\\\temp\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>也可以在换行之前加上反斜线以转义换行（译注：实际上就是一条语句拆成多行书写），这样反斜线和换行都不会出现在字符串的值中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"this string \\</span><br><span class=\"line\">is broken \\</span><br><span class=\"line\">across multiple\\</span><br><span class=\"line\">lines.\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);   <span class=\"comment\">// this string is broken across multiplelines.</span></span><br></pre></td></tr></table></figure></p>\n<p>Javascript没有“heredoc”语法，但可以用行末的换行符转义和转义的换行来近似实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> poem = </span><br><span class=\"line\"><span class=\"string\">\"Roses are red,\\n\\</span><br><span class=\"line\">Violets are blue.\\n\\</span><br><span class=\"line\">I'm schizophrenic,\\n\\</span><br><span class=\"line\">And so am I.\"</span></span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<blockquote>\n<p>By plucking her petals you do not gather the beauty of the flower. </p>\n<p>本章讨论Javascript的基本语法(basic grammar)，变量声明(variable declarations)，数据类型(data types)和字面量(literals)。</p>\n</blockquote>\n<h2 id=\"基础知识-Basic\"><a href=\"#基础知识-Basic\" class=\"headerlink\" title=\"基础知识(Basic)\"></a>基础知识(Basic)</h2><p>Javascript很多语法借鉴自Java，但也受Awk, Perl和Python影响。</p>\n<p>Javascript是大小写敏感的，使用Unicode字符集。</p>\n<p>在Javascript中，语句被称为statements，并用分号分隔(;)。空格、制表符和换行符被称为空白。<br>Javascript的脚本的源文件从左到右扫描，并转换成由令牌，控制字符，行结束符，注释或空白组成的输入元素序列。<br>ECMAScript中还定义了某些关键字和字面量，并具有分号自动插入功能(ASI)来结束语句。但是，建议随时添加分号结束你的语句以避免副作用。</p>\n<h2 id=\"注释-Comments\"><a href=\"#注释-Comments\" class=\"headerlink\" title=\"注释(Comments)\"></a>注释(Comments)</h2><p>注释语法和C++和其他语言相同：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//单行注释</span></span><br><span class=\"line\"><span class=\"comment\">/* 这是一个多行注释*/</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"声明-Declarations\"><a href=\"#声明-Declarations\" class=\"headerlink\" title=\"声明(Declarations)\"></a>声明(Declarations)</h2><p>Javascript有三种声明。</p>\n<p>var 声明变量，可选择将其初始化为一个值<br>let 声明块范围局部变量(block scope local variable)，可选择将其初始化为一个值。<br>const 声明一个只读(read-only)命名常量。</p>\n<h3 id=\"变量-variables\"><a href=\"#变量-variables\" class=\"headerlink\" title=\"变量(variables)\"></a>变量(variables)</h3><p>在应用程序中，使用变量来为值命名。变量的名称称为identifiers，需要遵守一定的规则。</p>\n<p>在Javascript语言中，一个标识符(identifier)必须以字母、下划线(_)或者美元($)符号开头；后续的字符可以包含数字(0-9)。因为Javascript语言中是区分大小写的，这里所指的字母可以是(大写的)”A”到字母”Z”和小写的”a”到”z”。<br>从JavaScript 1.5版开始，你可以使用ISO 8859-1或Unicode编码的字符作标识符。你也可以使用\\uXXXX字样的转义序列Unicode escape sequences作标识符。</p>\n<h3 id=\"声明变量-Declaring-variables\"><a href=\"#声明变量-Declaring-variables\" class=\"headerlink\" title=\"声明变量(Declaring variables)\"></a>声明变量(Declaring variables)</h3><p>你可以用以下三种方式声明变量：</p>\n<ul>\n<li>使用关键词var.例如，var x = 42。这个语法可以同时用来声明局部和全局变量。</li>\n<li>直接赋值。</li>\n<li>使用关键词let。例如let y = 13。这个语法可以用来声明语句块代码段的局部变量(block scope local variable)。</li>\n</ul>\n<h3 id=\"对变量求值-Evaluation-variables\"><a href=\"#对变量求值-Evaluation-variables\" class=\"headerlink\" title=\"对变量求值(Evaluation variables)\"></a>对变量求值(Evaluation variables)</h3><p>用var或let声明的未赋初值的变量，值会被定义为undefined（即未定义值，本身也是一个值）。</p>\n<p>试图访问一个未初始化的变量会导致一个ReferenceError异常被抛出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"The value of a is \"</span>+a); <span class=\"comment\">//logs的值未定义</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"The value of b is \"</span>+b); <span class=\"comment\">//抛出ReferenceError异常</span></span><br></pre></td></tr></table></figure>\n<p>你可以使用undefined来确定变量是否已赋值。以下的代码中，变量input未被赋值，因而if条件语句的求值结果是true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> input;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(input === <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">    doThis();</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    doThat();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>undefined值在布尔类型环境中会被当做false。例如，下面的代码将运行函数myFunction，因为数组myArray中的元素未被赋值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myArray = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!myArray[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">    myFunction();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数值类型环境中undefined值会被转换为NaN。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a + <span class=\"number\">2</span>; <span class=\"comment\">// Evaluates to NaN</span></span><br></pre></td></tr></table></figure>\n<p>当你对一个空变量求值时，空值null在数值类型环境中会被当作0来对待，而布尔类型环境中会被当作false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n * <span class=\"number\">32</span>); <span class=\"comment\">//logs 0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"变量的域-Variable-scope\"><a href=\"#变量的域-Variable-scope\" class=\"headerlink\" title=\"变量的域(Variable scope)\"></a>变量的域(Variable scope)</h3><p>在所有函数之外声明的变量，叫做全局变量，因为它可被当前文档中的其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在该函数内部访问。</p>\n<p>ECMAScript6之前的Javascript没有语句块作用域；相反，语句块中声明的变量将成为语句块所在代码段的局部变量。例如，如下的代码将在控制台输出5，因为x的作用域是声明了x的那个函数(或全局范围)，而不是if语句块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure>\n<p>如果使用ECMAScript6中的let声明，上述行为将发生变化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//ReferenceError: y is not defined.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"变量声明提升-Variable-hoisting\"><a href=\"#变量声明提升-Variable-hoisting\" class=\"headerlink\" title=\"变量声明提升(Variable hoisting)\"></a>变量声明提升(Variable hoisting)</h3><p>JavaScript变量的另一个特别之处是，你可以引用稍后声明的变量，而不会引发异常。这一概念称为变量声明提升(hoisting)；JavaScript变量感觉上是被“举起”或提升到了所有函数和语句之前。然而提升后的变量将返回undefined值，所以即使在使用或引用某个变量之后存在声明和初始化操作，仍将得到undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Example 1</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x === <span class=\"literal\">undefined</span>); <span class=\"comment\">//logs \"true\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Example 2</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// will return a value of undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myvar = <span class=\"string\">\"my value\"</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(myvar); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> myvar = <span class=\"string\">\"local value\"</span>;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>上面的例子，也可写作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Example 1</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x === <span class=\"literal\">undefined</span>); <span class=\"comment\">// logs \"true\"</span></span><br><span class=\"line\">x = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Example 2</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myvar = <span class=\"string\">\"my value\"</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myvar;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(myvar); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  myvar = <span class=\"string\">\"local value\"</span>;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>由于存在变量声明提升，一个函数中所有的var语句应尽可能地放在接近函数顶部的地方。这大大地提升了程序代码的清晰度。</p>\n<h3 id=\"全局变量-Global-variables\"><a href=\"#全局变量-Global-variables\" class=\"headerlink\" title=\"全局变量(Global variables)\"></a>全局变量(Global variables)</h3><p>全局变量实际上是全局对象的属性。在网页中，全局对象是window，所以你可以用形如window.variable的语法来设置和访问全局变量。</p>\n<p>因此，你可以通过制定window或frame的名字，从一个window或frame访问另一个window或frame中声明的变量。例如，设想一个叫phoneNumber的变量在文档里被声明，你可以在子框架里用phone.phoneNumber来引用它。</p>\n<h2 id=\"常量-Constants\"><a href=\"#常量-Constants\" class=\"headerlink\" title=\"常量(Constants)\"></a>常量(Constants)</h2><p>你可以用关键字const创建一个只读(read-only)的常量。常量标识符的命名规则和变量的相同：必须以字母、下划线或美元符号开头并可以包含有字母、数字或下划线。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> prefix = <span class=\"string\">'212'</span>;</span><br></pre></td></tr></table></figure>\n<p>常量不可以通过赋值改变其值，也不可以在脚本运行时重新声明。<strong>它必须被初始化为某个值。</strong></p>\n<p>常量的作用域规则与let会计作用域变量相同。若const关键字被省略了，该标识符将被视为变量。</p>\n<p>在同一个作用域下，不能用于变量或函数同样的名字来命名常量。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//THIS WILL CAUSE AN ERROR</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> f = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">// THIS WILL CAUSE AN ERROR ALSO</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> g = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> g;</span><br><span class=\"line\">    <span class=\"comment\">//statements</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据结构和类型\"><a href=\"#数据结构和类型\" class=\"headerlink\" title=\"数据结构和类型\"></a>数据结构和类型</h2><p>JavaScript语言可以识别下面7中不同类型的值：</p>\n<ul>\n<li>六种是原型的数据类型：<ol>\n<li>Boolean. 布尔值，true和false.</li>\n<li>null. 一个表明null值得特殊关键字。JavaScript是大小敏感的，因此null与Null、NULL或其他变量完全不同。</li>\n<li>undefined. 变量未定义时的属性。</li>\n<li>Number. 表示数字，例如：42或者3.14.</li>\n<li>String. 表示字符串，例如：”Hello”。</li>\n<li>Symbol(在ECMAScript6中新添加的类型)。一种数据类型，它的实例是唯一且不可改变的。</li>\n</ol>\n</li>\n<li>以及Object对象</li>\n</ul>\n<p>仅凭这些为数不多的数据类型，在你的应用程序中他们就能够执行有用的功能。</p>\n<p>Objects和functions是本语言的其他两个基本元素。你可以将对象视为存放值得命名容器，而将函数视为你的应用程序能够执行的过程(procedures)。</p>\n<h3 id=\"数据类型的转换-Data-type-conversion\"><a href=\"#数据类型的转换-Data-type-conversion\" class=\"headerlink\" title=\"数据类型的转换(Data type conversion)\"></a>数据类型的转换(Data type conversion)</h3><p>JavaScript是一种动态类型语言(dynamically typed language)。这意味着你声明变量时可以不指定数据类型，而数据会在脚本执行需要时自动转换。那么，你可以这样来定义变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> answer = <span class=\"number\">42</span>;</span><br></pre></td></tr></table></figure>\n<p>然后，你还可以给同一个变量分配一个字符串值，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer = <span class=\"string\">\"hello world!\"</span>;</span><br></pre></td></tr></table></figure>\n<p>因为JavaScript是动态类型的，这样的指定并不会提示出错。</p>\n<p>再涉及加法运算符(+)的数字和字符串表达式中，JavaScript会把数字值转换为字符串。例如，假设有如下的语句：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"string\">\"The answer is \"</span> + <span class=\"number\">42</span> <span class=\"comment\">// \"The answer is 42\"</span></span><br><span class=\"line\">y = <span class=\"number\">42</span> + <span class=\"string\">\" is the answer\"</span> <span class=\"comment\">// \"42 is the answer\"</span></span><br></pre></td></tr></table></figure>\n<p>在涉及其他运算符(如下面的减号)时，JavaScript语言不会把数字变为字符。例如(第一例是数字运算符，第二例是字符串运算符):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"37\"</span> - <span class=\"number\">7</span> <span class=\"comment\">// 30</span></span><br><span class=\"line\"><span class=\"string\">\"37\"</span> + <span class=\"number\">7</span> <span class=\"comment\">// \"377\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串转化为数字-converting-strings-to-numbers\"><a href=\"#字符串转化为数字-converting-strings-to-numbers\" class=\"headerlink\" title=\"字符串转化为数字(converting strings to numbers)\"></a>字符串转化为数字(converting strings to numbers)</h3><p>有一些方法可以将内存中表示一个数字的字符串转换为对应的数字<br>parseInt()和parseFloat()</p>\n<p>parseInt仅能够返回整数，所以使用它会丢失小数部分。另外，调用parseInt时最好总是带上进制(radix)参数，这个参数用于指定使用哪一种数制。</p>\n<h4 id=\"单目加法运算符\"><a href=\"#单目加法运算符\" class=\"headerlink\" title=\"单目加法运算符\"></a>单目加法运算符</h4><p><strong>将字符串转换为数字的另一种方法是使用单目加法运算符。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"1.1\"</span> + <span class=\"string\">\"1.1\"</span> = <span class=\"string\">\"1.11.1\"</span></span><br><span class=\"line\">(+<span class=\"string\">\"1.1\"</span>) + (+<span class=\"string\">\"1.1\"</span>) = <span class=\"number\">2.2</span>   <span class=\"comment\">// 注：加入括号为清楚起见，不是必需的。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字面值-Literals\"><a href=\"#字面值-Literals\" class=\"headerlink\" title=\"字面值(Literals)\"></a>字面值(Literals)</h2><p>(注：字面值是由语法表达式定义的常量；或通过一定字辞组成的语词表达式定义的常量)</p>\n<p>在JavaScript中，你可以使用各种字面值。这些字面值是脚本中按字面意思给出的固定的值，而不是变量。(字面值是常量，其值是固定的，而且在程序脚本运行中不可更改，比如false,3.1415,thisStringOfHelloWorld,invokedFunction: myFunction(“myArgument”))</p>\n<h3 id=\"数组字面值-Array-Literals\"><a href=\"#数组字面值-Array-Literals\" class=\"headerlink\" title=\"数组字面值(Array Literals)\"></a>数组字面值(Array Literals)</h3><p>数组字面值是一个封闭在方括号对([])中的包含有零个或多个表达式的列表，其中每个表达式代表数组的一个元素。当你使用数组字面值创建一个数组时，该数组将会以指定的值作为它的元素进行初始化，而其长度被设定为元素的个数。</p>\n<p>下面的示例用3个元素生成数组coffees，它的长度是3。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> coffees = [<span class=\"string\">\"French Roast\"</span>, <span class=\"string\">\"Colombian\"</span>, <span class=\"string\">\"Kona\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> a=[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.length); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"number\">0</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>若在顶层（全局）脚本里用字面值创建数组，JavaScript语言会在每次对包含该数组字面值的表达式时解释该数组。另一方面，在函数中使用的数组，将在每次调用函数时被创建一次。</p>\n<p>数组字面值同时也是数组对象。</p>\n<p><strong>数组字面值中的多余逗号</strong><br>你不必列举数组字面值中的所有元素。若你在同一行中连写两个逗号（,），数组中就会产生一个没被指定的元素，其初始值是undefined。以下示例创建了一个名为fish的数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fish = [<span class=\"string\">\"Lion\"</span>, , <span class=\"string\">\"Angel\"</span>];</span><br></pre></td></tr></table></figure>\n<p>这个数组中，有两个已被赋值的元素，和一个空元素，此时的数组的长度是3.</p>\n<p>若你在元素列表的尾部添加了一个逗号，它会被忽略。在下面的例子中，该数组的长度是3.并不存在myList[3]这个元素。元素列表中所有其他的逗号都表示一个新元素（的开始）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myList = [<span class=\"string\">'home'</span>, , <span class=\"string\">'school'</span>, ];</span><br></pre></td></tr></table></figure>\n<p>在下面的例子中，数组的长度是4，元素myList[0]和myList[2]缺失（译注：没被赋值，因而是undefined）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myList = [ , <span class=\"string\">'home'</span>, , <span class=\"string\">'school'</span>];</span><br></pre></td></tr></table></figure>\n<p>又一个例子，在这里该数组的长度是4，元素myList[1]和myList[3]被漏掉了。（但是）只有最后的那个逗号被忽略。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myList = [<span class=\"string\">'home'</span>, , <span class=\"string\">'school'</span>, , ];</span><br></pre></td></tr></table></figure>\n<p>理解多余的逗号（在脚本运行时会被如何处理）的含义，对于从语言层面理解JavaScript是十分重要的。但是，你自己写代码时：<strong>显式地将缺失的元素声明为undefined，将大大增加你的代码的清晰度和可维护性</strong>。</p>\n<h3 id=\"布尔字面值-Boolean-literals\"><a href=\"#布尔字面值-Boolean-literals\" class=\"headerlink\" title=\"布尔字面值(Boolean literals)\"></a>布尔字面值(Boolean literals)</h3><p>布尔类型有两种字面值：true和false。</p>\n<p>不要混淆作为布尔对象的真和假与布尔类型的原始值true和false。布尔对象是原始布尔数据类型的一个包装器。</p>\n<h3 id=\"整数-Intergers\"><a href=\"#整数-Intergers\" class=\"headerlink\" title=\"整数(Intergers)\"></a>整数(Intergers)</h3><p>整数可以被表示成十进制(基数为10)、十六进制(基数为16)以及八进制(基数为8)。</p>\n<ul>\n<li>十进制整数字组成的数字序列，不带前导0.</li>\n<li>带前导0、0O、0o的整数字面值表明它是八进制。八进制整数只能包括数字0-7。</li>\n<li>前缀0x或0X表示十六进制。十六进制整数，可以包含数字（0-9）和字母a~f或A~F。</li>\n</ul>\n<h3 id=\"浮点数字面值-Floating-point-literal\"><a href=\"#浮点数字面值-Floating-point-literal\" class=\"headerlink\" title=\"浮点数字面值(Floating-point literal)\"></a>浮点数字面值(Floating-point literal)</h3><p>浮点数字面值可以有以下的组成部分：</p>\n<ul>\n<li>一个十进制整数，它可以带符号（即前面的”+”或”-“号），</li>\n<li>一个小数点（”.”），</li>\n<li>一个小数部分（由一串十进制数表示），</li>\n<li>一个指数部分</li>\n</ul>\n<p>指数部分是以”e”或”E”开头后面跟着一个整数，可以有正负号（即前面写”+”或”-“）。一个浮点数字面值必须至少有一位数字，后接小数点或者”e”(“E”)组成。</p>\n<p>一些浮点数字面值的例子，如3.1415,-3.1415,1e12以及2E-12。</p>\n<p>简而言之，其语法是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[(+|-)][digits][.digits][(E|e)[(+|-)]digits]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"对象字面量-Object-literals\"><a href=\"#对象字面量-Object-literals\" class=\"headerlink\" title=\"对象字面量(Object literals)\"></a>对象字面量(Object literals)</h3><p>对象字面值是封闭在花括号对({})中的一个对象的零个或多个”属性名-值”对的（元素）列表。你不能在一条语句的开头就使用对象字面值，这将导致错误或非你所预想的行为，因为此时左花括号({)会被认为一个语句块的齐师傅好。</p>\n<p>以下是一个对象字面值的例子。对象car的第一个元素（译注：即一个属性双值对）定义了属性myCar；第二个元素，属性getCar，引用了一个函数（即CarTypes(“Honda”)）；第三个元素，属性special，使用了一个已有的变量（即Sales）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Sales = <span class=\"string\">\"Toyota\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CarTypes</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (name === <span class=\"string\">\"Honda\"</span>) ?</span><br><span class=\"line\">    name :</span><br><span class=\"line\">    <span class=\"string\">\"Sorry, we don't sell \"</span> + name + <span class=\"string\">\".\"</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> car = &#123; myCar: <span class=\"string\">\"Saturn\"</span>, getCar: CarTypes(<span class=\"string\">\"Honda\"</span>), special: Sales &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(car.myCar);   <span class=\"comment\">// Saturn</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(car.getCar);  <span class=\"comment\">// Honda</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(car.special); <span class=\"comment\">// Toyota</span></span><br></pre></td></tr></table></figure>\n<p>更进一步的，你可以使用数字或字符串字面值作为属性的名字，或者在另一个字面值内嵌套上一个字面值。如下的示例中使用了这些可选项</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> car = &#123; manyCars: &#123;a: <span class=\"string\">\"Saab\"</span>, <span class=\"string\">\"b\"</span>: <span class=\"string\">\"Jeep\"</span>&#125;, <span class=\"number\">7</span>: <span class=\"string\">\"Mazda\"</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(car.manyCars.b); <span class=\"comment\">// Jeep</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(car[<span class=\"number\">7</span>]); <span class=\"comment\">// Mazda</span></span><br></pre></td></tr></table></figure>\n<p>对象属性名字可以是任意字符串，包括空串。如果对象属性名字不是合法的javascript标识符，它必须用””包裹。属性的名字不合法，那么便不能用.访问属性值，而是通过类数组标记(“[]”)访问和赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unusualPropertyNames = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"\"</span>: <span class=\"string\">\"An empty string\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"!\"</span>: <span class=\"string\">\"Bang!\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unusualPropertyNames.<span class=\"string\">\"\"</span>);   <span class=\"comment\">// 语法错误: Unexpected string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unusualPropertyNames[<span class=\"string\">\"\"</span>]);  <span class=\"comment\">// An empty string</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unusualPropertyNames.!);    <span class=\"comment\">// 语法错误: Unexpected token !</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unusualPropertyNames[<span class=\"string\">\"!\"</span>]); <span class=\"comment\">// Bang!</span></span><br></pre></td></tr></table></figure>\n<p>在ES2015，对象文本扩展到支持在原型设置建造，简写foo:foo分配，界定方法，得到很好的名称，并与表达式计算属性名。总之，这些也带来了对象文字和类声明紧密联系起来，让基于对象的设计得益于一些同样的便利。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//__proto__</span></span><br><span class=\"line\">    __proto__: theProtoObj,</span><br><span class=\"line\">    <span class=\"comment\">// Shorthand for 'handler:handler'</span></span><br><span class=\"line\">    handler,</span><br><span class=\"line\">    <span class=\"comment\">//Methods</span></span><br><span class=\"line\">    toString()&#123;</span><br><span class=\"line\">        <span class=\"comment\">//super calls</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"d\"</span> + <span class=\"keyword\">super</span>.toString();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//Computed (dynamic) property names</span></span><br><span class=\"line\">    [ <span class=\"string\">'prop_'</span> + (() =&gt; <span class=\"number\">42</span>)() ]:<span class=\"number\">42</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RegExp-literals\"><a href=\"#RegExp-literals\" class=\"headerlink\" title=\"RegExp literals\"></a>RegExp literals</h3><p>一个正则表达式是字符被斜线围成的表达式。下面是一个正则表达式文字的一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/ab+c/</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串字面值\"><a href=\"#字符串字面值\" class=\"headerlink\" title=\"字符串字面值\"></a>字符串字面值</h3><p>字符串字面值可以包含零个或多个字符，由双引号对或单引号对包围。字符串被限定在同种引号之间。<br>你可以在字符串字面值上使用字符串对象的所有方法–JavaScript会自动将字符串字面值转换为一个临时字符串对象，调用该方法，然后废弃掉那个临时的字符串变量。你也能对字符串字面值使用类似String.length的属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"John's cat\"</span>.length</span><br></pre></td></tr></table></figure>\n<p>除非有特别需要使用字符串对象，否则，你应当始终使用字符串字面值。</p>\n<p>在字符串中使用的特殊字符<br>作为一般字符的扩展，你可以在字符串中使用特殊字符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"one line \\n another line\"</span></span><br></pre></td></tr></table></figure>\n<p>以下表格列举了你能在JavaScript的字符串中使用的特殊字符。</p>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n<th style=\"text-align:center\">Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\0</td>\n<td style=\"text-align:center\">空字符</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td style=\"text-align:center\">退格</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td style=\"text-align:center\">换页符</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td style=\"text-align:center\">换行符</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td style=\"text-align:center\">回车符</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td style=\"text-align:center\">Tab制表符</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td style=\"text-align:center\">垂直制表符</td>\n</tr>\n<tr>\n<td>\\’</td>\n<td style=\"text-align:center\">单引号</td>\n</tr>\n<tr>\n<td>\\”</td>\n<td style=\"text-align:center\">双引号</td>\n</tr>\n<tr>\n<td>\\</td>\n<td style=\"text-align:center\">反斜杠字符()</td>\n</tr>\n<tr>\n<td>\\XXX</td>\n<td style=\"text-align:center\">通过最多三个八进制位数x377.例如在0和指定的Latin-1编码的字符，\\251是版本符号八进制序列。</td>\n</tr>\n<tr>\n<td>\\xXX</td>\n<td style=\"text-align:center\">由00和FF之间的两个十六进制数字XX指定的Latin-1编码的字符。例如，版权所有\\ xA9为版权符号十六进制序列。</td>\n</tr>\n<tr>\n<td>\\uXXXX</td>\n<td style=\"text-align:center\">由四个十六进制数字XXXX规定的Unicode字符。例如，\\ u00A9为版权符号的Unicode序列。见Unicode转义序列。</td>\n</tr>\n<tr>\n<td>\\u{XXXXX}</td>\n<td style=\"text-align:center\">Unicode code point escapes. For example, \\u{2F804} is the same as the simple Unicode escapes \\uD87E\\uDC04.</td>\n</tr>\n</tbody>\n</table>\n<p>转义字符<br>对于那些未出现在表2.1中的字符，其所带的前导反斜线’\\’将被忽略。但是，这一用法已被废弃，应当避免使用。</p>\n<p>通过在引号前加上反斜线’\\’，可以在字符串中插入引号，这就是引号转义。例如:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> quote = <span class=\"string\">\"He read \\\"The Cremation of Sam McGee\\\" by R.W. Service.\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(quote); <span class=\"comment\">// He read \"The Cremation of Sam McGee\" by R.W. Service.</span></span><br></pre></td></tr></table></figure></p>\n<p>要在字符串中插入’\\’字面值，必须转义反斜线。例如，要把文件路径 c:\\temp 赋值给一个字符串，可以采用如下方式:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> home = <span class=\"string\">\"c:\\\\temp\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>也可以在换行之前加上反斜线以转义换行（译注：实际上就是一条语句拆成多行书写），这样反斜线和换行都不会出现在字符串的值中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"this string \\</span><br><span class=\"line\">is broken \\</span><br><span class=\"line\">across multiple\\</span><br><span class=\"line\">lines.\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);   <span class=\"comment\">// this string is broken across multiplelines.</span></span><br></pre></td></tr></table></figure></p>\n<p>Javascript没有“heredoc”语法，但可以用行末的换行符转义和转义的换行来近似实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> poem = </span><br><span class=\"line\"><span class=\"string\">\"Roses are red,\\n\\</span><br><span class=\"line\">Violets are blue.\\n\\</span><br><span class=\"line\">I'm schizophrenic,\\n\\</span><br><span class=\"line\">And so am I.\"</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"模块系统","date":"2016-03-17T16:17:04.000Z","_content":"## 系统模块的演进\n模块系统主要解决模块的定义、依赖和导出，现已经存在的模块系统有如下几种。\n  \n### `<script>`标签\n```javascript\n    <script src=\"module1.js\"></script>\n    <script src=\"module2.js\"></script>\n    <script src=\"module3.js\"></script>\n```\n这是最原始的JavaScript文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在window对象中，不同模块的接口调用都是一个作用域，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如YUI库。  \n\n这种原始的加载方式暴露了一些显而易见的弊端：  \n1. 全局 作用于下容易造成变量冲突  \n2. 文件只能按照`<script>`的书写顺序进行加载\n3. 开发人员必须主观解决模块和代码库的依赖关系\n4. 在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪\n\n### CommonJS\n服务器端的Node.js遵循[CommonJS规范](http://wiki.commonjs.org/wiki/CommonJS)，该规范的核心思想是允许模块通过require方法来同步加载所要依赖的其他模块，然后通过exports或module.exports来导出需要暴露的接口。\n```javascript\n    require(\"module\");  \n    require(\"../file.js\");  \n    exports.doSth = function(){};\n    module.exports = someThing;\n```\n优点：\n1. 服务器端模块便于重用\n2. NPM中已经有将近20万个可以使用的模块包\n3. 简单并容易使用\n\n缺点：\n1. 同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的\n2. 不能非阻塞的并行加载多个模块\n\n实现：\n1. 服务器端的Node.js\n2. Browserify，浏览器端的CommonJS实现，可以使用NPM的模块，但是编译打包后的文件体积可能很大\n3. modules-webmake，类似Browserify，还不如Browserify灵活\n4. wreq，Browserify的前身\n\n### AMD\n[Asynchronous Module Definition](https://github.com/amdjs/amdjs-api) 规范其实只有一个主要的接口define(id?,dependencies?,factory)，它要在声明模块的时候指定所有的依赖dependences，并且还要当做形参传到factory中，对于依赖的模块提前执行，依赖前置。\n```javascript\n    define(\"module\",[\"dep1\".\"dep2\"],function(d1,d2){\n        return someThing;\n    });\n    require([\"module\",\"../files\"],function(module,file){\n        doSomething();\n    })\n```\n优点：\n1. 适合在浏览器环境中异步加载模块\n2. 可以并行加载多个模块\n\n缺点：\n1. 提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不顺畅\n2. 不符合通用的模块化思维方式，是一种妥协的实现\n\n实现：\n- [RequireJS](http://requirejs.org/)\n- [curl](https://github.com/cujojs/curl)\n\n### CMD\n[Common Module Definition](https://github.com/cmdjs/specification/blob/master/draft/module.md)规范和AMD很相似，尽量保持简单，并与ComminJS和Node.js的Modules规范保持了很大的兼容性。  \n```javascript\n    define(function(require,exports,module){\n        var $ = require(\"jquery\");\n        exports.doSomething = ...\n        module.exports = ...\n    })\n```\n优点：\n1. 依赖就近，延迟执行\n2. 可以很容易在Nod.js中执行\n\n缺点：\n1. 依赖SPM打包，模块的加载逻辑偏重\n\n实现：\n- [Sea.js](http://seajs.org/)\n- [coolie](https://github.com/cloudcome/coolie)\n\n### UMD\n[Universal Module Definition](https://github.com/umdjs/umd) 规范类似于兼容 CommonJS 和 AMD的语法糖，是模块定义的跨平台解决方案。\n\n### ES6模块\nEcmaScript6 标准增加了JavaScript语言层面的模块体系定义。[ES6模块](http://es6.ruanyifeng.com/#docs/module)的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD都只能在运行时确认这些东西。\n```javascript\n    import \"jquery\";\n    export function doStuff(){}\n    module \"localModule\" {}\n```\n优点：\n1. 容易进行静态分析\n2. 面向未来的EcmaScript标准\n\n缺点：\n1. 原生浏览器端还没有实现该标准\n2. 全新的命令字，新版的Node.js才支持\n\n实现：\n- [Babel](https://babeljs.io/)\n\n### 期望的模块系统\n可以兼容多种模块风格，尽量可以利用已有的代码，不仅仅是Javascript模块化，还有CSS、图片、字体等资源也需要模块化。\n\n## 前端模块加载\n前端模块要在客户端中执行，所以他们需要增量加载到浏览器中。  \n模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴。  \n***分块传输***，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案。  \n要实现模块的按需加载，就需要一个对整个代码库的模块进行静态分析、编译打包的过程。\n\n## 所有资源都是模块\n在上面的分析过程中，我们提到的模块仅仅是指JavaScript模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、HTML 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 coffeescript、 less、 sass、众多的模板库、多语言系统（i18n）等等。\n\n如果他们都可以视作模块，并且都可以通过require的方式来加载，将带来优雅的开发体验，比如：\n```javascript\n    require(\"./style.css\");\n    require(\"./style.less\");\n    require(\"./template.jade\");\n    require(\"./image.png\");\n```\n\n## 静态分析\n在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的记载其来处理。比如一个用LESS写的样式模块，可以先用LESS加载器将它转成一个CSS模块，再通过CSS模块把他插入到页面的<script>标签中执行。Webpack就是这样的需求中应运而生。\n同时，为了能利用已经存在的各种框架、库和已经写好的文件，我们还需要一个模块加载的兼容策略，来避免重写所有的模块。","source":"_posts/模块系统.md","raw":"---\ntitle: 模块系统\ndate: 2016-03-18 00:17:04\ntags:\n- webpack\n- 模块系统\ncategories: 教程\n---\n## 系统模块的演进\n模块系统主要解决模块的定义、依赖和导出，现已经存在的模块系统有如下几种。\n  \n### `<script>`标签\n```javascript\n    <script src=\"module1.js\"></script>\n    <script src=\"module2.js\"></script>\n    <script src=\"module3.js\"></script>\n```\n这是最原始的JavaScript文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在window对象中，不同模块的接口调用都是一个作用域，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如YUI库。  \n\n这种原始的加载方式暴露了一些显而易见的弊端：  \n1. 全局 作用于下容易造成变量冲突  \n2. 文件只能按照`<script>`的书写顺序进行加载\n3. 开发人员必须主观解决模块和代码库的依赖关系\n4. 在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪\n\n### CommonJS\n服务器端的Node.js遵循[CommonJS规范](http://wiki.commonjs.org/wiki/CommonJS)，该规范的核心思想是允许模块通过require方法来同步加载所要依赖的其他模块，然后通过exports或module.exports来导出需要暴露的接口。\n```javascript\n    require(\"module\");  \n    require(\"../file.js\");  \n    exports.doSth = function(){};\n    module.exports = someThing;\n```\n优点：\n1. 服务器端模块便于重用\n2. NPM中已经有将近20万个可以使用的模块包\n3. 简单并容易使用\n\n缺点：\n1. 同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的\n2. 不能非阻塞的并行加载多个模块\n\n实现：\n1. 服务器端的Node.js\n2. Browserify，浏览器端的CommonJS实现，可以使用NPM的模块，但是编译打包后的文件体积可能很大\n3. modules-webmake，类似Browserify，还不如Browserify灵活\n4. wreq，Browserify的前身\n\n### AMD\n[Asynchronous Module Definition](https://github.com/amdjs/amdjs-api) 规范其实只有一个主要的接口define(id?,dependencies?,factory)，它要在声明模块的时候指定所有的依赖dependences，并且还要当做形参传到factory中，对于依赖的模块提前执行，依赖前置。\n```javascript\n    define(\"module\",[\"dep1\".\"dep2\"],function(d1,d2){\n        return someThing;\n    });\n    require([\"module\",\"../files\"],function(module,file){\n        doSomething();\n    })\n```\n优点：\n1. 适合在浏览器环境中异步加载模块\n2. 可以并行加载多个模块\n\n缺点：\n1. 提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不顺畅\n2. 不符合通用的模块化思维方式，是一种妥协的实现\n\n实现：\n- [RequireJS](http://requirejs.org/)\n- [curl](https://github.com/cujojs/curl)\n\n### CMD\n[Common Module Definition](https://github.com/cmdjs/specification/blob/master/draft/module.md)规范和AMD很相似，尽量保持简单，并与ComminJS和Node.js的Modules规范保持了很大的兼容性。  \n```javascript\n    define(function(require,exports,module){\n        var $ = require(\"jquery\");\n        exports.doSomething = ...\n        module.exports = ...\n    })\n```\n优点：\n1. 依赖就近，延迟执行\n2. 可以很容易在Nod.js中执行\n\n缺点：\n1. 依赖SPM打包，模块的加载逻辑偏重\n\n实现：\n- [Sea.js](http://seajs.org/)\n- [coolie](https://github.com/cloudcome/coolie)\n\n### UMD\n[Universal Module Definition](https://github.com/umdjs/umd) 规范类似于兼容 CommonJS 和 AMD的语法糖，是模块定义的跨平台解决方案。\n\n### ES6模块\nEcmaScript6 标准增加了JavaScript语言层面的模块体系定义。[ES6模块](http://es6.ruanyifeng.com/#docs/module)的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD都只能在运行时确认这些东西。\n```javascript\n    import \"jquery\";\n    export function doStuff(){}\n    module \"localModule\" {}\n```\n优点：\n1. 容易进行静态分析\n2. 面向未来的EcmaScript标准\n\n缺点：\n1. 原生浏览器端还没有实现该标准\n2. 全新的命令字，新版的Node.js才支持\n\n实现：\n- [Babel](https://babeljs.io/)\n\n### 期望的模块系统\n可以兼容多种模块风格，尽量可以利用已有的代码，不仅仅是Javascript模块化，还有CSS、图片、字体等资源也需要模块化。\n\n## 前端模块加载\n前端模块要在客户端中执行，所以他们需要增量加载到浏览器中。  \n模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴。  \n***分块传输***，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案。  \n要实现模块的按需加载，就需要一个对整个代码库的模块进行静态分析、编译打包的过程。\n\n## 所有资源都是模块\n在上面的分析过程中，我们提到的模块仅仅是指JavaScript模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、HTML 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 coffeescript、 less、 sass、众多的模板库、多语言系统（i18n）等等。\n\n如果他们都可以视作模块，并且都可以通过require的方式来加载，将带来优雅的开发体验，比如：\n```javascript\n    require(\"./style.css\");\n    require(\"./style.less\");\n    require(\"./template.jade\");\n    require(\"./image.png\");\n```\n\n## 静态分析\n在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的记载其来处理。比如一个用LESS写的样式模块，可以先用LESS加载器将它转成一个CSS模块，再通过CSS模块把他插入到页面的<script>标签中执行。Webpack就是这样的需求中应运而生。\n同时，为了能利用已经存在的各种框架、库和已经写好的文件，我们还需要一个模块加载的兼容策略，来避免重写所有的模块。","slug":"模块系统","published":1,"updated":"2016-05-16T02:11:32.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciob9wmw0000kzgdlpki3bjgv","content":"<h2 id=\"系统模块的演进\"><a href=\"#系统模块的演进\" class=\"headerlink\" title=\"系统模块的演进\"></a>系统模块的演进</h2><p>模块系统主要解决模块的定义、依赖和导出，现已经存在的模块系统有如下几种。</p>\n<h3 id=\"lt-script-gt-标签\"><a href=\"#lt-script-gt-标签\" class=\"headerlink\" title=\"&lt;script&gt;标签\"></a><code>&lt;script&gt;</code>标签</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"module1.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"module2.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"module3.js\"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>这是最原始的JavaScript文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在window对象中，不同模块的接口调用都是一个作用域，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如YUI库。  </p>\n<p>这种原始的加载方式暴露了一些显而易见的弊端：  </p>\n<ol>\n<li>全局 作用于下容易造成变量冲突  </li>\n<li>文件只能按照<code>&lt;script&gt;</code>的书写顺序进行加载</li>\n<li>开发人员必须主观解决模块和代码库的依赖关系</li>\n<li>在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪</li>\n</ol>\n<h3 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h3><p>服务器端的Node.js遵循<a href=\"http://wiki.commonjs.org/wiki/CommonJS\" target=\"_blank\" rel=\"external\">CommonJS规范</a>，该规范的核心思想是允许模块通过require方法来同步加载所要依赖的其他模块，然后通过exports或module.exports来导出需要暴露的接口。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"module\"</span>);  </span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"../file.js\"</span>);  </span><br><span class=\"line\">exports.doSth = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = someThing;</span><br></pre></td></tr></table></figure></p>\n<p>优点：</p>\n<ol>\n<li>服务器端模块便于重用</li>\n<li>NPM中已经有将近20万个可以使用的模块包</li>\n<li>简单并容易使用</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的</li>\n<li>不能非阻塞的并行加载多个模块</li>\n</ol>\n<p>实现：</p>\n<ol>\n<li>服务器端的Node.js</li>\n<li>Browserify，浏览器端的CommonJS实现，可以使用NPM的模块，但是编译打包后的文件体积可能很大</li>\n<li>modules-webmake，类似Browserify，还不如Browserify灵活</li>\n<li>wreq，Browserify的前身</li>\n</ol>\n<h3 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h3><p><a href=\"https://github.com/amdjs/amdjs-api\" target=\"_blank\" rel=\"external\">Asynchronous Module Definition</a> 规范其实只有一个主要的接口define(id?,dependencies?,factory)，它要在声明模块的时候指定所有的依赖dependences，并且还要当做形参传到factory中，对于依赖的模块提前执行，依赖前置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">\"module\"</span>,[<span class=\"string\">\"dep1\"</span>.<span class=\"string\">\"dep2\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d1,d2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> someThing;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"module\"</span>,<span class=\"string\">\"../files\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module,file</span>)</span>&#123;</span><br><span class=\"line\">    doSomething();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>优点：</p>\n<ol>\n<li>适合在浏览器环境中异步加载模块</li>\n<li>可以并行加载多个模块</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不顺畅</li>\n<li>不符合通用的模块化思维方式，是一种妥协的实现</li>\n</ol>\n<p>实现：</p>\n<ul>\n<li><a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"external\">RequireJS</a></li>\n<li><a href=\"https://github.com/cujojs/curl\" target=\"_blank\" rel=\"external\">curl</a></li>\n</ul>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p><a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\" target=\"_blank\" rel=\"external\">Common Module Definition</a>规范和AMD很相似，尽量保持简单，并与ComminJS和Node.js的Modules规范保持了很大的兼容性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require,exports,module</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">\"jquery\"</span>);</span><br><span class=\"line\">    exports.doSomething = ...</span><br><span class=\"line\">    module.exports = ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>优点：</p>\n<ol>\n<li>依赖就近，延迟执行</li>\n<li>可以很容易在Nod.js中执行</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>依赖SPM打包，模块的加载逻辑偏重</li>\n</ol>\n<p>实现：</p>\n<ul>\n<li><a href=\"http://seajs.org/\" target=\"_blank\" rel=\"external\">Sea.js</a></li>\n<li><a href=\"https://github.com/cloudcome/coolie\" target=\"_blank\" rel=\"external\">coolie</a></li>\n</ul>\n<h3 id=\"UMD\"><a href=\"#UMD\" class=\"headerlink\" title=\"UMD\"></a>UMD</h3><p><a href=\"https://github.com/umdjs/umd\" target=\"_blank\" rel=\"external\">Universal Module Definition</a> 规范类似于兼容 CommonJS 和 AMD的语法糖，是模块定义的跨平台解决方案。</p>\n<h3 id=\"ES6模块\"><a href=\"#ES6模块\" class=\"headerlink\" title=\"ES6模块\"></a>ES6模块</h3><p>EcmaScript6 标准增加了JavaScript语言层面的模块体系定义。<a href=\"http://es6.ruanyifeng.com/#docs/module\" target=\"_blank\" rel=\"external\">ES6模块</a>的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD都只能在运行时确认这些东西。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"jquery\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStuff</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span> <span class=\"string\">\"localModule\"</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>优点：</p>\n<ol>\n<li>容易进行静态分析</li>\n<li>面向未来的EcmaScript标准</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>原生浏览器端还没有实现该标准</li>\n<li>全新的命令字，新版的Node.js才支持</li>\n</ol>\n<p>实现：</p>\n<ul>\n<li><a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"external\">Babel</a></li>\n</ul>\n<h3 id=\"期望的模块系统\"><a href=\"#期望的模块系统\" class=\"headerlink\" title=\"期望的模块系统\"></a>期望的模块系统</h3><p>可以兼容多种模块风格，尽量可以利用已有的代码，不仅仅是Javascript模块化，还有CSS、图片、字体等资源也需要模块化。</p>\n<h2 id=\"前端模块加载\"><a href=\"#前端模块加载\" class=\"headerlink\" title=\"前端模块加载\"></a>前端模块加载</h2><p>前端模块要在客户端中执行，所以他们需要增量加载到浏览器中。<br>模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴。<br><strong><em>分块传输</em></strong>，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案。<br>要实现模块的按需加载，就需要一个对整个代码库的模块进行静态分析、编译打包的过程。</p>\n<h2 id=\"所有资源都是模块\"><a href=\"#所有资源都是模块\" class=\"headerlink\" title=\"所有资源都是模块\"></a>所有资源都是模块</h2><p>在上面的分析过程中，我们提到的模块仅仅是指JavaScript模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、HTML 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 coffeescript、 less、 sass、众多的模板库、多语言系统（i18n）等等。</p>\n<p>如果他们都可以视作模块，并且都可以通过require的方式来加载，将带来优雅的开发体验，比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./style.css\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./style.less\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./template.jade\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./image.png\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"静态分析\"><a href=\"#静态分析\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h2><p>在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的记载其来处理。比如一个用LESS写的样式模块，可以先用LESS加载器将它转成一个CSS模块，再通过CSS模块把他插入到页面的<script>标签中执行。Webpack就是这样的需求中应运而生。<br>同时，为了能利用已经存在的各种框架、库和已经写好的文件，我们还需要一个模块加载的兼容策略，来避免重写所有的模块。</p>\n</script></p>","excerpt":"","more":"<h2 id=\"系统模块的演进\"><a href=\"#系统模块的演进\" class=\"headerlink\" title=\"系统模块的演进\"></a>系统模块的演进</h2><p>模块系统主要解决模块的定义、依赖和导出，现已经存在的模块系统有如下几种。</p>\n<h3 id=\"lt-script-gt-标签\"><a href=\"#lt-script-gt-标签\" class=\"headerlink\" title=\"&lt;script&gt;标签\"></a><code>&lt;script&gt;</code>标签</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"module1.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"module2.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"module3.js\"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>这是最原始的JavaScript文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在window对象中，不同模块的接口调用都是一个作用域，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如YUI库。  </p>\n<p>这种原始的加载方式暴露了一些显而易见的弊端：  </p>\n<ol>\n<li>全局 作用于下容易造成变量冲突  </li>\n<li>文件只能按照<code>&lt;script&gt;</code>的书写顺序进行加载</li>\n<li>开发人员必须主观解决模块和代码库的依赖关系</li>\n<li>在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪</li>\n</ol>\n<h3 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h3><p>服务器端的Node.js遵循<a href=\"http://wiki.commonjs.org/wiki/CommonJS\">CommonJS规范</a>，该规范的核心思想是允许模块通过require方法来同步加载所要依赖的其他模块，然后通过exports或module.exports来导出需要暴露的接口。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"module\"</span>);  </span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"../file.js\"</span>);  </span><br><span class=\"line\">exports.doSth = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = someThing;</span><br></pre></td></tr></table></figure></p>\n<p>优点：</p>\n<ol>\n<li>服务器端模块便于重用</li>\n<li>NPM中已经有将近20万个可以使用的模块包</li>\n<li>简单并容易使用</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的</li>\n<li>不能非阻塞的并行加载多个模块</li>\n</ol>\n<p>实现：</p>\n<ol>\n<li>服务器端的Node.js</li>\n<li>Browserify，浏览器端的CommonJS实现，可以使用NPM的模块，但是编译打包后的文件体积可能很大</li>\n<li>modules-webmake，类似Browserify，还不如Browserify灵活</li>\n<li>wreq，Browserify的前身</li>\n</ol>\n<h3 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h3><p><a href=\"https://github.com/amdjs/amdjs-api\">Asynchronous Module Definition</a> 规范其实只有一个主要的接口define(id?,dependencies?,factory)，它要在声明模块的时候指定所有的依赖dependences，并且还要当做形参传到factory中，对于依赖的模块提前执行，依赖前置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">\"module\"</span>,[<span class=\"string\">\"dep1\"</span>.<span class=\"string\">\"dep2\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d1,d2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> someThing;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"module\"</span>,<span class=\"string\">\"../files\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module,file</span>)</span>&#123;</span><br><span class=\"line\">    doSomething();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>优点：</p>\n<ol>\n<li>适合在浏览器环境中异步加载模块</li>\n<li>可以并行加载多个模块</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不顺畅</li>\n<li>不符合通用的模块化思维方式，是一种妥协的实现</li>\n</ol>\n<p>实现：</p>\n<ul>\n<li><a href=\"http://requirejs.org/\">RequireJS</a></li>\n<li><a href=\"https://github.com/cujojs/curl\">curl</a></li>\n</ul>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p><a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\">Common Module Definition</a>规范和AMD很相似，尽量保持简单，并与ComminJS和Node.js的Modules规范保持了很大的兼容性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require,exports,module</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">\"jquery\"</span>);</span><br><span class=\"line\">    exports.doSomething = ...</span><br><span class=\"line\">    module.exports = ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>优点：</p>\n<ol>\n<li>依赖就近，延迟执行</li>\n<li>可以很容易在Nod.js中执行</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>依赖SPM打包，模块的加载逻辑偏重</li>\n</ol>\n<p>实现：</p>\n<ul>\n<li><a href=\"http://seajs.org/\">Sea.js</a></li>\n<li><a href=\"https://github.com/cloudcome/coolie\">coolie</a></li>\n</ul>\n<h3 id=\"UMD\"><a href=\"#UMD\" class=\"headerlink\" title=\"UMD\"></a>UMD</h3><p><a href=\"https://github.com/umdjs/umd\">Universal Module Definition</a> 规范类似于兼容 CommonJS 和 AMD的语法糖，是模块定义的跨平台解决方案。</p>\n<h3 id=\"ES6模块\"><a href=\"#ES6模块\" class=\"headerlink\" title=\"ES6模块\"></a>ES6模块</h3><p>EcmaScript6 标准增加了JavaScript语言层面的模块体系定义。<a href=\"http://es6.ruanyifeng.com/#docs/module\">ES6模块</a>的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD都只能在运行时确认这些东西。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"jquery\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStuff</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span> <span class=\"string\">\"localModule\"</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>优点：</p>\n<ol>\n<li>容易进行静态分析</li>\n<li>面向未来的EcmaScript标准</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>原生浏览器端还没有实现该标准</li>\n<li>全新的命令字，新版的Node.js才支持</li>\n</ol>\n<p>实现：</p>\n<ul>\n<li><a href=\"https://babeljs.io/\">Babel</a></li>\n</ul>\n<h3 id=\"期望的模块系统\"><a href=\"#期望的模块系统\" class=\"headerlink\" title=\"期望的模块系统\"></a>期望的模块系统</h3><p>可以兼容多种模块风格，尽量可以利用已有的代码，不仅仅是Javascript模块化，还有CSS、图片、字体等资源也需要模块化。</p>\n<h2 id=\"前端模块加载\"><a href=\"#前端模块加载\" class=\"headerlink\" title=\"前端模块加载\"></a>前端模块加载</h2><p>前端模块要在客户端中执行，所以他们需要增量加载到浏览器中。<br>模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴。<br><strong><em>分块传输</em></strong>，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案。<br>要实现模块的按需加载，就需要一个对整个代码库的模块进行静态分析、编译打包的过程。</p>\n<h2 id=\"所有资源都是模块\"><a href=\"#所有资源都是模块\" class=\"headerlink\" title=\"所有资源都是模块\"></a>所有资源都是模块</h2><p>在上面的分析过程中，我们提到的模块仅仅是指JavaScript模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、HTML 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 coffeescript、 less、 sass、众多的模板库、多语言系统（i18n）等等。</p>\n<p>如果他们都可以视作模块，并且都可以通过require的方式来加载，将带来优雅的开发体验，比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./style.css\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./style.less\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./template.jade\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./image.png\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"静态分析\"><a href=\"#静态分析\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h2><p>在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的记载其来处理。比如一个用LESS写的样式模块，可以先用LESS加载器将它转成一个CSS模块，再通过CSS模块把他插入到页面的<script>标签中执行。Webpack就是这样的需求中应运而生。<br>同时，为了能利用已经存在的各种框架、库和已经写好的文件，我们还需要一个模块加载的兼容策略，来避免重写所有的模块。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciob9wmvh0006zgdl26sut1o3","category_id":"ciob9wmve0004zgdllbr0dtbo","_id":"ciob9wmvq000bzgdlck9nlrxk"},{"post_id":"ciob9wmv50001zgdlfx0pkipb","category_id":"ciob9wmve0004zgdllbr0dtbo","_id":"ciob9wmvw000fzgdlf9l8dzlr"},{"post_id":"ciob9wmvn000azgdl5pvqtous","category_id":"ciob9wmve0004zgdllbr0dtbo","_id":"ciob9wmvz000izgdl9hu29n8p"},{"post_id":"ciob9wmv90002zgdl9jo66tez","category_id":"ciob9wmve0004zgdllbr0dtbo","_id":"ciob9wmw2000nzgdlc5dw7hb6"},{"post_id":"ciob9wmvr000czgdlgb8l1aqd","category_id":"ciob9wmve0004zgdllbr0dtbo","_id":"ciob9wmw4000ozgdl911qvnwt"},{"post_id":"ciob9wmvf0005zgdllza3ssne","category_id":"ciob9wmve0004zgdllbr0dtbo","_id":"ciob9wmw4000rzgdldlwa65j6"},{"post_id":"ciob9wmw0000kzgdlpki3bjgv","category_id":"ciob9wmve0004zgdllbr0dtbo","_id":"ciob9wmw5000tzgdl4vle1jqu"},{"post_id":"ciob9wmvk0008zgdlf6jeyxhg","category_id":"ciob9wmw1000lzgdlgs2jtpt4","_id":"ciob9wmw5000vzgdlgn9vzt6d"},{"post_id":"ciob9wmvx000hzgdlcxpk4rcv","category_id":"ciob9wmw1000lzgdlgs2jtpt4","_id":"ciob9wmw7000xzgdl5p9v0k4t"}],"PostTag":[{"post_id":"ciob9wmv50001zgdlfx0pkipb","tag_id":"ciob9wmvc0003zgdlr4bl0elf","_id":"ciob9wmvx000gzgdlvcbzvl98"},{"post_id":"ciob9wmv50001zgdlfx0pkipb","tag_id":"ciob9wmvk0007zgdl2xbe8irt","_id":"ciob9wmvz000jzgdldx24120p"},{"post_id":"ciob9wmv90002zgdl9jo66tez","tag_id":"ciob9wmvv000ezgdl136cfn1a","_id":"ciob9wmw5000szgdldc15uv95"},{"post_id":"ciob9wmv90002zgdl9jo66tez","tag_id":"ciob9wmw2000mzgdlprg8hk18","_id":"ciob9wmw5000uzgdl1o9egmtw"},{"post_id":"ciob9wmvf0005zgdllza3ssne","tag_id":"ciob9wmw4000qzgdl69too0vb","_id":"ciob9wmwb0010zgdlvq3p0wff"},{"post_id":"ciob9wmvf0005zgdllza3ssne","tag_id":"ciob9wmw6000wzgdl6uvhg4gg","_id":"ciob9wmwb0011zgdlig01h1gk"},{"post_id":"ciob9wmvf0005zgdllza3ssne","tag_id":"ciob9wmw7000yzgdlkalv3mqs","_id":"ciob9wmwd0013zgdlcit89aup"},{"post_id":"ciob9wmvh0006zgdl26sut1o3","tag_id":"ciob9wmw9000zzgdl3lp21nae","_id":"ciob9wmwe0015zgdl3wtbik1i"},{"post_id":"ciob9wmvh0006zgdl26sut1o3","tag_id":"ciob9wmwc0012zgdl6n2iveu8","_id":"ciob9wmwg0016zgdlsq07oki4"},{"post_id":"ciob9wmvk0008zgdlf6jeyxhg","tag_id":"ciob9wmwd0014zgdlswzamcub","_id":"ciob9wmwh0019zgdlnmz5kl9e"},{"post_id":"ciob9wmvk0008zgdlf6jeyxhg","tag_id":"ciob9wmwg0017zgdlgocsaz7p","_id":"ciob9wmwi001azgdlg9g0j0ya"},{"post_id":"ciob9wmvn000azgdl5pvqtous","tag_id":"ciob9wmw4000qzgdl69too0vb","_id":"ciob9wmwj001dzgdlvfu3x9sv"},{"post_id":"ciob9wmvn000azgdl5pvqtous","tag_id":"ciob9wmwi001bzgdltd6wecpf","_id":"ciob9wmwj001ezgdlzgek7v14"},{"post_id":"ciob9wmvr000czgdlgb8l1aqd","tag_id":"ciob9wmwi001czgdlh01tuoct","_id":"ciob9wmwl001hzgdlljumcqjn"},{"post_id":"ciob9wmvr000czgdlgb8l1aqd","tag_id":"ciob9wmwk001fzgdl3fgb8w4f","_id":"ciob9wmwm001izgdlezydvxeu"},{"post_id":"ciob9wmvx000hzgdlcxpk4rcv","tag_id":"ciob9wmw4000qzgdl69too0vb","_id":"ciob9wmwn001lzgdl5xfx6t8m"},{"post_id":"ciob9wmvx000hzgdlcxpk4rcv","tag_id":"ciob9wmwm001jzgdlx5w6xwy7","_id":"ciob9wmwn001mzgdli012f1sk"},{"post_id":"ciob9wmw0000kzgdlpki3bjgv","tag_id":"ciob9wmw9000zzgdl3lp21nae","_id":"ciob9wmwo001ozgdlhjfarq6i"},{"post_id":"ciob9wmw0000kzgdlpki3bjgv","tag_id":"ciob9wmwn001nzgdluw1c7t70","_id":"ciob9wmwo001pzgdl4sin8w7z"}],"Tag":[{"name":"animation","_id":"ciob9wmvc0003zgdlr4bl0elf"},{"name":"css3","_id":"ciob9wmvk0007zgdl2xbe8irt"},{"name":"immutable","_id":"ciob9wmvv000ezgdl136cfn1a"},{"name":"react","_id":"ciob9wmw2000mzgdlprg8hk18"},{"name":"javascript","_id":"ciob9wmw4000qzgdl69too0vb"},{"name":"es6","_id":"ciob9wmw6000wzgdl6uvhg4gg"},{"name":"函数式编程","_id":"ciob9wmw7000yzgdlkalv3mqs"},{"name":"webpack","_id":"ciob9wmw9000zzgdl3lp21nae"},{"name":"快速上手","_id":"ciob9wmwc0012zgdl6n2iveu8"},{"name":"zepto","_id":"ciob9wmwd0014zgdlswzamcub"},{"name":"学习笔记","_id":"ciob9wmwg0017zgdlgocsaz7p"},{"name":"reduce","_id":"ciob9wmwi001bzgdltd6wecpf"},{"name":"flexible","_id":"ciob9wmwi001czgdlh01tuoct"},{"name":"终端适配","_id":"ciob9wmwk001fzgdl3fgb8w4f"},{"name":"语法和数据类型","_id":"ciob9wmwm001jzgdlx5w6xwy7"},{"name":"模块系统","_id":"ciob9wmwn001nzgdluw1c7t70"}]}}